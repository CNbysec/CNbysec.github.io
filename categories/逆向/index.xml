<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>逆向 - 分类 - bysec</title>
        <link>http://localhost:1313/categories/%E9%80%86%E5%90%91/</link>
        <description>逆向 - 分类 - bysec</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>bysec@qq.com (bysec)</managingEditor>
            <webMaster>bysec@qq.com (bysec)</webMaster><lastBuildDate>Sun, 06 Oct 2024 20:42:37 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/categories/%E9%80%86%E5%90%91/" rel="self" type="application/rss+xml" /><item>
    <title>小白也能懂逆向分析某网站加速乐Cookie参数流程详解</title>
    <link>http://localhost:1313/%E5%B0%8F%E7%99%BD%E4%B9%9F%E8%83%BD%E6%87%82%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90cookie%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</link>
    <pubDate>Sun, 06 Oct 2024 20:42:37 &#43;0800</pubDate><author>
        <name>bysec</name>
    </author><guid>http://localhost:1313/%E5%B0%8F%E7%99%BD%E4%B9%9F%E8%83%BD%E6%87%82%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90cookie%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/</guid>
    <description><![CDATA[<blockquote>
<p><em>转载自： <a href="https://juejin.cn/post/7386485874300977178" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7386485874300977178</a></em></p>
</blockquote>
<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>加速乐作为一种常见的反爬虫技术，在网络上已有大量详尽深入的教程可供参考。然而，对于那些初次接触的人来说，直接面对它可能仍会感到困惑。</p>
<h2 id="声明" class="headerLink">
    <a href="#%e5%a3%b0%e6%98%8e" class="header-mark"></a>声明</h2><blockquote>
<p>本文仅用于学习交流，学习探讨逆向知识，欢迎私信共享学习心得。如有侵权，联系博主删除。请勿商用，否则后果自负。</p>
</blockquote>
<h2 id="什么是加速乐" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%8a%a0%e9%80%9f%e4%b9%90" class="header-mark"></a>什么是加速乐？</h2><p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000010CdJ93CHwXA.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000010CdJ93CHwXA.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000010CdJ93CHwXA.jpg">
        
    </a></p>
<p>加速乐采用了一系列的高级反爬虫技术，包括OB混淆、动态加密算法和多层Cookie获取，以确保整体校验的严密性。关键校验字段位于Cookie中的<code>__jsl_clearance_s</code>。其<strong>验证过程通常涉及三次关键的请求</strong>：</p>
<ol>
<li>
<p><strong>首次请求</strong>：当用户首次尝试访问目标网站时，服务器会返回一个特殊的521状态码，其响应数据通过AAEncode技术进行混淆处理，以初步筛选访问者。</p>
</li>
<li>
<p><strong>二次请求</strong>：紧接着的第二次请求中，如果服务器继续检测到可疑行为，它会再次返回521状态码，但这次响应数据将采用更为复杂的OB混淆，进一步验证访问者的身份。</p>
</li>
<li>
<p><strong>三次请求</strong>：只有在前两次请求成功通过验证后，第三次请求才能成功访问网站，此时服务器将返回正常的状态码200，并提供用户所需的内容。</p>
</li>
</ol>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00001spKf70Onvsc.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00001spKf70Onvsc.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00001spKf70Onvsc.jpg">
        
    </a></p>
<p>通过这一连串精心设计的步骤，加速乐确保了只有合法的访问者能够顺利获取网站数据，从而有效抵御恶意爬虫的侵扰，我们要做的就是模拟这些操作，获取想要的数据。</p>
<h2 id="今日网站" class="headerLink">
    <a href="#%e4%bb%8a%e6%97%a5%e7%bd%91%e7%ab%99" class="header-mark"></a>今日网站</h2><p>目标URL: <code>aHR0cHM6Ly93d3cuY252ZC5vcmcuY24vZmxhdy90eXBlbGlzdD90eXBlSWQ9Mjc=</code></p>
<h2 id="流程分析-浏览器" class="headerLink">
    <a href="#%e6%b5%81%e7%a8%8b%e5%88%86%e6%9e%90-%e6%b5%8f%e8%a7%88%e5%99%a8" class="header-mark"></a>流程分析-浏览器</h2><p>按照常规做法，我们首先进行网络抓包分析。</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00004JfmID1VsZLD.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00004JfmID1VsZLD.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00004JfmID1VsZLD.jpg">
        
    </a></p>
<h3 id="第一次请求" class="headerLink">
    <a href="#%e7%ac%ac%e4%b8%80%e6%ac%a1%e8%af%b7%e6%b1%82" class="header-mark"></a>第一次请求</h3><ul>
<li><code>发送</code>：未携带 Cookie</li>
<li><code>响应</code>：状态码<code>521</code>，Cookie 中的<code>__jsluid_s</code>值和<code>js</code>代码</li>
</ul>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00000K7qZU3ItDc3.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00000K7qZU3ItDc3.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00000K7qZU3ItDc3.jpg">
        
    </a></p>
<h3 id="第二次请求" class="headerLink">
    <a href="#%e7%ac%ac%e4%ba%8c%e6%ac%a1%e8%af%b7%e6%b1%82" class="header-mark"></a>第二次请求</h3><ul>
<li><code>发送</code>：Cookie 携带<code>__jsluid_s</code>和<code>__jsl_clearance_s</code>值</li>
<li><code>响应</code>：状态码<code>521</code>，新的<code>js</code>代码</li>
</ul>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00002oaIvJ2FWXrj.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00002oaIvJ2FWXrj.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00002oaIvJ2FWXrj.jpg">
        
    </a></p>
<h3 id="第三次请求" class="headerLink">
    <a href="#%e7%ac%ac%e4%b8%89%e6%ac%a1%e8%af%b7%e6%b1%82" class="header-mark"></a>第三次请求</h3><ul>
<li><code>发送</code>：Cookie 携带原始<code>__jsluid_s</code>值，新的<code>__jsl_clearance_s</code>值</li>
<li><code>响应</code>：状态码<code>200</code>，正文内容</li>
</ul>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00003CsbsE3mrA5a.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00003CsbsE3mrA5a.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00003CsbsE3mrA5a.jpg">
        
    </a></p>
<blockquote>
<p>观察结果揭示了对同一页面共发起了三次<code>HTTP</code>请求：前两次请求均遭遇了<code>521</code>状态码的响应，而最后一次请求成功收到了<code>200</code>状态码。这种模式正是加速乐反爬虫机制的显著特征。</p>
</blockquote>
<h2 id="流程分析-抓包工具" class="headerLink">
    <a href="#%e6%b5%81%e7%a8%8b%e5%88%86%e6%9e%90-%e6%8a%93%e5%8c%85%e5%b7%a5%e5%85%b7" class="header-mark"></a>流程分析-抓包工具</h2><p>浏览器上我们没能看到具体的响应，我们借助抓包工具试试，这里使用的<code>Fiddler</code>。</p>
<h3 id="第一次请求-1" class="headerLink">
    <a href="#%e7%ac%ac%e4%b8%80%e6%ac%a1%e8%af%b7%e6%b1%82-1" class="header-mark"></a>第一次请求</h3><p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00000bzZ1h0xViso.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00000bzZ1h0xViso.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00000bzZ1h0xViso.jpg">
        
    </a></p>
<h3 id="第二次请求-1" class="headerLink">
    <a href="#%e7%ac%ac%e4%ba%8c%e6%ac%a1%e8%af%b7%e6%b1%82-1" class="header-mark"></a>第二次请求</h3><p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00001MlfbN033sPr.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00001MlfbN033sPr.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00001MlfbN033sPr.jpg">
        
    </a></p>
<h3 id="第三次请求-1" class="headerLink">
    <a href="#%e7%ac%ac%e4%b8%89%e6%ac%a1%e8%af%b7%e6%b1%82-1" class="header-mark"></a>第三次请求</h3><p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00000fEc7o2dk3Gg.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00000fEc7o2dk3Gg.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00000fEc7o2dk3Gg.jpg">
        
    </a></p>
<blockquote>
<p>同样，看到了三次请求的过程，并且向我们展示了具体的响应。</p>
</blockquote>
<h2 id="逆向分析" class="headerLink">
    <a href="#%e9%80%86%e5%90%91%e5%88%86%e6%9e%90" class="header-mark"></a>逆向分析</h2><h3 id="获取第一个__jsl_clearance_s" class="headerLink">
    <a href="#%e8%8e%b7%e5%8f%96%e7%ac%ac%e4%b8%80%e4%b8%aa__jsl_clearance_s" class="header-mark"></a>获取第一个<code>__jsl_clearance_s</code></h3><p>通过<code>Fiddler</code>或使用<code>python</code>模拟请求，得到下面这样一段JS代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="o">=</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;j&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;s&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;l&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;l&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;r&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;s&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">+!+</span><span class="p">[]</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">3</span><span class="o">+</span><span class="mi">4</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">-~</span><span class="kc">false</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="mi">7</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">4</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">6</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="mi">2</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(([</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="mi">0</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">-~</span><span class="mi">1</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="mi">2</span><span class="o">^</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="o">+</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">/</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="o">+</span><span class="kc">true</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;L&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;w&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;j&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">2</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;u&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;T&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;F&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">-~</span><span class="p">{}</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;j&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;j&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">~~</span><span class="s1">&#39;&#39;</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;E&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;t&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">~~</span><span class="kc">false</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;g&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;I&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">-~</span><span class="mi">1</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;J&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;g&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;K&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="o">+</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">/</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;N&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;f&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="mi">1</span><span class="o">+</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;M&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;x&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;g&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">-~</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">-~</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">((</span><span class="o">+</span><span class="kc">false</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">~~</span><span class="p">{}</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;P&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;t&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;h&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;S&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;S&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;t&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;N&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;n&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;S&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;u&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;r&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">);</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span><span class="o">+</span><span class="nx">location</span><span class="p">.</span><span class="nx">search</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>复制到浏览器执行下来看看:</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000025j1lt05AHCW.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000025j1lt05AHCW.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000025j1lt05AHCW.jpg">
        
    </a></p>
<p>得到了<code>__jsl_clearance_s=1719472445.236|-1|Lwj3uTFn1jj0Et0gI2JgiKm6Nf4%3D; Max-age=3600; Path=/; SameSite=None; Secure</code>。</p>
<p>而<code>__jsl_clearance_s</code>正是第二次请求需要带上的Cookie之一。</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00001H0vDS2nqE80.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00001H0vDS2nqE80.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00001H0vDS2nqE80.jpg">
        
    </a></p>
<blockquote>
<p>真的老登。为了使代码难以阅读和分析，还进行了<code>AAEncode</code>加密混淆。</p>
</blockquote>
<h3 id="获取第二个__jsl_clearance_s" class="headerLink">
    <a href="#%e8%8e%b7%e5%8f%96%e7%ac%ac%e4%ba%8c%e4%b8%aa__jsl_clearance_s" class="header-mark"></a>获取第二个<code>__jsl_clearance_s</code></h3><p>使用第一个请求后得到的 Cookies 继续发起第二段请求得到新的 JS 代码：</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00000Y8Qgg2tnsDM.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00000Y8Qgg2tnsDM.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00000Y8Qgg2tnsDM.jpg">
        
    </a></p>
<p>代码被压缩了，不是很好看，使用在线 JS 美化（<code>https://spidertools.cn/#/formatJS</code>）后：</p>
<blockquote>
<p>其中有明显的特征，我们能判断出这是一个<code>OB混淆</code>加密：</p>
<ol>
<li>一般由一个大数组或者含有大数组的函数、一个自执行函数、解密函数和加密后的函数四部分组成；</li>
<li>函数名和变量名通常以<code>_0x</code>或者<code>0x</code>开头，后接<code>1~6</code>位数字或字母组合；</li>
<li>自执行函数，进行移位操作，有明显的<code>push、shift</code>关键字；</li>
</ol>
</blockquote>
<p>使用（<code>decode_obfuscator</code>）反混淆工具还原代码后，整体的结构就清晰了很多。</p>
<p><code>setTimeout</code>函数是异步执行的，它不会立即返回值，做一下处理，并让<code>go</code>函数返回<code>cookies</code>。</p>
<blockquote>
<p><code>OB反混淆工具</code>有很多（你们常用哪些，欢迎评论区告诉我，让我<code>涨涨脑子</code>）:</p>
<ul>
<li><code>https://tool.yuanrenxue.cn/decode_obfuscator</code></li>
<li><code>https://de4js.kshift.me/</code>、<code>https://www.dejs.vip/2obfuscator</code></li>
<li>浏览器插件<code>v_tools</code>等</li>
</ul>
</blockquote>
<p>然后，我们迫不及待的运行：</p>
<p><code>node.exe .\final.js</code></p>
<p>回应我们的就是<code>ReferenceError: window is not defined</code>等报错，依次补上：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nb">window</span> <span class="o">=</span> <span class="p">{}</span> <span class="nb">window</span><span class="p">.</span><span class="nx">navigator</span><span class="o">=</span><span class="p">{</span> <span class="s1">&#39;userAgent&#39;</span><span class="o">:</span><span class="s1">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&#39;</span> <span class="p">}</span> <span class="nb">document</span> <span class="o">=</span> <span class="nx">global</span> <span class="nx">location</span> <span class="o">=</span> <span class="p">{}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再次运行得到：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>haige-py3.10<span class="o">)</span> &gt; node.exe .<span class="se">\f</span>inal.js
</span></span><span class="line"><span class="cl">1719472445.601<span class="p">|</span>0<span class="p">|</span>j3AZtLtZQTMBXOgbV%2FXe2COV%2BT0%3D
</span></span><span class="line"><span class="cl"><span class="nv">__jsl_clearance_s</span><span class="o">=</span>1719472445.601<span class="p">|</span>0<span class="p">|</span>j3AZtLtZQTMBXOgbV%2FXe2COV%2BT0%3D<span class="p">;</span>Max-age<span class="o">=</span>3600<span class="p">;</span> <span class="nv">path</span> <span class="o">=</span> /<span class="p">;</span> <span class="nv">SameSite</span><span class="o">=</span>None<span class="p">;</span> Secure
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>拿去和抓包得到的cookie进行比较，结果一致。</p>
</blockquote>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00001qPkWG1rHzdx.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00001qPkWG1rHzdx.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00001qPkWG1rHzdx.jpg">
        
    </a></p>
<p>在<code>Pycharm</code>调试时，我们注意到：</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00002JyrsN0yGVqr.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00002JyrsN0yGVqr.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00002JyrsN0yGVqr.jpg">
        
    </a></p>
<p>我们注意到：条件成立时<code>_0x1f3544</code>为<code>1719472445.601|0|j3AZtLtZQTMBXOgbV%2FXe2COV%2BT0%3D</code>，正好是<code>__jsl_clearance_s</code>的值。</p>
<hr>
<p>尝试着全局搜索参数里的<code>sha1</code>：</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD0000307eR136NyIX.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD0000307eR136NyIX.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD0000307eR136NyIX.jpg">
        
    </a></p>
<p>发现只有参数里带了，所以不难推断：</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000014YDFA1a7xeM.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000014YDFA1a7xeM.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000014YDFA1a7xeM.jpg">
        
    </a></p>
<p>再找个在线网址验证下<code>sha1</code>也即这里的<code>hash</code>方法是否为魔改过的：</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000023kcxa2GGrHg.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000023kcxa2GGrHg.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000023kcxa2GGrHg.jpg">
        
    </a></p>
<p>至此，我们其实已经概率性拿到一些数据了（？？）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#! -*-conding=: UTF-8 -*-</span>
</span></span><span class="line"><span class="cl"><span class="c1"># @Author  : 海哥python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># @Software: PyCharm</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">execjs</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">loguru</span> <span class="kn">import</span> <span class="n">logger</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">fake_useragent</span> <span class="kn">import</span> <span class="n">UserAgent</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">session</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">ua</span> <span class="o">=</span> <span class="n">UserAgent</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_first_cookie</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">aa_encode_text</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;document.cookie=(.*?);location&#39;</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">__jsl_clearance_s</span> <span class="o">=</span> <span class="n">execjs</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="n">aa_encode_text</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span><span class="p">[</span><span class="s2">&#34;__jsl_clearance_s&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">__jsl_clearance_s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;=&#34;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;get_first_cookie: </span><span class="si">{</span><span class="n">cookies</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cookies</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_second_cookie_go_params</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">cookies</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">go_params</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;;go\((.*?)\)&lt;/script&gt;&#39;</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_response_data</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;max&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s2">&#34;offset&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                           <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">.</span><span class="n">encoding</span> <span class="o">=</span> <span class="s2">&#34;utf-8&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_second_cookies</span><span class="p">(</span><span class="n">cookies</span><span class="p">,</span> <span class="n">go_params</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__jsl_clearance_s</span> <span class="o">=</span> <span class="n">execjs</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&#34;final.js&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&#34;go&#34;</span><span class="p">,</span> <span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span><span class="p">[</span><span class="s2">&#34;__jsl_clearance_s&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">__jsl_clearance_s</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;cookies: </span><span class="si">{</span><span class="n">cookies</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cookies</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://www.xxxx.xxx.cn/flaw/typelist?typeId=27&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="n">ua</span><span class="o">.</span><span class="n">random</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span> <span class="o">=</span> <span class="n">get_first_cookie</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">go_params</span> <span class="o">=</span> <span class="n">get_second_cookie_go_params</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span> <span class="o">=</span> <span class="n">get_second_cookies</span><span class="p">(</span><span class="n">cookies</span><span class="p">,</span> <span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">get_response_data</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>然鹅~~并不是每次都能得到我们要的数据！</strong></p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00003NWZZM2MT00J.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00003NWZZM2MT00J.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00003NWZZM2MT00J.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00000oz7tL0vfUO2.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00000oz7tL0vfUO2.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00000oz7tL0vfUO2.jpg">
        
    </a></p>
<blockquote>
<p>通过尝试（抓包），发现加密函数共有<code>sha256</code>、<code>sha1</code>、<code>md5</code>三种情况。</p>
</blockquote>
<p>因此，我们完全可以按照之前的步骤分别得到<code>sha256</code>、<code>sha1</code>、<code>md5</code>三种情况下的<code>js</code>代码，并根据第二次请求时返回的<code>js</code>中的<code>ha</code>调用对应的<code>js</code>得到最终的<code>__jsl_clearance_s</code>。</p>
<blockquote>
<p>又因<code>sha256</code>、<code>sha1</code>、<code>md5</code>的实现并未被魔改，因此完全可以使用<code>Javascript</code>（<code>npm install crypto-js</code>）或<code>python</code>进行简化改写。</p>
</blockquote>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00000JW4ge1uBApB.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00000JW4ge1uBApB.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00000JW4ge1uBApB.jpg">
        
    </a></p>
<h2 id="其它调试方式" class="headerLink">
    <a href="#%e5%85%b6%e5%ae%83%e8%b0%83%e8%af%95%e6%96%b9%e5%bc%8f" class="header-mark"></a>其它调试方式</h2><p>其它调试方式还有很多，比较推荐的有：</p>
<h3 id="hook-cookie值使用油猴断一下set-cookie位置" class="headerLink">
    <a href="#hook-cookie%e5%80%bc%e4%bd%bf%e7%94%a8%e6%b2%b9%e7%8c%b4%e6%96%ad%e4%b8%80%e4%b8%8bset-cookie%e4%bd%8d%e7%bd%ae" class="header-mark"></a><code>Hook Cookie</code>值：使用油猴断一下set cookie位置</h3><hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="s1">&#39;use strict&#39;</span><span class="p">;</span> <span class="kd">var</span> <span class="nx">org</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">__lookupSetter__</span><span class="p">(</span><span class="s1">&#39;cookie&#39;</span><span class="p">);</span> <span class="nb">document</span><span class="p">.</span><span class="nx">__defineSetter__</span><span class="p">(</span><span class="s1">&#39;cookie&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cookie</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;__jsl_clearance_s&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="kr">debugger</span><span class="p">;</span> <span class="p">}</span> <span class="nx">org</span> <span class="o">=</span> <span class="nx">cookie</span><span class="p">;</span> <span class="p">});</span> <span class="nb">document</span><span class="p">.</span><span class="nx">__defineGetter__</span><span class="p">(</span><span class="s1">&#39;cookie&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">org</span><span class="p">;</span> <span class="p">});</span> <span class="p">})();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00002H04We1otCEl.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00002H04We1otCEl.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00002H04We1otCEl.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00003mTMq71j363h.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00003mTMq71j363h.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00003mTMq71j363h.jpg">
        
    </a></p>
<p>清除 cookie 重新刷新页面，页面被成功断住：</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00002NoBjd1DTy9w.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00002NoBjd1DTy9w.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00002NoBjd1DTy9w.jpg">
        
    </a></p>
<p>然后就可以尝试调试了，这里不做过多介绍。</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00003ngElC1lUMqt.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00003ngElC1lUMqt.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00003ngElC1lUMqt.jpg">
        
    </a></p>
<hr>
<h3 id="文件替换利用-fiddler-的自动响应" class="headerLink">
    <a href="#%e6%96%87%e4%bb%b6%e6%9b%bf%e6%8d%a2%e5%88%a9%e7%94%a8-fiddler-%e7%9a%84%e8%87%aa%e5%8a%a8%e5%93%8d%e5%ba%94" class="header-mark"></a>文件替换：利用 Fiddler 的<code>自动响应</code>。</h3><p>将第二次请求获取的<code>js</code>代码保存下来，可以手动复制，也可以向下面这样：</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00001M1d5h2Orjxl.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00001M1d5h2Orjxl.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00001M1d5h2Orjxl.jpg">
        
    </a></p>
<p>对响应内容进行<code>js</code>美化（<code>https://spidertools.cn/#/formatJS</code>）</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00003XxAnC3DLpkP.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00003XxAnC3DLpkP.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00003XxAnC3DLpkP.jpg">
        
    </a></p>
<p>清除cookie刷新，也能进行调试了：</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00001toKXM3KoqTY.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00001toKXM3KoqTY.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00001toKXM3KoqTY.jpg">
        
    </a></p>
<hr>
<h3 id="文件替换利用-chrome-的文件替换" class="headerLink">
    <a href="#%e6%96%87%e4%bb%b6%e6%9b%bf%e6%8d%a2%e5%88%a9%e7%94%a8-chrome-%e7%9a%84%e6%96%87%e4%bb%b6%e6%9b%bf%e6%8d%a2" class="header-mark"></a>文件替换：利用 Chrome 的文件替换</h3><p>同上，将<code>js</code>代码美化后保存在本地，可能需要一些微调，例如：首尾<code>Script</code>标签前后会多出空格以及脚本最后可能多出<code>/</code>等。补上<code>debuuger;</code>即可进行替换调试：</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000043rZnD4ScgIS.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000043rZnD4ScgIS.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000043rZnD4ScgIS.jpg">
        
    </a></p>
<p>然后将文件内容替换为上面美化处理后的<code>js</code>代码，清除 cookies 并刷新页面即可调试。</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00003nF4tq1MvPjz.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00003nF4tq1MvPjz.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00003nF4tq1MvPjz.jpg">
        
    </a></p>
<h2 id="结果验证" class="headerLink">
    <a href="#%e7%bb%93%e6%9e%9c%e9%aa%8c%e8%af%81" class="header-mark"></a>结果验证</h2><p>根据上面的分析，我们拿到了每次请求所需要的<code>cookie</code>，发起请求就是很简单的事了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#! -*-conding=: UTF-8 -*-</span>
</span></span><span class="line"><span class="cl"><span class="c1"># @Author  : 海哥python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># @Software: PyCharm</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">execjs</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">loguru</span> <span class="kn">import</span> <span class="n">logger</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">fake_useragent</span> <span class="kn">import</span> <span class="n">UserAgent</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">session</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">ua</span> <span class="o">=</span> <span class="n">UserAgent</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_first_cookie</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span> <span class="o">=</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">aa_encode_text</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;document.cookie=(.*?);location&#39;</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">__jsl_clearance_s</span> <span class="o">=</span> <span class="n">execjs</span><span class="o">.</span><span class="n">eval</span><span class="p">(</span><span class="n">aa_encode_text</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;;&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span><span class="p">[</span><span class="s2">&#34;__jsl_clearance_s&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">__jsl_clearance_s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&#34;=&#34;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;get_first_cookie: </span><span class="si">{</span><span class="n">cookies</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cookies</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_second_cookie_go_params</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">cookies</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">go_params</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;;go\((.*?)\)&lt;/script&gt;&#39;</span><span class="p">,</span> <span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_final_jsl_clearance</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">chars</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s1">&#39;chars&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">chars</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">chars</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">clearance</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;bts&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;chars&#39;</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;chars&#39;</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;bts&#39;</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">encrypt</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;ha&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;md5&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">encrypt</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">md5</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;ha&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;sha1&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">encrypt</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">elif</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;ha&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;sha256&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">encrypt</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="n">encrypt</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">clearance</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">            <span class="n">result</span> <span class="o">=</span> <span class="n">encrypt</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;ct&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">clearance</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_response_data</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;max&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="s2">&#34;offset&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">                            <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">response</span><span class="o">.</span><span class="n">encoding</span> <span class="o">=</span> <span class="s2">&#34;utf-8&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_second_cookies</span><span class="p">(</span><span class="n">cookies</span><span class="p">,</span> <span class="n">go_params</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 方法一：原始js, 这里只有sha1的，所以md5和sha256时会拿不到数据，请按照教程自己分析</span>
</span></span><span class="line"><span class="cl">    <span class="n">__jsl_clearance_s</span> <span class="o">=</span> <span class="n">execjs</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&#34;final.js&#34;</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&#34;go&#34;</span><span class="p">,</span> <span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 方法二： js改写</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># __jsl_clearance_s = execjs.compile(open(&#34;__jsl_clearance_s.js&#34;, &#34;r&#34;, encoding=&#34;utf-8&#34;).read()).call(</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># &#34;get__jsl_clearance_s&#34;, go_params)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 方法三：python改写</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># __jsl_clearance_s = get_final_jsl_clearance(go_params)  # 通过python脚本获取到jsl_clearance_s</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span><span class="p">[</span><span class="s2">&#34;__jsl_clearance_s&#34;</span><span class="p">]</span> <span class="o">=</span> <span class="n">__jsl_clearance_s</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;cookies: </span><span class="si">{</span><span class="n">cookies</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">cookies</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://www.xxxx.xxx.cn/flaw/typelist?typeId=27&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;User-Agent&#39;</span><span class="p">:</span> <span class="n">ua</span><span class="o">.</span><span class="n">random</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span> <span class="o">=</span> <span class="n">get_first_cookie</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">go_params</span> <span class="o">=</span> <span class="n">get_second_cookie_go_params</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cookies</span> <span class="o">=</span> <span class="n">get_second_cookies</span><span class="p">(</span><span class="n">cookies</span><span class="p">,</span> <span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">go_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">get_response_data</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="小结" class="headerLink">
    <a href="#%e5%b0%8f%e7%bb%93" class="header-mark"></a>小结</h2><p>遵循文章的指导逆向操作整个解密流程，您会发现这一过程相对简单。关键在于熟练掌握三次请求的顺序及其各自的特征，一旦熟悉这些要点，整个过程将无甚难度。</p>
<h2 id="最后" class="headerLink">
    <a href="#%e6%9c%80%e5%90%8e" class="header-mark"></a>最后</h2><p>如果你觉得文章还不错，请大家<code>点赞、关注、分享、在看</code>下，因为这将是我持续输出更多优质文章的最强动力！</p>
<p>欢迎随时与我联系，我期待与大家交流心得，共同学习，共同进步。</p>]]></description>
</item><item>
    <title>免杀大佬加入黑灰产还打得过吗</title>
    <link>http://localhost:1313/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/</link>
    <pubDate>Mon, 02 Sep 2024 19:12:35 &#43;0800</pubDate><author>
        <name>bysec</name>
    </author><guid>http://localhost:1313/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/</guid>
    <description><![CDATA[<blockquote>
<p><em>转载自： <a href="https://forum.butian.net/share/3705" target="_blank" rel="noopener noreferrer">https://forum.butian.net/share/3705</a></em></p>
</blockquote>
<h2 id="一前言" class="headerLink">
    <a href="#%e4%b8%80%e5%89%8d%e8%a8%80" class="header-mark"></a><strong>一、前言</strong></h2><p>大家好，我是来自顺丰安全成文实验室的一名老兵，代号“PX0”，我的任务是追踪威胁情报，深入分析最新黑灰产动向。近期，实验室捕获到一组“银狐”样本，经查，样本来源于伪装成主流会议软件的网站，网站通过提高搜索引擎的收录权重来诱骗用户下载该病毒软件。</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001j6XZo2eGJUT.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001j6XZo2eGJUT.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001j6XZo2eGJUT.jpg">
        
    </a></p>
<p>此前我也曾分析过“银狐”相关样本，但这回的新版本，免杀技术简直出神入化，主流的安全软件几乎拿它没辙。这让我心里直犯嘀咕：“难道真的有免杀界的高手‘叛变’，跑去给黑灰产当军师了？”不过别担心，接下来，就让我来带大家揭秘这位高手的免杀大招，再教大家几个怎么识别和防住它的高招！</p>
<h2 id="二本文关注点" class="headerLink">
    <a href="#%e4%ba%8c%e6%9c%ac%e6%96%87%e5%85%b3%e6%b3%a8%e7%82%b9" class="header-mark"></a><strong>二、本文关注点</strong></h2><ul>
<li>此银狐分支样本在出现阶段，主流沙箱、EDR 几乎无法检测，本文主要分享新增部分功能</li>
<li>攻击者更加注重杀软和防御能力对抗，引入了 bypass 检测、防病毒模拟器检测、RPC 构建持久化</li>
<li>样本的进化更倾向于多段的内存加载、运行时动态解密，后续可能会出现 rootkit 类型的完全隐蔽后门</li>
<li>根据样本的函数代码通用特征提取检测规则、检测思路分享</li>
</ul>
<h2 id="三正文分析" class="headerLink">
    <a href="#%e4%b8%89%e6%ad%a3%e6%96%87%e5%88%86%e6%9e%90" class="header-mark"></a><strong>三、正文分析</strong></h2><h3 id="1加载过程" class="headerLink">
    <a href="#1%e5%8a%a0%e8%bd%bd%e8%bf%87%e7%a8%8b" class="header-mark"></a>1、加载过程</h3><p>在近期捕获的一批样本中，初始投递的加载器代码几乎一致，攻击者通过最少的 API 调用完成第一阶段的 shellcode 加载 (对通用杀毒软件来说，敏感 API 调用越少，风险相对越小)；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000003zv8s73izDsn.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000003zv8s73izDsn.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000003zv8s73izDsn.jpg">
        
    </a></p>
<p>shellcode 加载完成后，通过内联 jmp rbx 跳转 0x1B0000 执行，这里其实是有一步 mov 的地址转移操作，作用是避免出现 jmp rax 的明显内存调用特征，在 8 月迭代样本也出现了其他的寄存器调用；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000002XvDnz1DCXQB.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000002XvDnz1DCXQB.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000002XvDnz1DCXQB.jpg">
        
    </a></p>
<h3 id="2解密过程" class="headerLink">
    <a href="#2%e8%a7%a3%e5%af%86%e8%bf%87%e7%a8%8b" class="header-mark"></a>2、解密过程</h3><p>进入 shellcode 内部，实际只有 call 一个有效指令，后续的所有字节都是加密状态；这类似 cobaltstrike 睡眠解密，此类函数适合作为检测特征，区别是此函数需在程序启动时检测；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000000hnRyS0uCeCr.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000000hnRyS0uCeCr.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000000hnRyS0uCeCr.jpg">
        
    </a></p>
<p>解密函数即运行时的内部计算，进行了一系列循环右移、减法和取反操作，用于动态解密后续指令；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD0000013jzvQ2RsQQR.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD0000013jzvQ2RsQQR.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD0000013jzvQ2RsQQR.jpg">
        
    </a></p>
<p>经对比可以看出，右侧部分指令被解密，被解密出来的部分实际是一个新的异或解密函数；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD0000006cAkO2Mvrbn.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD0000006cAkO2Mvrbn.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD0000006cAkO2Mvrbn.jpg">
        
    </a></p>
<p>经过长期跟踪发现，此函数出现在银狐多个版本，为了更清楚地了解功能和检测，我们代码还原这个函数；</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">unsigned char key = 0x91;
</span></span></code></pre></td></tr></table>
</div>
</div><p>从内存可以看到整个倒序解密的过程，运行完成后，整块 shellcode 代码被解密完成；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000000u46p82giYwc.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000000u46p82giYwc.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000000u46p82giYwc.jpg">
        
    </a></p>
<h3 id="3环境检测绕过" class="headerLink">
    <a href="#3%e7%8e%af%e5%a2%83%e6%a3%80%e6%b5%8b%e7%bb%95%e8%bf%87" class="header-mark"></a>3、环境检测、绕过</h3><p>解密完成后首先进入 sub_99A5 函数，此函数集成一些 bypass 和环境检测能力，是对比以往样本的增强部分；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000003pWHoj2s1TZ7.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000003pWHoj2s1TZ7.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000003pWHoj2s1TZ7.jpg">
        
    </a></p>
<p>首先是 bypass ETW 和 AMSI，实现方式完全相同；都是通过 patch 到对应函数开头一个 0x3C 字节即 ret 指令，完成扫描、日志输出的代码跳过；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000004MlG7n1rfBRM.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000004MlG7n1rfBRM.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000004MlG7n1rfBRM.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000002QQdZv0MZbGu.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000002QQdZv0MZbGu.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000002QQdZv0MZbGu.jpg">
        
    </a></p>
<h3 id="4模拟环境检测" class="headerLink">
    <a href="#4%e6%a8%a1%e6%8b%9f%e7%8e%af%e5%a2%83%e6%a3%80%e6%b5%8b" class="header-mark"></a>4、模拟环境检测</h3><p>微软防病毒为首次扫描的程序提供了特殊的二进制模拟器环境，会附带一些虚拟模块和预定返回值；接下来的几个 check 函数是关联性代码，整体功能是为了检测 Defender 模拟环境；</p>
<p>判断程序名，如果匹配 v5 数组中的:\myapp.exe(模拟进程名称，不是实际运行的进程)则退出进程；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001AgRVU0i003M.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001AgRVU0i003M.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001AgRVU0i003M.jpg">
        
    </a></p>
<p>以下是对防病毒模拟器初始化功能的部分逆向代码(详细内容可以参考 2018 年 BlackHat)；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD0000045jPP00T0gxM.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD0000045jPP00T0gxM.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD0000045jPP00T0gxM.jpg">
        
    </a></p>
<p>此函数使用两个未公开函数获取 ntdll 的导出表，并通过自定义 ror 算法计算 apiHash(ntdll 运行时模拟函数)，如果命中任意 3 个 Mpclient 函数 hash 则返回错误码 0xC0000462，再通过上层函数判断退出进程；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000000NnKsd1Nuagg.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000000NnKsd1Nuagg.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000000NnKsd1Nuagg.jpg">
        
    </a></p>
<p>分别调用 Windows 内核函数 NtIsProcessInJob 和 NtCompressKey 传入无效句柄，判断是否会返回虚拟模块的预定值，返回预期值则退出进程；<a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD00000458EwJ14iZYr.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD00000458EwJ14iZYr.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD00000458EwJ14iZYr.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001wzzUo3RwW5l.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001wzzUo3RwW5l.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001wzzUo3RwW5l.jpg">
        
    </a></p>
<h3 id="5防御绕过" class="headerLink">
    <a href="#5%e9%98%b2%e5%be%a1%e7%bb%95%e8%bf%87" class="header-mark"></a>5、防御绕过</h3><p>传入无效标识符，尝试动态加载 COM 类对象，判断返回值 CLASS_E_CLASSNOTABAILABLE 是否符合预期；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000002d8T873UW9nP.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000002d8T873UW9nP.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000002d8T873UW9nP.jpg">
        
    </a></p>
<p>在堆分配一块较大的内存空间，尝试是否可以成功，通过这种方式验证系统环境；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD0000008xQcM169FsF.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD0000008xQcM169FsF.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD0000008xQcM169FsF.jpg">
        
    </a></p>
<p>调用 VirtualAllocExNuma 函数申请物理内存，此函数的运行环境要求存在多个物理 CPU；判断 SxIn.dll 模块是否被当前进程加载(360 沙箱的分析 dll) ；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001VWD6p344YZJ.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001VWD6p344YZJ.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001VWD6p344YZJ.jpg">
        
    </a></p>
<p>获取 SYSTEM_INFO 结构体，该结构体包含系统的硬件信息 ，判断处理器数量；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001Xmx7h1xAVMJ.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001Xmx7h1xAVMJ.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001Xmx7h1xAVMJ.jpg">
        
    </a></p>
<p>获取当前主机名，通过主机名字符创建互斥体对象，判断是否存在；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000002sFGOk4fqZJd.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000002sFGOk4fqZJd.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000002sFGOk4fqZJd.jpg">
        
    </a></p>
<p>获取令牌信息，判断进程是否能提升权限，尝试 runas 以管理员身份启动，进入死循环(用户未通过会无限弹窗)</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000002yQdCe0tnMuA.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000002yQdCe0tnMuA.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000002yQdCe0tnMuA.jpg">
        
    </a></p>
<p>判断 c:\\xxxx.ini 文件是否存在，此文件默认由 Gh0st 后门创建；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000003J7T413FP2HI.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000003J7T413FP2HI.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000003J7T413FP2HI.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000003x9ZOl4EeI2D.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000003x9ZOl4EeI2D.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000003x9ZOl4EeI2D.jpg">
        
    </a></p>
<p>通过 GetTickCount64 函数来测量 Sleep 调用前后的时间差，判断环境是否加速，__rdtsc()函数同理；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000003oUe9u09tcJg.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000003oUe9u09tcJg.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000003oUe9u09tcJg.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001gIDA11hQR8H.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001gIDA11hQR8H.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001gIDA11hQR8H.jpg">
        
    </a></p>
<h3 id="6防御削弱" class="headerLink">
    <a href="#6%e9%98%b2%e5%be%a1%e5%89%8a%e5%bc%b1" class="header-mark"></a>6、防御削弱</h3><p>通过扫描进程列表、服务进程、检索窗口类综合判断 360 杀软是否存在，综合来看攻击者更倾向于个人电脑；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000004LvbrF4FG5Uk.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000004LvbrF4FG5Uk.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000004LvbrF4FG5Uk.jpg">
        
    </a></p>
<p>通过 API 发送线程消息、控制信号尝试关闭 360 杀软，若失败跳转到后续代码下载 BYOVD 驱动模块结束杀软；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001tEE8q17znu6.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001tEE8q17znu6.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001tEE8q17znu6.jpg">
        
    </a></p>
<p>检测 WindowsDefender 防病毒相关进程服务是否存在;</p>
<p>执行 powershell 命令添加 C:\ProgramData 和 C:\User\Public 目录到扫描排除项(后门存放路径)，</p>
<p>在 8 月的版本中会新增 Program Files (x86)目录；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD0000037VnfP37DKy5.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD0000037VnfP37DKy5.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD0000037VnfP37DKy5.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD0000021fqFH2QmPQt.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD0000021fqFH2QmPQt.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD0000021fqFH2QmPQt.jpg">
        
    </a></p>
<p>攻击者整体使用凯撒密码对字符串解密，此算法比较简单，使用固定 key 进行逐字节移位；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000002S7LaS1mH84r.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000002S7LaS1mH84r.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000002S7LaS1mH84r.jpg">
        
    </a></p>
<p>此处解密完成后得到存储桶地址；根据地址表下载一组后门文件，下载完成后根据偏移标识填入随机值，使得下载文件没有固定 hash(在以往的样本中，银狐会通过多种方式实现此功能)；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000002JOsnv13etSq.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000002JOsnv13etSq.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000002JOsnv13etSq.jpg">
        
    </a></p>
<p>下载后的文件会随机存储在 C:\Users\Public 目录，并在下层创建随机字符目录；在某些版本，会另外下载一组后门隐藏在 C:\ProgramData 目录中；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001E14BM2ffTCo.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001E14BM2ffTCo.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001E14BM2ffTCo.jpg">
        
    </a></p>
<p>下载 BYOVD 驱动模块，当进程权限不足时跳过此部分；payload 下载完成后以内存 dll 形式解压，并获取导出函数指针，再使用 RPC 管道构建计划任务配置并调用 NdrClientCall3 函数创建，此任务用于维持 BYOVD 模块；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000000l1w0L4WAsz3.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000000l1w0L4WAsz3.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000000l1w0L4WAsz3.jpg">
        
    </a></p>
<p>此驱动漏洞属于 EDR Killer 类型，可以通过传入特定的控制码 0x22E044 和进程 pid 在内核强制结束对应的进程；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001KRY3s1EwGdg.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001KRY3s1EwGdg.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001KRY3s1EwGdg.jpg">
        
    </a></p>
<p>驱动内部会根据传入控制码触发调用，通过 IOCTL(IO control codes)命令执行结束进程(支持 Win11)；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001fOXbs2oLlIW.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001fOXbs2oLlIW.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001fOXbs2oLlIW.jpg">
        
    </a></p>
<h3 id="7后门远控" class="headerLink">
    <a href="#7%e5%90%8e%e9%97%a8%e8%bf%9c%e6%8e%a7" class="header-mark"></a>7、后门远控</h3><p>后门程序使用一组白加黑配合两个加密的 payload 文件， 这是银狐的惯用手法；dll 使用 VMProtect 保护，运行后使用 RC4 算法对 payload 进行解密，完成后加载 log.src 文件，再次解密得到内存 dll(VMProtect 保护)；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001bfd6f1WXc8W.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001bfd6f1WXc8W.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001bfd6f1WXc8W.jpg">
        
    </a></p>
<p>获取内存 dll 的导出函数 CLRCreateInstance，此函数内部会为后门程序创建持久化任务、禁用 UAC 等功能；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD0000027YBYL0s6ngj.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD0000027YBYL0s6ngj.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD0000027YBYL0s6ngj.jpg">
        
    </a></p>
<p>最后会加载 vcxproj 后缀文件解密，完成后得到 Gh0st 变种后门，上线前会请求 ip 地址表，查看是否更新；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000001cxZYs14R9FP.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000001cxZYs14R9FP.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000001cxZYs14R9FP.jpg">
        
    </a></p>
<p>Gh0st 包含很多功能模块，具体功能此处不详细介绍了，后门还包含一些固定的 cmd 命令，适合作为检测补充；</p>
<p><a class="lightgallery" href="https://qqq.gtimg.cn/music/photo_new/T053XD000002jF5wp0CE4gs.jpg" title="https://qqq.gtimg.cn/music/photo_new/T053XD000002jF5wp0CE4gs.jpg" data-thumbnail="https://qqq.gtimg.cn/music/photo_new/T053XD000002jF5wp0CE4gs.jpg">
        
    </a></p>
<h2 id="四检测思路分享" class="headerLink">
    <a href="#%e5%9b%9b%e6%a3%80%e6%b5%8b%e6%80%9d%e8%b7%af%e5%88%86%e4%ba%ab" class="header-mark"></a><strong>四、检测思路分享</strong></h2><ol>
<li>
<p><strong>创建 yara 规则</strong></p>
<p>可以通过程序中的加解密函数代码创建 yara 规则，代码结构最好连续且固定；</p>
</li>
<li>
<p><strong>TTPs 检测特征</strong></p>
<p>通过攻击者样本或实际应急过程中发现的 TTPs 作为检测特征；</p>
</li>
<li>
<p><strong>IOC 检测</strong></p>
<p>在威胁情报痛苦金字塔的下三层中，域名相对更有效，也可根据情况选择 hash 检测；</p>
</li>
</ol>
<blockquote>
<p>B736A809E7A0F1603C97D43BBC7D2EA8A9CD080B A672825339ADBB5EEEF8176D161266D4E4A4A625 E49938CB6C4CE0D73DB2B4A32018B1FF71A2D7F0 9CAA4EC93CE1CD40BD5975645A110A4325310A3B D7F41D457C8358AF840B06914D1BC969EF7939D0 48B2090FDCEA7D7C0EB1544EBCDAF911796A7F67</p>
<p>omss.oss-cn-hangzhou.aliyuncs.com</p>
<p>upitem.oss-cn-hangzhou.aliyuncs.com</p>
<p>1o2.oss-cn-beijing.aliyuncs.com</p>
<p>25o.oss-cn-beijing.aliyuncs.com</p>
<p>98o.oss-cn-beijing.aliyuncs.com</p>
<p>vauwjw.net</p>
<p>cinskw.net</p>
<p>hucgiu.net</p>
</blockquote>
<p>（针对样本的具体 yara、TTPs 规则等，后续将会同步到顺丰安全应急响应中心预推出的<strong>成文实验室知识星球</strong>，敬请期待！）</p>]]></description>
</item></channel>
</rss>
