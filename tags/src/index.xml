<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SRC on </title>
    <link>/tags/src/</link>
    <description>Recent content in SRC on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Sep 2024 20:06:21 +0800</lastBuildDate>
    <atom:link href="/tags/src/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>比较有意思的几个漏洞挖掘记录</title>
      <link>/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 02 Sep 2024 20:06:21 +0800</pubDate>
      <guid>/%E6%AF%94%E8%BE%83%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E8%AE%B0%E5%BD%95/</guid>
      <description>转载自： https://forum.butian.net/share/3692&#xA;sql 注入 某条数据，点击详情的数据包，单引号报错&#xA;再加一个正常&#xA;本以为是一次平平无奇的 sql 注入，没想到绕了一天才绕过去，下面放几张测试失败的截图&#xA;首先就是 404，不知道规则是啥样的，下面语句应该是没问题的就会 404,1=1 让语句不通就会 500&#xA;试了下 orcale 的注入方法，又爆 403，这里&amp;rsquo;||55||&amp;lsquo;会返回空数据，&amp;rsquo;||1/0||&amp;lsquo;会爆 500，这里判断语句能想到的都试了，全 403，最奇怪的是只有语句正确才会 403，少写一个 D 就会 500，不知道这什么匹配逻辑，不过试了一些插入空白字符啥的也都不行&#xA;这里我又跑了一遍字典，全 404、500、403，期间尝试结合分块传输、参数污染、垃圾数据、白名单、高并发均未绕过去&#xA;最终经过我的不断测试,插入下面 payload 回显特别慢，最终显示数据量太大，不过 in 这个关键字我理解的不是很透彻，有懂的师傅可以解答下&#xA;1 &amp;#39;OR+1+in+1+and+&amp;#39;a&amp;#39;+in+&amp;#39;a 当 1 in 5 的时候整个结果为 false，返回为空&#xA;直接注下 user 的长度&#xA;1 &amp;#39;OR+1+in+length(user)+and+&amp;#39;a&amp;#39;+in+&amp;#39;a 只有相等时会卡死，很明显为 7 位&#xA;直接用 instr 函数注用户名&#xA;1 2 3 4 5 6 &amp;#39;OR+1+in+instr(user,&amp;#39;u&amp;#39;)+and+&amp;#39;a&amp;#39;+in+&amp;#39;a instr函数代表后面那个字符在前面字符串第一次出现的位置 例如: instr(&amp;#39;user&amp;#39;,&amp;#39;u&amp;#39;)返回1 instr(&amp;#39;user&amp;#39;,&amp;#39;us&amp;#39;)返回1 instr(&amp;#39;user&amp;#39;,&amp;#39;s&amp;#39;)返回2 第一位为 S&#xA;第二位为 H，其他同理&#xA;任意用户名密码重置 玩的某个游戏，手机号换了，申诉成功给我发了邮件，可以看到 id 和 token</description>
    </item>
    <item>
      <title>一次经典教育系统后台漏洞打包</title>
      <link>/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/</link>
      <pubDate>Mon, 02 Sep 2024 18:34:17 +0800</pubDate>
      <guid>/%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%85%B8%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E%E6%89%93%E5%8C%85/</guid>
      <description>转载自： https://forum.butian.net/share/3693&#xA;记:一次经典教育系统后台漏洞打包! 前言: 小编认为像什么什么大学比较显眼的 &amp;ldquo;统一认证登录&amp;rdquo;||&amp;ldquo;学生综合管理&amp;rdquo;,基本上弱口令是不太行,别的漏洞的话好多也都被大佬们打完了或者利用上不太容易(菜鸟的内心崩塌)，对于自己渗透能力的有限，信息收集就尤为重要! 既然主站打不了，就打旁站吧！（基本的方式都是通用的） 这里先分享一下小编自用的谷歌语法：谷歌语法基础的符号： “xxx”: 将要搜索的关键字用引号括起来 (表示完全匹配，即关键词不能分开，顺序也不能变)&#xA;例如：腾讯课堂如果不加“ ”的话，就会针对腾讯和课堂进行拆分，既对腾讯进行搜索也对课堂进行搜索，所以加上“ ”的话就会对腾讯课堂进行绑定，只对腾讯课堂进行搜索&#xA;+：“xxx” +baidu.com&#xA;搜索 xxx 与 baidu.com 相关的内容&#xA;例如：腾讯课堂 +ke.qq.com，那么这里就会显示 ke.qq.com 相关的内容&#xA;-：“xxx” -baidu.com&#xA;搜索结果里面除去 baidu.com 相关的内容&#xA;例如：腾讯课堂 -ke.qq.com，这里再搜索的时候，就会把这个网址屏蔽掉&#xA;谷歌语法的基础使用 在渗透测试的过程中，运用谷歌语法能快速地帮我们找到可能存在漏洞的页面&#xA;谷歌语法常用搜索参数： site： 指定域名，如：site:edu.cn 搜索教育网站&#xA;inurl： 用于搜索包含的 url 关键词的网页，如：inurl:uploads 文件上传，搜索关于公司有关的网址中含有 login 的网页，&#xA;intitle： 搜索网页标题中的关键字，如：&#xA;intitle:“index of /admin” robots.txt&#xA;intitle:“robots.txt”&#xA;intext： 搜索网页正文中的关键字，如：intext:登陆/注册/用户名/密码&#xA;filetype： 按指定文件类型即文件后缀名搜索，如：filetpye:php/asp/jsp&#xA;cache： 已经删除的缓存网页，推荐组合使用&#xA;谷歌语法拓展 查找后台 site:xx.com intext:管理|后台|登陆|用户名|密码|系统|帐号|admin|login|sys|managetem|password|username&#xA;site:xx.com inurl:login|admin|manage|member|admin_login|login_admin|system|login|user&#xA;查找 sql 注入漏洞 inurl:.php?id=23 公司</description>
    </item>
    <item>
      <title>教育行业渗透打点</title>
      <link>/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/</link>
      <pubDate>Sun, 28 Jul 2024 18:23:14 +0800</pubDate>
      <guid>/%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E6%B8%97%E9%80%8F%E6%89%93%E7%82%B9/</guid>
      <description>转载自： https://forum.butian.net/share/2423&#xA;1、OA系统密码找回 找回密码 系统使用说明文档中发现登录账号 600030 密码找回，找回方式选择密保问题 问题选择出生地，密保问题答案填写高校所在地 即可修改密码 修改密码，即可以图文信息&amp;hellip;&#xA;1、OA系统密码找回 找回密码 系统使用说明文档中发现登录账号 600030&#xA;密码找回，找回方式选择密保问题&#xA;问题选择出生地，密保问题答案填写高校所在地&#xA;即可修改密码&#xA;修改密码，即可以图文信息中心的身份登录OA系统&#xA;在文件中找到1400多名学生的敏感信息文件，其中存在手机号、身份证号、学号，可以组合密码本进行统一身份认证系统的爆破登录，默认密码为身份证后六位&#xA;成功登录一部分账号&#xA;登录VPN 进行内网扫描，利用MS17010拿下C段多台主机权限&#xA;钓鱼 利用OA系统的通讯功能，散播木马&#xA;获取多台机器权限&#xA;2、逻辑漏洞修改密码 GitHub密码泄漏 GitHub泄漏学号密码&#xA;但账号已被禁用&#xA;获取学号手机号 存在注册功能的网站注册用户，然后登录&#xA;通过以下接口获得用户ID /User/GetUserListByKeyWord&#xA;可以通过以下接口遍历用户ID，获取任意用户的姓名 手机号 邮箱等敏感信息&#xA;/User/Tip?time61&amp;amp;id=caec35e7-9956-4f68-98bc-e2aee73ebda5&amp;amp;_=1664438691592&#xA;获取多组学号、姓名、手机号&#xA;修改密码 点击同意门户的忘记密码功能，输入上面得到的学号&#xA;输入手机号，点击获取验证码并抓包&#xA;记录回包内容&#xA;1 &amp;#34;datas&amp;#34;:&amp;#34;{\&amp;#34;sign\&amp;#34;:\&amp;#34;407ec6dc275f4766a4525e059a60ca16\&amp;#34;}&amp;#34;,&amp;#34;code&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;message&amp;#34;:&amp;#34;获取成功&amp;#34; 随意输入验证码，点击下一步，并把上面的流量包直接返回&#xA;可以看到页面跳转到了设置密码&#xA;成功更改密码&#xA;79个应用，通过其中一个aspx站SQL注入拿到shell&#xA;3、Github泄漏账号密码 账号密码 1、GitHub搜索&amp;quot;学校域名&amp;quot; &amp;ldquo;password&amp;rdquo; 发现邮箱账号密码&#xA;2、登录邮箱发现手机号身份证号&#xA;统一门户 3、手机号加邮箱密码直接登录统一门户&#xA;泛微OA 跳转到泛微OA,文件上传GetShell&#xA;4、向日葵密码读取 heapdump文件泄漏 直接下载heapdump文件&#xA;读取到mssql账号密码&#xA;向日葵密码读取 成功连接mssql服务器，执行xp_cmdshell&#xA;C:\Program Files\Oray\SunLogin\SunloginClient\config.ini为向日葵的默认安装配置文件，直接尝试读取&#xA;fastcode将第一位字母去除就为本机识别码，encry_pwd为加密后的本机验证码&#xA;可以使用GitHub解密项目https://github.com/wafinfo/Sunflower_get_Password进行解密。&#xA;解密后成功连接目标主机服务器</description>
    </item>
  </channel>
</rss>
