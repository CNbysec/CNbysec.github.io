<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Waf on </title>
    <link>/tags/waf/</link>
    <description>Recent content in Waf on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 Dec 2020 21:18:35 +0800</lastBuildDate>
    <atom:link href="/tags/waf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>绕waf系列之绕安全狗</title>
      <link>/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/</link>
      <pubDate>Tue, 15 Dec 2020 21:18:35 +0800</pubDate>
      <guid>/%E7%BB%95waf%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BB%95%E5%AE%89%E5%85%A8%E7%8B%97/</guid>
      <description>转载自： 网络&#xA;攻击的特定: 攻击二象性:已知攻击和未知攻击&#xA;目前市面主流的WAF产品: 云WAF 阿里云盾 腾讯网站管家 创宇盾 ClodeFlare等 软件产品类 安全狗 云锁 360主机卫士 ModSecurity 硬件类型设备: 启明星辰 绿盟 天融信 飞塔等 硬件waf缺陷:对HTTP协议的兼容性不强,对异常报文会产生bug,导致绕过&#xA;WAF的核心原理: 运用黑白思想 特征匹配,漏洞签名:特定特征的漏洞,比如stract2漏洞 对匹配结果进行响应(拦截,记录) WAF的几种部署模式: 基于DNS解析 修改DNS,让域名解析到反向代理服务器,所有流量经过反向代理进行检测,检测无问题之后再转发给后端的web服务器&#xA;串联模式 一般指的是反向代理模式,透明代理模式.反向代理模式会改变原有的网络拓扑,真实客户端ip会以HTTP header传递给后端web server.透明代理模式可以在不改变原有网络拓扑结构的情况下直接部署. 旁路模式 利用流量镜像技术,将业务流量分流给WAF产品,这种部署模式的优点是不会影响业务稳定性,所以WAF会投入更多的性能在检出率上面.但是缺点也很明显,不借助其他手段无法对检测出的攻击行为进行阻断. 软件嵌入中间件+检测引擎模式 在使用nginx作为反向代理的业务中,WAF提高nginx模块嵌入原有nginx,将请求转发给检测引擎,可以做到在不改动原有的网络拓扑的情况下完成检测任务 WAF为什么会被绕过: 鱼(安全)和熊掌(业务性能)不能兼得,waf需要满足基本业务需求,所以一般不设置白名单之类的过于苛刻的操作 WAF为了考虑通用性的问题,无法100%覆盖某些语言,中间件,数据库等特性 硬件WAF自身往往存在漏洞 架构:waf部署模式 规则缺陷/特性 协议:指HTTP0.9协议:TCP长连接 WAF绕过实战—-绕过安全狗进行注入 所谓的bypass waf实际上是去寻找位于waf设备之后处理应用层数据包的硬件/软件的特性,利用特性构造waf不能命中,但是在应用程序能够执行成功的payload,绕过防护&#xA;实验环境: 环境:安全狗Apache最新版 本地测试代码(PHP):&#xA;1 2 3 4 5 6 7 8 9 10 11 $id = $_GET[&amp;#39;id&amp;#39;]; $con = mysql_connect(&amp;#34;localhost&amp;#34;,&amp;#34;root&amp;#34;,&amp;#34;root&amp;#34;); if (!$con){die(&amp;#39;Could not connect: &amp;#39; .</description>
    </item>
  </channel>
</rss>
