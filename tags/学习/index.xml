<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>学习 - 标签 - bysec</title>
        <link>https://www.bysec.cn/tags/%E5%AD%A6%E4%B9%A0/</link>
        <description>学习 - 标签 - bysec</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>bysec@qq.com (bysec)</managingEditor>
            <webMaster>bysec@qq.com (bysec)</webMaster><lastBuildDate>Sun, 28 Jul 2024 18:22:32 &#43;0800</lastBuildDate><atom:link href="https://www.bysec.cn/tags/%E5%AD%A6%E4%B9%A0/" rel="self" type="application/rss+xml" /><item>
    <title>支付类漏洞挖掘技巧总结</title>
    <link>https://www.bysec.cn/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sun, 28 Jul 2024 18:22:32 &#43;0800</pubDate><author>
        <name>bysec</name>
    </author><guid>https://www.bysec.cn/%E6%94%AF%E4%BB%98%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言：</h2><p>支付类逻辑漏洞在漏洞挖掘中是常常出现的问题之一。此类漏洞挖掘思路多，奖励高，是炙手可热的漏洞。此篇文章主要围绕挖掘支付逻辑漏洞时的一些思路分享。</p>
<h2 id="支付逻辑漏洞成因" class="headerLink">
    <a href="#%e6%94%af%e4%bb%98%e9%80%bb%e8%be%91%e6%bc%8f%e6%b4%9e%e6%88%90%e5%9b%a0" class="header-mark"></a>支付逻辑漏洞成因：</h2><p>支付漏洞可能由以下原因造成：</p>
<ol>
<li>前端验证不充分：在前端页面上，没有进行足够的验证和限制，使得用户可以通过修改页面元素或发送自定义请求来篡改支付金额、支付类型、支付状态等。</li>
<li>客户端数据不可信：客户端（如移动应用）在进行支付时，没有对传输的数据进行完整性验证和加密，导致恶意用户可以直接修改数据包中的支付金额、订单号等与订单有关的参数。</li>
<li>服务器端验证不严格：支付请求在到达服务器端时，没有进行足够的验证和校验，使得攻击者能够更改支付相关参数并绕过服务器端的验证机制。</li>
<li>不安全的存储和传输：支付金额数据在存储或传输过程中未经适当的加密保护，导致黑客可以窃取或篡改数据。</li>
</ol>
<h2 id="支付逻辑漏洞挖掘技巧" class="headerLink">
    <a href="#%e6%94%af%e4%bb%98%e9%80%bb%e8%be%91%e6%bc%8f%e6%b4%9e%e6%8c%96%e6%8e%98%e6%8a%80%e5%b7%a7" class="header-mark"></a>支付逻辑漏洞挖掘技巧：</h2><p>在实际漏洞挖掘中，一般最先尝试的就是更改数据包发包内容，可以直接修改支付金额、更改支付状态、更改支付类型、更改提交订单支付的时候其中的订单信息等等，当然也会有一些新奇的功能点可以测试。这些在测试中会遇到的操作可以分为以下几类：</p>
<h4 id="一更改支付金额" class="headerLink">
    <a href="#%e4%b8%80%e6%9b%b4%e6%94%b9%e6%94%af%e4%bb%98%e9%87%91%e9%a2%9d" class="header-mark"></a>一、更改支付金额</h4><p>在支付流程中，可以修改支付价格的步骤有很多，包括订购、确认信息、付款等。在涉及到价格的步骤中都可以尝试修改，如果网站在某一环节存在逻辑上的漏洞，就可以利用该漏洞对支付价格进行修改。可以直接修改提交订单中的价格字段，一般可尝试0.01，1.00，1等</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f3574934b2709537f1827cfb7dd40ab1ea22aa6595a14.jpg" title="image-20240110144659185" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f3574934b2709537f1827cfb7dd40ab1ea22aa6595a14.jpg">
        
    </a></p>
<h4 id="二更改支付状态" class="headerLink">
    <a href="#%e4%ba%8c%e6%9b%b4%e6%94%b9%e6%94%af%e4%bb%98%e7%8a%b6%e6%80%81" class="header-mark"></a>二、更改支付状态</h4><p>在测试中有的时候订单得支付状态是由用户提交订单时的某个数据包参数决定的，服务端通过支付状态判断订单支付与否，这时我们可以尝试找到这个参数（可以通过正常支付订单的数据包进行对比），对支付状态进行修改。或者还有一种情况是通过检查订单是否支付，这个时候可以通过抓取已支付的订单数据包将其中的订单编号改为未支付的编号，实现绕过。</p>
<p>1、直接修改为已支付状态</p>
<p>2、修改未支付的订单号为已支付订单号</p>
<h4 id="三修改支付类型" class="headerLink">
    <a href="#%e4%b8%89%e4%bf%ae%e6%94%b9%e6%94%af%e4%bb%98%e7%b1%bb%e5%9e%8b" class="header-mark"></a>三、修改支付类型</h4><p>通常在提交订单付款时，这里的type一般是对支付方式的判断，可能会存在开发人员测试的时候遗留的无需支付的type值，根据支付方式判断支付与否。可以通过fuzz特定值去实现绕过。比如比较常见的值0（这里需要结合实际进行测试不同的处理方式type值不同），可以实现不需要付款订单就会自动生成。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f8945932b8f23aef9c041ae46ed705411e63daeb869fc.jpg" title="image-20240109155239418" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f8945932b8f23aef9c041ae46ed705411e63daeb869fc.jpg">
        
    </a></p>
<h4 id="四更改订单信息" class="headerLink">
    <a href="#%e5%9b%9b%e6%9b%b4%e6%94%b9%e8%ae%a2%e5%8d%95%e4%bf%a1%e6%81%af" class="header-mark"></a>四、更改订单信息</h4><p>服务端只检查支付是否完成，并没有确认订单金额与银行支付金额是否相同，过分信任客户端提交的数据。此时可以通过替换支付订单号、更换商品id的方式，来完成花少钱买更贵的东西。同时生成两个订单号，一个贵的一个便宜，首先支付便宜的，银行往回返回的时候，替换订单号，然后就可以完成两个订单的同时支付。</p>
<p>常见位置在生成订单、生成支付链接等。</p>
<p>1、修改商品编号</p>
<p>直接在生成的订单中替换商品编号。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f87753788ed288f74f10e348d434695a4fdff6371921b.jpg" title="image-20240110101427801" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f87753788ed288f74f10e348d434695a4fdff6371921b.jpg">
        
    </a></p>
<p>2、修改订单号</p>
<p>将金额不同的订单进行替换，可以支付一个金额较少的订单，然后将订单号修改为金额较大的订单，少付实际金额。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f1269092cb6d7051c8328597a394b762ac701acf79516.jpg" title="image-20240110103259992" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f1269092cb6d7051c8328597a394b762ac701acf79516.jpg">
        
    </a></p>
<p>3、越权使用他人优惠券、越权使用他人积分等</p>
<h4 id="五更改数量实现优惠支付" class="headerLink">
    <a href="#%e4%ba%94%e6%9b%b4%e6%94%b9%e6%95%b0%e9%87%8f%e5%ae%9e%e7%8e%b0%e4%bc%98%e6%83%a0%e6%94%af%e4%bb%98" class="header-mark"></a>五、更改数量实现优惠支付</h4><p>支付金额是由购买数量乘以商品单价决定的，这时我们在数据包中修改购买数量，将其修改为负数或者小数，如果站点后台对此没有进行过滤，就有可能存在支付漏洞。</p>
<p>1、将正常的数量值修改至最小值0.01，可以实现低价购买。比如：原价300修改修量为0.01后实付金额变为3。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f854767372d569d88ea1b9229694af14db7b2bfc4fe91.jpg" title="image-20240109160656541" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f854767372d569d88ea1b9229694af14db7b2bfc4fe91.jpg">
        
    </a></p>
<p>2、未对负数做检验的还可以将数量改为负数。（这里需要注意，因为后端大部分会校验不允许实付金额小于0或者0.01等，所以有的时候要想实现订单成功生成需要结合实际修改价格）</p>
<p>生成订单时有参数表示商品数量，修改为-1</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f877676e7a3b21b94567d09d0775f8ff299fcee360481.jpg" title="image-20240110114704324" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f877676e7a3b21b94567d09d0775f8ff299fcee360481.jpg">
        
    </a></p>
<p>修改数量为-1后会发现，此时金额为负数。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f41642026e77e358c0be29d427ef2d4fe9344144b7df5.jpg" title="image-20240110114800810" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f41642026e77e358c0be29d427ef2d4fe9344144b7df5.jpg">
        
    </a></p>
<p>在提交订单支付的时候，为保证支付成功需要修改金额。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f4865593451df8607a8a168c3156aa3217a7ba6f2ff04.jpg" title="image-20240110115204600" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f4865593451df8607a8a168c3156aa3217a7ba6f2ff04.jpg">
        
    </a></p>
<p>3、对数量没有做负数校验的时候也可以巧用负数抵消实现0元购</p>
<p>在计算价格时，没有对负数进行验证，通过修改某个商品数量为-1实现与1的抵消实现0元购。</p>
<p>同时购买两件商品，修改两件商品其中价格低的商品的金额为负数，实现价格的抵消，低价购买商品。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f668754bdebe029b91efb8912fdcf4f6ded373335e293.jpg" title="image-20240110154805679" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f668754bdebe029b91efb8912fdcf4f6ded373335e293.jpg">
        
    </a></p>
<p>4、手动增加订单中商品相关的多个参数以达到少付多买的目的。</p>
<p>有的时候在提交订单时抓取数据包可以看到只有一套商品的信息，尝试多添加几套同样的参数订单是否会有变化。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f2753175001cbfd29afc6630cafec90ad772e024359c3.jpg" title="image-20240110152818004" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f2753175001cbfd29afc6630cafec90ad772e024359c3.jpg">
        
    </a></p>
<p>尝试在提交订单的时候多添加几个此类参数</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f628227c8dd980d623a6f0b5c5986aeadd3af217fe0b8.jpg" title="image-20240110153021212" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f628227c8dd980d623a6f0b5c5986aeadd3af217fe0b8.jpg">
        
    </a><br>
提交订单实际支付金额未变仍是一个商品的价格，但是实际套餐已经变成了四个。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f584594b46a54c736a47f51a93d8c30a32c89937450af.jpg" title="image-20240110153517777" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f584594b46a54c736a47f51a93d8c30a32c89937450af.jpg">
        
    </a></p>
<h4 id="六重复支付突破限购" class="headerLink">
    <a href="#%e5%85%ad%e9%87%8d%e5%a4%8d%e6%94%af%e4%bb%98%e7%aa%81%e7%a0%b4%e9%99%90%e8%b4%ad" class="header-mark"></a>六、重复支付，突破限购</h4><p>在支付系统中，服务端没有做好相关验证，比如订单状态被错误更新或者未更新，未对订单多重提交进行校验。那么就可以并发订单实现优惠订单多次提交。需要注意的是这里有的时候会根据实际支付订单判断，并发了多个订单也可能只有一个优惠订单可以正常支付。</p>
<p>并发订单，多台设备同时提交优惠订单。</p>
<p>常见于限购，一个账号仅许购买一次等</p>
<p>1、限制一个优惠订单时直接并发生成多个优惠订单</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f9371130d8e1ec7ff621f551c5922822dcd08fa505b00.jpg" title="image-20240110143709606" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f9371130d8e1ec7ff621f551c5922822dcd08fa505b00.jpg">
        
    </a></p>
<p>2、使用多台设备、多个浏览器、多种支付方式（wx、支付宝等）购买优惠订单</p>
<p>常见于购买会员，会员第一个月往往会有优惠价。生成一个优惠订单后不支付，打开多个设备或者虚拟器设备，同时提交生成优惠订单，再分别支付，有的时候会发现会员截至日期顺延，突破限制以优惠价格购买会员。</p>
<p>3、退款处并发。退款的时候可以发起同一订单多次退款，达到多退款的目的。</p>
<h4 id="七优惠券多次使用" class="headerLink">
    <a href="#%e4%b8%83%e4%bc%98%e6%83%a0%e5%88%b8%e5%a4%9a%e6%ac%a1%e4%bd%bf%e7%94%a8" class="header-mark"></a>七、优惠券多次使用</h4><p>常见于涉及优惠券的订单中。可以在提交订单的时候修改发包中优惠券的值尝试使用大额优惠券，或者按照原数据包中优惠券的构造参数手工添加几张优惠券，达到优惠券叠用的目的。有优惠券面值参数的也可以直接修改数据包中优惠券的面值。</p>
<p>1、在一个订单中叠加使用优惠券</p>
<p>2、修改优惠券标识，尝试使用其他商品中的大额优惠券</p>
<p>3、直接修改优惠券的面值。实际金额计算会扣除优惠的部分，此时修改优惠券面值可以实现低价购买。</p>
<h4 id="八遍历隐藏或者下架优惠id获取优惠链接" class="headerLink">
    <a href="#%e5%85%ab%e9%81%8d%e5%8e%86%e9%9a%90%e8%97%8f%e6%88%96%e8%80%85%e4%b8%8b%e6%9e%b6%e4%bc%98%e6%83%a0id%e8%8e%b7%e5%8f%96%e4%bc%98%e6%83%a0%e9%93%be%e6%8e%a5" class="header-mark"></a>八、遍历隐藏或者下架优惠id获取优惠链接</h4><p>漏洞常见位置：会员处、商品处（隐藏商品，已下架商品，开发测试低价商品等）</p>
<p>1、遍历隐藏优惠券</p>
<p>一般会有一些开发时测试的大额优惠券，或者已经过期下架的优惠券，通过遍历可以被使用。</p>
<p>2、遍历商品id从而fuzz到已下架的商品</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f201795a3e30d18032dd11cc87b0edeb8ddb2c1f378be.jpg" title="image-20240109171142727" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f201795a3e30d18032dd11cc87b0edeb8ddb2c1f378be.jpg">
        
    </a></p>
<h4 id="九利用小数点精度四舍五入" class="headerLink">
    <a href="#%e4%b9%9d%e5%88%a9%e7%94%a8%e5%b0%8f%e6%95%b0%e7%82%b9%e7%b2%be%e5%ba%a6%e5%9b%9b%e8%88%8d%e4%ba%94%e5%85%a5" class="header-mark"></a>九、利用小数点精度四舍五入</h4><p>0.019=0.02（比如充值0.019元，第三方支付截取到分也就是0.01元，但是系统四舍五入为0.02）。</p>]]></description>
</item><item>
    <title>任意用户登录漏洞挖掘思路</title>
    <link>https://www.bysec.cn/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/</link>
    <pubDate>Sun, 28 Jul 2024 18:17:14 &#43;0800</pubDate><author>
        <name>bysec</name>
    </author><guid>https://www.bysec.cn/%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%80%9D%E8%B7%AF/</guid>
    <description><![CDATA[<h2 id="任意用户登录漏洞挖掘思路" class="headerLink">
    <a href="#%e4%bb%bb%e6%84%8f%e7%94%a8%e6%88%b7%e7%99%bb%e5%bd%95%e6%bc%8f%e6%b4%9e%e6%8c%96%e6%8e%98%e6%80%9d%e8%b7%af" class="header-mark"></a>任意用户登录漏洞挖掘思路</h2><h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>任意用户登录漏洞以利用漏洞利用难度低、危害高、奖金高已经成为src/众测漏洞挖掘中的香饽饽，本文将分享一下众测/src中任意用户登录漏洞的挖掘思路。</p>
<h2 id="1手机验证码问题导致的任意用户登录" class="headerLink">
    <a href="#1%e6%89%8b%e6%9c%ba%e9%aa%8c%e8%af%81%e7%a0%81%e9%97%ae%e9%a2%98%e5%af%bc%e8%87%b4%e7%9a%84%e4%bb%bb%e6%84%8f%e7%94%a8%e6%88%b7%e7%99%bb%e5%bd%95" class="header-mark"></a>1.手机验证码问题导致的任意用户登录</h2><h3 id="11-验证码爆破" class="headerLink">
    <a href="#11-%e9%aa%8c%e8%af%81%e7%a0%81%e7%88%86%e7%a0%b4" class="header-mark"></a>1.1 验证码爆破</h3><p>当登录流程使用手机验证码登录，没有图片验证码/图片验证码可重用/图片验证码简单可识别（可以使用captcha-killer-modified插件）且后端没有限制手机验证码验证错误次数时，可以尝试爆破手机验证码登录其他用户。</p>
<p>4位验证码的爆破老生常谈不再赘述；随着厂商们服务器性能的提高，服务器的rps的上升也使得6位验证码的爆破越来越快，可以使用如下方法爆破（！！！需留意服务器的rps以及测试厂商的注意事项，rps低的老系统或者厂商禁止批量爆破的项目谨慎使用6位验证码的爆破！！！）：</p>
<p>使用burpsuite的Turbo Intruder插件，编写如下脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="nx">import</span> <span class="nx">re</span> <span class="nx">def</span> <span class="nx">queueRequests</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">wordlists</span><span class="p">)</span><span class="o">:</span> <span class="nx">engine</span> <span class="o">=</span> <span class="nx">RequestEngine</span><span class="p">(</span><span class="nx">endpoint</span><span class="o">=</span><span class="nx">target</span><span class="o">.</span><span class="nx">endpoint</span><span class="p">,</span> <span class="nx">concurrentConnections</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="nx">requestsPerConnection</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="nx">pipeline</span><span class="o">=</span><span class="k">True</span> <span class="p">)</span> <span class="k">for</span> <span class="nx">i</span> <span class="nx">in</span> <span class="nx">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">)</span><span class="o">:</span> <span class="c1">#生成六位验证码字典 number = &#34;{:06d}&#34;.format(i) engine.queue(target.req, number.rstrip()) def handleResponse(req, interesting): # currently available attributes are req.status, req.wordcount, req.length and req.response if req.status &lt;404: &#39;&#39;&#39;res = re.findall(&#39;Msg&#34;:&#34;(.*?)&#34;&#39;,req.response)[0] if len(res)&gt;18:&#39;&#39;&#39; #六位数的验证码爆破结果展示列太多，可根据实际情况自行筛选展示 table.add(req)
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>成功案例如下：</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f569252ea38f1a70e1f19836eea8bf50341ab80a2127e.jpg" title="image-20231026152744211" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f569252ea38f1a70e1f19836eea8bf50341ab80a2127e.jpg">
        
    </a></p>
<h3 id="12-验证码明文返回" class="headerLink">
    <a href="#12-%e9%aa%8c%e8%af%81%e7%a0%81%e6%98%8e%e6%96%87%e8%bf%94%e5%9b%9e" class="header-mark"></a>1.2 验证码明文返回</h3><p>获取手机验证码时，验证码直接在返回包里</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f29427169da964cc10157fa9ec98efa75a51f93ff59f0.jpg" title="image-20231026153621371" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f29427169da964cc10157fa9ec98efa75a51f93ff59f0.jpg">
        
    </a></p>
<h3 id="13-存在万能验证码" class="headerLink">
    <a href="#13-%e5%ad%98%e5%9c%a8%e4%b8%87%e8%83%bd%e9%aa%8c%e8%af%81%e7%a0%81" class="header-mark"></a>1.3 存在万能验证码</h3><p>一般是测试为了功能测试方便，设置了诸如000000，123456（六位验证码爆破能发现）之类的万能验证码，项目上线时忘记下掉，导致任意用户登录</p>
<h3 id="14-验证码未绑定用户" class="headerLink">
    <a href="#14-%e9%aa%8c%e8%af%81%e7%a0%81%e6%9c%aa%e7%bb%91%e5%ae%9a%e7%94%a8%e6%88%b7" class="header-mark"></a>1.4 验证码未绑定用户</h3><p>a.后端仅验证了验证码是否正确，没有验证验证码与获取手机号的对应关系，导致可以先输入自己的手机号A获取验证码，再输入他人手机号B获取验证码后，填写自己手机号A接收到的验证码，达到登录手机号B的目的</p>
<p>b.后端仅验证码了手机号与验证码是否一致，并未校验手机号是否为号主本人的,导致可以使用自己的手机号+验证码绕过。常见于用户绑定的功能处。举个栗子：</p>
<p>某系统输入商户号与手机号可绑定到该用户</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f6452944ddfaec6db93aa224f926873e2692cfaa51ddc.jpg" title="image-20231026155939201" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f6452944ddfaec6db93aa224f926873e2692cfaa51ddc.jpg">
        
    </a></p>
<p>通过用户注册的功能处，输入自己的手机号获取验证码</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f1467599b8a33c200cbdfc0cd5c248398f5a05fc7756e.jpg" title="image-20231026160036332" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f1467599b8a33c200cbdfc0cd5c248398f5a05fc7756e.jpg">
        
    </a></p>
<p>返回绑定功能处，输入任意验证码抓包，将手机号与验证码字段改为自己的手机号+验证码</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f8121562fa557770f53d99e14151945ea13a41f59f673.jpg" title="image-20231026160250988" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f8121562fa557770f53d99e14151945ea13a41f59f673.jpg">
        
    </a></p>
<p>成功登录他人账号</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f71223424542bfb8b033dd4a6de695a0454da99fe0dda.jpg" title="image-20231026160327497" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f71223424542bfb8b033dd4a6de695a0454da99fe0dda.jpg">
        
    </a></p>
<h3 id="15-获取验证码的手机号字段可双写" class="headerLink">
    <a href="#15-%e8%8e%b7%e5%8f%96%e9%aa%8c%e8%af%81%e7%a0%81%e7%9a%84%e6%89%8b%e6%9c%ba%e5%8f%b7%e5%ad%97%e6%ae%b5%e5%8f%af%e5%8f%8c%e5%86%99" class="header-mark"></a>1.5 获取验证码的手机号字段可双写</h3><p>输入手机号获取验证码时抓包，双写手机号字段，使得两个手机号获取到同一个验证码，便可以登录其他用户</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f957197d0bac9fd9865630e16883ec371423407a0c1ee.jpg" title="image-20231026160708565" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f957197d0bac9fd9865630e16883ec371423407a0c1ee.jpg">
        
    </a></p>
<p>输入自己的手机号抓包，将手机字段后面加一个逗号或者分号后再加一个手机号，或者双写手机号字段phone=13333333333&amp;phone=18888888888，当两个手机号均收到一个验证码时大概率漏洞存在。使用自己的手机号便可以任意登录其他手机号</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f1298410bdcead04991a6070a151953c584540f0068d1.jpg" title="image-20231026161544754" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f1298410bdcead04991a6070a151953c584540f0068d1.jpg">
        
    </a></p>
<h3 id="16-验证码为空任意验证码可成功验证" class="headerLink">
    <a href="#16-%e9%aa%8c%e8%af%81%e7%a0%81%e4%b8%ba%e7%a9%ba%e4%bb%bb%e6%84%8f%e9%aa%8c%e8%af%81%e7%a0%81%e5%8f%af%e6%88%90%e5%8a%9f%e9%aa%8c%e8%af%81" class="header-mark"></a>1.6 验证码为空/任意验证码可成功验证</h3><p>比较奇葩的例子，验证码为空时，手机号正确则成功登录（账号密码登录体系也发现过这种情况，空密码的情况下账号存在即登录）</p>
<h2 id="2凭证安全问题导致的任意用户登录" class="headerLink">
    <a href="#2%e5%87%ad%e8%af%81%e5%ae%89%e5%85%a8%e9%97%ae%e9%a2%98%e5%af%bc%e8%87%b4%e7%9a%84%e4%bb%bb%e6%84%8f%e7%94%a8%e6%88%b7%e7%99%bb%e5%bd%95" class="header-mark"></a>2.凭证安全问题导致的任意用户登录</h2><h3 id="21-凭证泄露" class="headerLink">
    <a href="#21-%e5%87%ad%e8%af%81%e6%b3%84%e9%9c%b2" class="header-mark"></a>2.1 凭证泄露</h3><h4 id="211-页面缓存被搜索引擎抓取" class="headerLink">
    <a href="#211-%e9%a1%b5%e9%9d%a2%e7%bc%93%e5%ad%98%e8%a2%ab%e6%90%9c%e7%b4%a2%e5%bc%95%e6%93%8e%e6%8a%93%e5%8f%96" class="header-mark"></a>2.1.1 页面缓存被搜索引擎抓取</h4><p>搜索引擎搜索该域名，发现有登录后的页面被抓取，直接访问登录目标账户</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f4091122410659bb3807c58c04a8a0e16998417e9b325.jpg" title="image-20231026111018248" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f4091122410659bb3807c58c04a8a0e16998417e9b325.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f9782237ebec4441168fe52169f957b9e5370a0a1b18c.jpg" title="image-20231026111129791" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f9782237ebec4441168fe52169f957b9e5370a0a1b18c.jpg">
        
    </a></p>
<h4 id="212-httptracedruid等组件中的凭证泄露" class="headerLink">
    <a href="#212-httptracedruid%e7%ad%89%e7%bb%84%e4%bb%b6%e4%b8%ad%e7%9a%84%e5%87%ad%e8%af%81%e6%b3%84%e9%9c%b2" class="header-mark"></a>2.1.2 httptrace/druid等组件中的凭证泄露</h4><h5 id="httptrace" class="headerLink">
    <a href="#httptrace" class="header-mark"></a>httptrace</h5><p>spring的httptrace端点往往会记录用户的会话信息，若发现spring未授权访问且存在类似端点可以访问的话，可尝试获取用户凭证进行登录</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f3018070bc7fb934f1e5f06cf5d0ad0f6b08542225789.jpg" title="image-20231026163705868" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f3018070bc7fb934f1e5f06cf5d0ad0f6b08542225789.jpg">
        
    </a></p>
<h5 id="durid" class="headerLink">
    <a href="#durid" class="header-mark"></a>durid</h5><p>druid的session监控若发现有效的会话信息时，可以通过此登录任意用户，将druid的未授权中危漏洞提升至高危</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f449949895ad92d513e2154772ee8676047ce70a1f4a0.jpg" title="image-20231026113057179" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f449949895ad92d513e2154772ee8676047ce70a1f4a0.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f269203959c6bc73dbd71560c963f123e4727b378ffc1.jpg" title="image-20231026113234298" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f269203959c6bc73dbd71560c963f123e4727b378ffc1.jpg">
        
    </a></p>
<h4 id="212-sessionkey泄露" class="headerLink">
    <a href="#212-sessionkey%e6%b3%84%e9%9c%b2" class="header-mark"></a>2.1.2 sessionkey泄露</h4><p>微信小程序官方提供了一套微信快捷登录的登录逻辑，用户授权手机号快捷登录时，会将本地的手机号使用sessionkey和iv进行aes加密，后端解密后返回该手机号的登录凭证。当sessionkey发生泄露时，攻击者便可以伪造手机号登录任意手机号</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f435754b0adfe30b25f1261d93d1ac2d276c4ef2c224b.jpg" title="image-20231026164613313" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f435754b0adfe30b25f1261d93d1ac2d276c4ef2c224b.jpg">
        
    </a></p>
<p>修改任意手机号，利用sessionkey和iv重新加密数据</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f282873664a2d4f77cf7f0fb934e1272844ac9234329e.jpg" title="image-20231026164903153" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f282873664a2d4f77cf7f0fb934e1272844ac9234329e.jpg">
        
    </a></p>
<p>成功登录他人账号</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f21869586dca7202d7ad49fdf2fd62983bb26c7a25afd.jpg" title="image-20231026165003227" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f21869586dca7202d7ad49fdf2fd62983bb26c7a25afd.jpg">
        
    </a></p>
<h4 id="213-其他接口中的信息泄露" class="headerLink">
    <a href="#213-%e5%85%b6%e4%bb%96%e6%8e%a5%e5%8f%a3%e4%b8%ad%e7%9a%84%e4%bf%a1%e6%81%af%e6%b3%84%e9%9c%b2" class="header-mark"></a>2.1.3 其他接口中的信息泄露</h4><p>这个一般发现于js或者api-docs中的某些特殊接口，例如getToken之类的，有没有取决于开发有没有开发类似的功能接口</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f94347450d57e69d7429bfd2cb5c5565c2b4f3d75c3e6.jpg" title="image-20231026165405684" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f94347450d57e69d7429bfd2cb5c5565c2b4f3d75c3e6.jpg">
        
    </a></p>
<h3 id="22-凭证可伪造" class="headerLink">
    <a href="#22-%e5%87%ad%e8%af%81%e5%8f%af%e4%bc%aa%e9%80%a0" class="header-mark"></a>2.2 凭证可伪造</h3><h4 id="221-jwt未验参弱密钥" class="headerLink">
    <a href="#221-jwt%e6%9c%aa%e9%aa%8c%e5%8f%82%e5%bc%b1%e5%af%86%e9%92%a5" class="header-mark"></a>2.2.1 jwt未验参/弱密钥</h4><p>系统使用jwt作为认证字段，且其中关键用户信息字段可以遍历时，若未验参或者使用弱密钥时，便可以将用户信息字段进行更改，删除/爆破弱密钥重新生成签名，到达任意用户登录</p>
<h5 id="jwt未验参" class="headerLink">
    <a href="#jwt%e6%9c%aa%e9%aa%8c%e5%8f%82" class="header-mark"></a>jwt未验参</h5><p>删除签名部分(或者更改头部中的alg为none再删除签名)，访问登录后的接口成功访问，说明jwt未验参()</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f3944195587a7f73d26e1987f25578d5a76f94a3b3207.jpg" title="image-20231026170046925" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f3944195587a7f73d26e1987f25578d5a76f94a3b3207.jpg">
        
    </a></p>
<p>遍历data字段即可登录其他用户（此处的data为用户id）</p>
<h5 id="jwt弱密钥" class="headerLink">
    <a href="#jwt%e5%bc%b1%e5%af%86%e9%92%a5" class="header-mark"></a>jwt弱密钥</h5><p>jwt使用了弱密钥时，爆破到弱密钥后同样修改jwt中的用户信息字段，使用密钥重新生成签名即可获取到其他用户的jwt字段</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f25971001b760f531bbb9b0c11655940e750b31e22060.jpg" title="image-20231026103900241" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f25971001b760f531bbb9b0c11655940e750b31e22060.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f3421878f82ea6d3399fbeb79b5993d541a1689fa306d.jpg" title="image-20231026103943886" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f3421878f82ea6d3399fbeb79b5993d541a1689fa306d.jpg">
        
    </a></p>
<h4 id="222-弱cookie" class="headerLink">
    <a href="#222-%e5%bc%b1cookie" class="header-mark"></a>2.2.2 弱cookie</h4><p>系统使用cookie认证，且cookie字段可伪造</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f343545db5d56506f6e6a71bf07fac703d138dbcfc2a7.jpg" title="image-20231026170524323" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f343545db5d56506f6e6a71bf07fac703d138dbcfc2a7.jpg">
        
    </a></p>
<h3 id="23-凭证过早返回" class="headerLink">
    <a href="#23-%e5%87%ad%e8%af%81%e8%bf%87%e6%97%a9%e8%bf%94%e5%9b%9e" class="header-mark"></a>2.3 凭证过早返回</h3><p>一般正常的登录流程为服务端校验完用户身份后，返回用户凭证，但某些系统由于登录前会有很多的查询用户信息类的功能请求，经常导致在登录验证前就返回了用户凭证。</p>
<p>某金融项目，输入手机号会先去查询手机号是否为已注册用户，是的话进入用户信息查询的逻辑，再跳转登录。在信息查询的阶段过早返回了sessionid,导致任意用户登录</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f800254e5355b68a543e3ee9e1658501b0859a0d32d17.jpg" title="image-20231026171141852" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f800254e5355b68a543e3ee9e1658501b0859a0d32d17.jpg">
        
    </a></p>
<h2 id="3逻辑漏洞导致的任意用户登录" class="headerLink">
    <a href="#3%e9%80%bb%e8%be%91%e6%bc%8f%e6%b4%9e%e5%af%bc%e8%87%b4%e7%9a%84%e4%bb%bb%e6%84%8f%e7%94%a8%e6%88%b7%e7%99%bb%e5%bd%95" class="header-mark"></a>3.逻辑漏洞导致的任意用户登录</h2><h3 id="31-登录完全依赖数据包中的参数且参数可控" class="headerLink">
    <a href="#31-%e7%99%bb%e5%bd%95%e5%ae%8c%e5%85%a8%e4%be%9d%e8%b5%96%e6%95%b0%e6%8d%ae%e5%8c%85%e4%b8%ad%e7%9a%84%e5%8f%82%e6%95%b0%e4%b8%94%e5%8f%82%e6%95%b0%e5%8f%af%e6%8e%a7" class="header-mark"></a>3.1 登录完全依赖数据包中的参数且参数可控</h3><p>最常规的任意用户登录漏洞，常见于两步/多步登录的登录逻辑处</p>
<p>以两步登录为例，登录输入账号密码/手机号验证码/其他的凭证信息后第一个请求校验其正确性后，第二个请求根据后端返回的账号/手机号/用户id等字段去获取用户凭证的登录逻辑。</p>
<p>只要修改第一个请求中的返回包或者修改第二个请求中的字段即可</p>
<h4 id="修改第一个请求的返回包" class="headerLink">
    <a href="#%e4%bf%ae%e6%94%b9%e7%ac%ac%e4%b8%80%e4%b8%aa%e8%af%b7%e6%b1%82%e7%9a%84%e8%bf%94%e5%9b%9e%e5%8c%85" class="header-mark"></a>修改第一个请求的返回包</h4><p>当请求字段加密时，此方法非常便捷</p>
<p>以下为例</p>
<p>分析登录流程为，第一个请求请求微信接口获取用户手机号，返回到一个请求的返回包中</p>
<p>第二个请求获取返回包中的手机号加密发给服务端，返回其登录凭证</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f76774979cb77858123a944c51b566d6ecc4a6459bdd3.jpg" title="image-20231026175959686" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f76774979cb77858123a944c51b566d6ecc4a6459bdd3.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f176433269fbc7fa524a4ec02bd5b970f940e0b0d8cc6.jpg" title="image-20231026180521839" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f176433269fbc7fa524a4ec02bd5b970f940e0b0d8cc6.jpg">
        
    </a></p>
<p>所以此处只需要替换第一个请求包的返回包中的手机号即可</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f177451e5ce45cf31ffd4eb5e0b7892c28fa428acdc03.jpg" title="image-20231026180607177" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f177451e5ce45cf31ffd4eb5e0b7892c28fa428acdc03.jpg">
        
    </a></p>
<h4 id="修改第二个请求的请求包" class="headerLink">
    <a href="#%e4%bf%ae%e6%94%b9%e7%ac%ac%e4%ba%8c%e4%b8%aa%e8%af%b7%e6%b1%82%e7%9a%84%e8%af%b7%e6%b1%82%e5%8c%85" class="header-mark"></a>修改第二个请求的请求包</h4><p>如下登录数据包，直接更改其中手机号即可</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f47908133233caa9edcbe17466a28a602a913d87212a1.jpg" title="image-20231026181117618" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f47908133233caa9edcbe17466a28a602a913d87212a1.jpg">
        
    </a></p>
<h3 id="32-更改登录type" class="headerLink">
    <a href="#32-%e6%9b%b4%e6%94%b9%e7%99%bb%e5%bd%95type" class="header-mark"></a>3.2 更改登录type</h3><p>部分系统有免密登录/快捷登录之类的功能，只要一个账号就能登录，当遇到登录数据包中含有type之类的字段时，可以尝试此方法</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f376579a190ac9b62ccdbedbb53ee6f9fd7aaeabe7d9c.jpg" title="image-20231026183616031" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f376579a190ac9b62ccdbedbb53ee6f9fd7aaeabe7d9c.jpg">
        
    </a></p>
<h3 id="33-账号数据覆盖" class="headerLink">
    <a href="#33-%e8%b4%a6%e5%8f%b7%e6%95%b0%e6%8d%ae%e8%a6%86%e7%9b%96" class="header-mark"></a>3.3 账号数据覆盖</h3><p>常见于用账号信息更新处，例如修改手机号、账户重新绑定功能、修改账号等功能点处</p>
<p>以修改手机号为例，此处修改需要输入新手机号与新手机号的验证码</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f577428b15ded18a8dd0cb84e3fa4875ee4514325a601.jpg" title="image-20231026104342413" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f577428b15ded18a8dd0cb84e3fa4875ee4514325a601.jpg">
        
    </a></p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/butian_public/f9769675e17c3e4dc7fa3d6ab35702169fe922bbb9033.jpg" title="image-20231026104439045" data-thumbnail="https://shs3.b.qianxin.com/butian_public/f9769675e17c3e4dc7fa3d6ab35702169fe922bbb9033.jpg">
        
    </a></p>
<p>修改请求中的oldmobile字段为其他手机号，成功将其他用户的账户数据覆盖到新手机号中，达到任意用户登录</p>]]></description>
</item><item>
    <title>验证码渗透最全总结</title>
    <link>https://www.bysec.cn/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/</link>
    <pubDate>Sun, 28 Jul 2024 17:55:46 &#43;0800</pubDate><author>
        <name>bysec</name>
    </author><guid>https://www.bysec.cn/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[<h2 id="验证码渗透最全总结" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e7%a0%81%e6%b8%97%e9%80%8f%e6%9c%80%e5%85%a8%e6%80%bb%e7%bb%93" class="header-mark"></a>验证码渗透最全总结</h2><p>不少人在碰见验证码的时候，大多数只是看了一眼就过去了，没想到验证码还有啥可测试的。但其实验证码也能在项目中导致<strong>高危</strong>,并且验证码漏洞能在一定情况下造成危害。</p>
<h2 id="验证码总结" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e7%a0%81%e6%80%bb%e7%bb%93" class="header-mark"></a>验证码总结</h2><p>验证码分为两块内容，一块是图形验证码，一块是短信验证码。下面是对这些技巧总结的思维导图。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-07aa8805b4a3ac1f699898097c63b75d100e7c61.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-07aa8805b4a3ac1f699898097c63b75d100e7c61.png">
        
    </a></p>
<h3 id="图形验证码" class="headerLink">
    <a href="#%e5%9b%be%e5%bd%a2%e9%aa%8c%e8%af%81%e7%a0%81" class="header-mark"></a>图形验证码</h3><h4 id="图形验证码长宽可控" class="headerLink">
    <a href="#%e5%9b%be%e5%bd%a2%e9%aa%8c%e8%af%81%e7%a0%81%e9%95%bf%e5%ae%bd%e5%8f%af%e6%8e%a7" class="header-mark"></a>图形验证码长宽可控</h4><p>简单测试方法，就是看到一个登录框，然后新建打开图片链接，在图片链接中就有机会看到两个参数值，一个是 width，一个是 length。这两个参数是计算图片验证码的长宽，如果长宽过高就会过度消耗的是服务器的 CPU 资源。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-f8edf220db2f6f553e493615a6245671be2f3cc8.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-f8edf220db2f6f553e493615a6245671be2f3cc8.png">
        
    </a><br>
当length为比较大的时候，响应时间为2767millis<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-23af811d5dc12caad125af766529881f2fe7a073.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-23af811d5dc12caad125af766529881f2fe7a073.png">
        
    </a><br>
<strong>注意</strong>：该漏洞能造成服务器拒绝服务攻击。有的 SRC 里面注明了，禁止使用 DDOS 攻击，这种漏洞是不收的，如果提交了漏洞，很有可能面临<strong>法律责任</strong>。</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-9f2f1a9fdac9a1537fc050f5b62bfc6516573602.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-9f2f1a9fdac9a1537fc050f5b62bfc6516573602.png">
        
    </a></p>
<h4 id="图形验证码可绕过" class="headerLink">
    <a href="#%e5%9b%be%e5%bd%a2%e9%aa%8c%e8%af%81%e7%a0%81%e5%8f%af%e7%bb%95%e8%bf%87" class="header-mark"></a>图形验证码可绕过</h4><p>有时候开发，会写两套图形验证码流程，一套是在生产运行阶段必须使用正确验证码才能通过服务器校验。另外一套是在测试 SIT 环境下，把验证码设置为只要是 null 或者是空都可以登录验证码置为空，提高开发工作效率。还有的时候，将验证码修改为 true 就好了。这个是因为开发在进行图形验证码判断的时候，只要是验证码收到的是 true 就会通过。具体测试过程已经找不到了，大概写一下吧。</p>
<h4 id="图形验证码不失效" class="headerLink">
    <a href="#%e5%9b%be%e5%bd%a2%e9%aa%8c%e8%af%81%e7%a0%81%e4%b8%8d%e5%a4%b1%e6%95%88" class="header-mark"></a>图形验证码不失效</h4><p>简单易懂，图形验证码没有对应的失效机制。导致图形验证码能被多次利用。图形验证码在使用后未失效，发送短信时抓包，发送到Repeter中进行重放，可以发送成功!</p>
<h4 id="图形验证码可识别" class="headerLink">
    <a href="#%e5%9b%be%e5%bd%a2%e9%aa%8c%e8%af%81%e7%a0%81%e5%8f%af%e8%af%86%e5%88%ab" class="header-mark"></a>图形验证码可识别</h4><p>这个就是开发在制作图形验证码功能的时候，没有将图形验证码加入足够多的噪点，使验证码能够被现有的工具进行识别。一般是项目硬凑数用的，SRC 全部都不收。具体不做解释</p>
<h4 id="图形验证码随机值可控" class="headerLink">
    <a href="#%e5%9b%be%e5%bd%a2%e9%aa%8c%e8%af%81%e7%a0%81%e9%9a%8f%e6%9c%ba%e5%80%bc%e5%8f%af%e6%8e%a7" class="header-mark"></a>图形验证码随机值可控</h4><p>都知道图形验证码是后端随机生成的。那么随机生成的时候，有没有可能是能控制这个随机值？有可能! 生成验证码的随机值被写在了 url 里面<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-e20c13ca97d25e047ade9b3bd983a245cffe43b4.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-e20c13ca97d25e047ade9b3bd983a245cffe43b4.png">
        
    </a></p>
<p>将characters固定为aaaa，可以看到图形验证码为aaaa<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-2aaf0c5c6bd69d7d5452b3bc34f22c22b702cc77.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-2aaf0c5c6bd69d7d5452b3bc34f22c22b702cc77.png">
        
    </a></p>
<h4 id="图形验证码返回到前端" class="headerLink">
    <a href="#%e5%9b%be%e5%bd%a2%e9%aa%8c%e8%af%81%e7%a0%81%e8%bf%94%e5%9b%9e%e5%88%b0%e5%89%8d%e7%ab%af" class="header-mark"></a>图形验证码返回到前端</h4><p>测试过程已经找不到了，口头描述下大致就是登录后会在响应包中返回了下次图形验证码的内容。</p>
<h3 id="短信验证码" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e9%aa%8c%e8%af%81%e7%a0%81" class="header-mark"></a>短信验证码</h3><p>我们已经写完了图形验证码部分，现实情况下短信验证码也是比较多。短信验证码的漏洞技巧要比图形验证码<strong>多很多</strong></p>
<h4 id="短信炸弹纵向" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e7%82%b8%e5%bc%b9%e7%ba%b5%e5%90%91" class="header-mark"></a>短信炸弹纵向</h4><p>在一个限制时间的情况下对一个手机号，发送的短信验证码条数超过发送预期，这种漏洞我们都称为<code>短信炸弹</code>or<code>短信轰炸</code>or<code>短信炸弹纵向</code><br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-9ee1bcaa0a03fc53f87c05e0a5a038a39bcc48bb.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-9ee1bcaa0a03fc53f87c05e0a5a038a39bcc48bb.png">
        
    </a><br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-d3aa32373abf5cf438642122ea553b6f9b1e1925.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-d3aa32373abf5cf438642122ea553b6f9b1e1925.png">
        
    </a><br>
不停点击repeter或者放到intruder里面，就可以实现一个手机号接收到多条短信<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-5b65929eb4576fc9bacc70153d32df2ef028b37a.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-5b65929eb4576fc9bacc70153d32df2ef028b37a.png">
        
    </a></p>
<h4 id="短信炸弹横向" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e7%82%b8%e5%bc%b9%e6%a8%aa%e5%90%91" class="header-mark"></a>短信炸弹横向</h4><p>上面我们提到了在限定时间内，对一个手机号发送超过预期的短信条数是短信轰炸。造成的结果就是浪费短信资源。如果开发把这个漏洞给改了，那么还有没有漏洞？还有？不能给一个人发送短信验证了，那么给其他人发送验证码一样的。<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-7dcfda9d6162e5385a3f94aee05566b7ca188ba3.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-7dcfda9d6162e5385a3f94aee05566b7ca188ba3.png">
        
    </a><br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-49694c38b745d0949ae23a750b711c645018d603.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-49694c38b745d0949ae23a750b711c645018d603.png">
        
    </a><br>
将phone设置成变量，进行遍历<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-1336295b9eb2d85f64ea1c6ec3f2a4513503529d.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-1336295b9eb2d85f64ea1c6ec3f2a4513503529d.png">
        
    </a></p>
<h4 id="短信验证码可爆破" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e9%aa%8c%e8%af%81%e7%a0%81%e5%8f%af%e7%88%86%e7%a0%b4" class="header-mark"></a>短信验证码可爆破</h4><p>我们讲了 2 个发送短信验证码，都知道验证码通常 4 位数或者 6 位数的数字验证码。如果服务器没有限制提交的验证码的次数，那么我们可以爆破这个验证码。并且如果有 4 位验证码被爆破成功的话，在 SRC 里面通常是按照高危处理。</p>
<h4 id="短信验证码可编辑" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e9%aa%8c%e8%af%81%e7%a0%81%e5%8f%af%e7%bc%96%e8%be%91" class="header-mark"></a>短信验证码可编辑</h4><p>我们讲了发送短信验证码以及爆破短信验证码。我们知道短信验证码功能发送的是短信，那么我们就有可能把短信内容给更改。<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-a65ad9daae02cac08992fedca5bb6e768d759359.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-a65ad9daae02cac08992fedca5bb6e768d759359.png">
        
    </a><br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-3dd9859a71ffbf19616b439137a403e573f45f6f.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-3dd9859a71ffbf19616b439137a403e573f45f6f.png">
        
    </a><br>
通过修改transAmt 参数内容，可随意修改短信内容<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-b910d6dc4e0703a3c7825f053ed10fc6211a8129.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-b910d6dc4e0703a3c7825f053ed10fc6211a8129.png">
        
    </a></p>
<h3 id="短信炸弹的绕过技巧" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e7%82%b8%e5%bc%b9%e7%9a%84%e7%bb%95%e8%bf%87%e6%8a%80%e5%b7%a7" class="header-mark"></a>短信炸弹的绕过技巧</h3><p>我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。</p>
<h4 id="短信炸弹的绕过技巧-1--特殊字符" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e7%82%b8%e5%bc%b9%e7%9a%84%e7%bb%95%e8%bf%87%e6%8a%80%e5%b7%a7-1--%e7%89%b9%e6%ae%8a%e5%ad%97%e7%ac%a6" class="header-mark"></a>短信炸弹的绕过技巧 1&ndash;特殊字符</h4><p>通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。</p>
<p>在 mobile=15312341234 的前面，加<code>空格</code>，<code>86</code>，<code>086</code>，<code>0086</code>，<code>+86</code>，<code>0</code>，<code>00</code>，<code>/r,/n</code>,<code>?</code>,<code>#</code>,<code>!</code>,<code>,</code>&hellip;只要想法多就有可能绕过。<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-cdfb9f6773ed4c516bfff1b1b64f429e0c00c0fe.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-cdfb9f6773ed4c516bfff1b1b64f429e0c00c0fe.png">
        
    </a></p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-176b46bb24c9974b759d9af83924bcf1f76799a1.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-176b46bb24c9974b759d9af83924bcf1f76799a1.png">
        
    </a><br>
控制phone参数进行攻击<br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-b0755303a59aa0bf852a2964d3409ef1f5624ccf.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-b0755303a59aa0bf852a2964d3409ef1f5624ccf.png">
        
    </a></p>
<h4 id="短信炸弹的绕过技巧-2--添加-xff" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e7%82%b8%e5%bc%b9%e7%9a%84%e7%bb%95%e8%bf%87%e6%8a%80%e5%b7%a7-2--%e6%b7%bb%e5%8a%a0-xff" class="header-mark"></a>短信炸弹的绕过技巧 2&ndash;添加 XFF</h4><p>在请求包中添加XFF头，有的时候服务器是按照IP地址进行判定的。</p>
<h4 id="短信炸弹的绕过技巧-3--添加多个值" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e7%82%b8%e5%bc%b9%e7%9a%84%e7%bb%95%e8%bf%87%e6%8a%80%e5%b7%a7-3--%e6%b7%bb%e5%8a%a0%e5%a4%9a%e4%b8%aa%e5%80%bc" class="header-mark"></a>短信炸弹的绕过技巧 3&ndash;添加多个值</h4><p>在发送手机短信验证码的时候可以把一个参数赋上多个值。比如 Mobile=18312341234,13612341234&amp;code=1234</p>
<h4 id="短信炸弹的绕过技巧-4--添加多个参数" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e7%82%b8%e5%bc%b9%e7%9a%84%e7%bb%95%e8%bf%87%e6%8a%80%e5%b7%a7-4--%e6%b7%bb%e5%8a%a0%e5%a4%9a%e4%b8%aa%e5%8f%82%e6%95%b0" class="header-mark"></a>短信炸弹的绕过技巧 4&ndash;添加多个参数</h4><p>比如 Mobile=18312341234&amp;Mobile=13612341234</p>
<h4 id="短信炸弹的绕过技巧-5--修改返回包" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e7%82%b8%e5%bc%b9%e7%9a%84%e7%bb%95%e8%bf%87%e6%8a%80%e5%b7%a7-5--%e4%bf%ae%e6%94%b9%e8%bf%94%e5%9b%9e%e5%8c%85" class="header-mark"></a>短信炸弹的绕过技巧 5&ndash;修改返回包</h4><p>在发送短信验证码的数据包，修改返回包的 Flase 为 Success</p>
<h4 id="短信炸弹的绕过技巧-6--并发" class="headerLink">
    <a href="#%e7%9f%ad%e4%bf%a1%e7%82%b8%e5%bc%b9%e7%9a%84%e7%bb%95%e8%bf%87%e6%8a%80%e5%b7%a7-6--%e5%b9%b6%e5%8f%91" class="header-mark"></a>短信炸弹的绕过技巧 6&ndash;并发</h4><p>对短信验证码的数据包进行并发，有机会绕过限制</p>
<p><a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-569f362e7ef69d7c32d5f7a714ec89b1486b42fd.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-569f362e7ef69d7c32d5f7a714ec89b1486b42fd.png">
        
    </a><br>
<a class="lightgallery" href="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-2e05570fe2a88f4cb915508987e529e497cf9acf.png" title="image.png" data-thumbnail="https://shs3.b.qianxin.com/attack_forum/2023/11/attach-2e05570fe2a88f4cb915508987e529e497cf9acf.png">
        
    </a></p>
<h4 id="在响应包里面可以看到短信验证码" class="headerLink">
    <a href="#%e5%9c%a8%e5%93%8d%e5%ba%94%e5%8c%85%e9%87%8c%e9%9d%a2%e5%8f%af%e4%bb%a5%e7%9c%8b%e5%88%b0%e7%9f%ad%e4%bf%a1%e9%aa%8c%e8%af%81%e7%a0%81" class="header-mark"></a>在响应包里面可以看到短信验证码</h4><p>在抓取短信验证码的数据包后，在 response 可以看到短信验证码</p>
<h4 id="提交别人的验证码" class="headerLink">
    <a href="#%e6%8f%90%e4%ba%a4%e5%88%ab%e4%ba%ba%e7%9a%84%e9%aa%8c%e8%af%81%e7%a0%81" class="header-mark"></a>提交别人的验证码</h4><p>假设有一个需要短信验证码功能点。给自己手机号 13512341234 发送验证码为 111111，给别人手机号 18312341234 收到验证码为 222222。那么自己手机号使用 222222 验证码，也能正常登录</p>
<h4 id="每次短信验证码都是同一个" class="headerLink">
    <a href="#%e6%af%8f%e6%ac%a1%e7%9f%ad%e4%bf%a1%e9%aa%8c%e8%af%81%e7%a0%81%e9%83%bd%e6%98%af%e5%90%8c%e4%b8%80%e4%b8%aa" class="header-mark"></a>每次短信验证码都是同一个</h4><p>一个手机号，点击 2 次发送短信验证码，验证码都是同一个。这样的情况下，可以试试爆破验证码，如果爆破次数无限制，还是存在验证码固定这样漏洞的</p>
<h4 id="验证码不失效-1" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e7%a0%81%e4%b8%8d%e5%a4%b1%e6%95%88-1" class="header-mark"></a>验证码不失效 1</h4><p>比如验证码是在修改密码处使用。在使用短信验证码进入修改密码后，验证码没有失效。当前用户还可以再次用这个短信验证码修改密码</p>
<h4 id="验证码不失效-2" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e7%a0%81%e4%b8%8d%e5%a4%b1%e6%95%88-2" class="header-mark"></a>验证码不失效 2</h4><p>场景：收到两条短信验证码，时间顺序为，1 在前，2 在后。收到的 2 后，1 还是没有失效-</p>
<h4 id="验证码绕过技巧" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e7%a0%81%e7%bb%95%e8%bf%87%e6%8a%80%e5%b7%a7" class="header-mark"></a>验证码绕过技巧</h4><p>项目在上线前，只是写好验证码接口，不会调用短信资源。因而为了功能登录会把验证码设计成固定的比如尝试 6 个 1，6 个 0 短信验证码</p>
<h4 id="验证码技巧" class="headerLink">
    <a href="#%e9%aa%8c%e8%af%81%e7%a0%81%e6%8a%80%e5%b7%a7" class="header-mark"></a>验证码技巧</h4><p>在找回密码方面，填写完账号名，要给A发短信验证码，通过burp拦截包，给B发送短信验证码。这样的话，就能用B的验证码提交给A用，造成任意账号密码重置</p>
<p>本文仅用于技术讨论与学习，利用此文所提供的信息而造成的任何直接或者间接的后果及损失，均由使用者本人负责，文章作者及本公众号不为此承担任何责任。</p>]]></description>
</item></channel>
</rss>
