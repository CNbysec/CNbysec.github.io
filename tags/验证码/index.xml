<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>验证码 on </title>
    <link>//localhost:1313/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/</link>
    <description>Recent content in 验证码 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 20 May 2024 17:55:46 +0800</lastBuildDate>
    <atom:link href="//localhost:1313/tags/%E9%AA%8C%E8%AF%81%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>验证码渗透最全总结</title>
      <link>//localhost:1313/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 20 May 2024 17:55:46 +0800</pubDate>
      <guid>//localhost:1313/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B8%97%E9%80%8F%E6%9C%80%E5%85%A8%E6%80%BB%E7%BB%93/</guid>
      <description>转载自： https://forum.butian.net/share/2602&#xA;验证码渗透最全总结 不少人在碰见验证码的时候，大多数只是看了一眼就过去了，没想到验证码还有啥可测试的。但其实验证码也能在项目中导致高危,并且验证码漏洞能在一定情况下造成危害。&#xA;验证码总结 验证码分为两块内容，一块是图形验证码，一块是短信验证码。下面是对这些技巧总结的思维导图。&#xA;图形验证码 图形验证码长宽可控 简单测试方法，就是看到一个登录框，然后新建打开图片链接，在图片链接中就有机会看到两个参数值，一个是 width，一个是 length。这两个参数是计算图片验证码的长宽，如果长宽过高就会过度消耗的是服务器的 CPU 资源。&#xA;当length为比较大的时候，响应时间为2767millis&#xA;注意：该漏洞能造成服务器拒绝服务攻击。有的 SRC 里面注明了，禁止使用 DDOS 攻击，这种漏洞是不收的，如果提交了漏洞，很有可能面临法律责任。&#xA;图形验证码可绕过 有时候开发，会写两套图形验证码流程，一套是在生产运行阶段必须使用正确验证码才能通过服务器校验。另外一套是在测试 SIT 环境下，把验证码设置为只要是 null 或者是空都可以登录验证码置为空，提高开发工作效率。还有的时候，将验证码修改为 true 就好了。这个是因为开发在进行图形验证码判断的时候，只要是验证码收到的是 true 就会通过。具体测试过程已经找不到了，大概写一下吧。&#xA;图形验证码不失效 简单易懂，图形验证码没有对应的失效机制。导致图形验证码能被多次利用。图形验证码在使用后未失效，发送短信时抓包，发送到Repeter中进行重放，可以发送成功!&#xA;图形验证码可识别 这个就是开发在制作图形验证码功能的时候，没有将图形验证码加入足够多的噪点，使验证码能够被现有的工具进行识别。一般是项目硬凑数用的，SRC 全部都不收。具体不做解释&#xA;图形验证码随机值可控 都知道图形验证码是后端随机生成的。那么随机生成的时候，有没有可能是能控制这个随机值？有可能! 生成验证码的随机值被写在了 url 里面&#xA;将characters固定为aaaa，可以看到图形验证码为aaaa&#xA;图形验证码返回到前端 测试过程已经找不到了，口头描述下大致就是登录后会在响应包中返回了下次图形验证码的内容。&#xA;短信验证码 我们已经写完了图形验证码部分，现实情况下短信验证码也是比较多。短信验证码的漏洞技巧要比图形验证码多很多&#xA;短信炸弹纵向 在一个限制时间的情况下对一个手机号，发送的短信验证码条数超过发送预期，这种漏洞我们都称为短信炸弹or短信轰炸or短信炸弹纵向&#xA;不停点击repeter或者放到intruder里面，就可以实现一个手机号接收到多条短信&#xA;短信炸弹横向 上面我们提到了在限定时间内，对一个手机号发送超过预期的短信条数是短信轰炸。造成的结果就是浪费短信资源。如果开发把这个漏洞给改了，那么还有没有漏洞？还有？不能给一个人发送短信验证了，那么给其他人发送验证码一样的。&#xA;将phone设置成变量，进行遍历&#xA;短信验证码可爆破 我们讲了 2 个发送短信验证码，都知道验证码通常 4 位数或者 6 位数的数字验证码。如果服务器没有限制提交的验证码的次数，那么我们可以爆破这个验证码。并且如果有 4 位验证码被爆破成功的话，在 SRC 里面通常是按照高危处理。&#xA;短信验证码可编辑 我们讲了发送短信验证码以及爆破短信验证码。我们知道短信验证码功能发送的是短信，那么我们就有可能把短信内容给更改。&#xA;通过修改transAmt 参数内容，可随意修改短信内容&#xA;短信炸弹的绕过技巧 我们在了解基础短信验证码的漏洞后，相应的开发也会进行了解。那么我们就需要增加技巧来绕过这些东西。&#xA;短信炸弹的绕过技巧 1&amp;ndash;特殊字符 通常，开发在发送短信验证码的时候，没有对特殊字符进行过滤。比如在手机号是 15312341234。我们加上+86，变成+8615312341234，这样的话服务器就有可能判定为两个手机号了。</description>
    </item>
  </channel>
</rss>
